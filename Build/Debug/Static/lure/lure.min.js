(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var ContentCore = require('../Content/ContentStore.js');

var Application = {
    Entry: null,
    isRun: false,
    Content: [],
    Run: function Run() {
        if (Application.isRun) return Lure.System.ShowWarn('[Lure] App is already run');
        Application.isRun = true;
        for (var i = 0; i < ContentCore.Roots.length; i++) {
            var ctn = ContentCore.Roots[i];
            if (ctn._Init) ctn._Init.call(ctn);
            try {
                //can be as field in another Content (just as field, not like child) so that _Init() could called also as child

            } catch (e) {
                console.error('Error in "' + Application.Content[i].Name + '"', Application.Content[i], '\n', e);
            }
        }
        if (Application.Entry) {
            /*for (let i = 0; i < Lure.ContentList._Root.length; i++){
             if (Lure.ContentList._Root[i].Name !== Application.Entry){
             Lure.ContentList._Root[i].Visible = false;
             }
             }*/
            var ct = ContentCore.ByName[Application.Entry];
            console.log('Application.Entry', Application.Entry, ct);
            if (ct) ct.Show();
        }
        //if (Lure.Route.Enabled){
        //    Lure.Route.Init();
        //}
        console.log('[Lure.App.Run]');
    }
};

module.exports = Application;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcGxpY2F0aW9uLmpzIl0sIm5hbWVzIjpbIkNvbnRlbnRDb3JlIiwicmVxdWlyZSIsIkFwcGxpY2F0aW9uIiwiRW50cnkiLCJpc1J1biIsIkNvbnRlbnQiLCJSdW4iLCJMdXJlIiwiU3lzdGVtIiwiU2hvd1dhcm4iLCJpIiwiUm9vdHMiLCJsZW5ndGgiLCJjdG4iLCJfSW5pdCIsImNhbGwiLCJlIiwiY29uc29sZSIsImVycm9yIiwiTmFtZSIsImN0IiwiQnlOYW1lIiwibG9nIiwiU2hvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsY0FBY0MsUUFBUSw0QkFBUixDQUFsQjs7QUFFQSxJQUFJQyxjQUFjO0FBQ2RDLFdBQU8sSUFETztBQUVkQyxXQUFPLEtBRk87QUFHZEMsYUFBUyxFQUhLO0FBSWRDLE9BSmMsaUJBSVQ7QUFDRCxZQUFLSixZQUFZRSxLQUFqQixFQUNJLE9BQU9HLEtBQUtDLE1BQUwsQ0FBWUMsUUFBWixDQUFxQiwyQkFBckIsQ0FBUDtBQUNKUCxvQkFBWUUsS0FBWixHQUFvQixJQUFwQjtBQUNBLGFBQUssSUFBSU0sSUFBSSxDQUFiLEVBQWdCQSxJQUFJVixZQUFZVyxLQUFaLENBQWtCQyxNQUF0QyxFQUE4Q0YsR0FBOUMsRUFBa0Q7QUFDOUMsZ0JBQUlHLE1BQU1iLFlBQVlXLEtBQVosQ0FBa0JELENBQWxCLENBQVY7QUFDQSxnQkFBSUcsSUFBSUMsS0FBUixFQUNJRCxJQUFJQyxLQUFKLENBQVVDLElBQVYsQ0FBZUYsR0FBZjtBQUNKLGdCQUFHO0FBQ0M7O0FBRUgsYUFIRCxDQUlBLE9BQU9HLENBQVAsRUFBUztBQUNMQyx3QkFBUUMsS0FBUixnQkFBMkJoQixZQUFZRyxPQUFaLENBQW9CSyxDQUFwQixFQUF1QlMsSUFBbEQsUUFBMERqQixZQUFZRyxPQUFaLENBQW9CSyxDQUFwQixDQUExRCxFQUFpRixJQUFqRixFQUFzRk0sQ0FBdEY7QUFDSDtBQUNKO0FBQ0QsWUFBSWQsWUFBWUMsS0FBaEIsRUFBc0I7QUFDbEI7Ozs7O0FBS0EsZ0JBQUlpQixLQUFLcEIsWUFBWXFCLE1BQVosQ0FBbUJuQixZQUFZQyxLQUEvQixDQUFUO0FBQ0FjLG9CQUFRSyxHQUFSLENBQVksbUJBQVosRUFBaUNwQixZQUFZQyxLQUE3QyxFQUFvRGlCLEVBQXBEO0FBQ0EsZ0JBQUlBLEVBQUosRUFDSUEsR0FBR0csSUFBSDtBQUNQO0FBQ0Q7QUFDQTtBQUNBO0FBQ0FOLGdCQUFRSyxHQUFSLENBQVksZ0JBQVo7QUFDSDtBQW5DYSxDQUFsQjs7QUFzQ0FFLE9BQU9DLE9BQVAsR0FBaUJ2QixXQUFqQiIsImZpbGUiOiJBcHBsaWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBDb250ZW50Q29yZSA9IHJlcXVpcmUoJy4uL0NvbnRlbnQvQ29udGVudFN0b3JlLmpzJyk7XHJcblxyXG5sZXQgQXBwbGljYXRpb24gPSB7XHJcbiAgICBFbnRyeTogbnVsbCxcclxuICAgIGlzUnVuOiBmYWxzZSxcclxuICAgIENvbnRlbnQ6IFtdLFxyXG4gICAgUnVuKCl7XHJcbiAgICAgICAgaWYgIChBcHBsaWNhdGlvbi5pc1J1bilcclxuICAgICAgICAgICAgcmV0dXJuIEx1cmUuU3lzdGVtLlNob3dXYXJuKCdbTHVyZV0gQXBwIGlzIGFscmVhZHkgcnVuJyk7XHJcbiAgICAgICAgQXBwbGljYXRpb24uaXNSdW4gPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ29udGVudENvcmUuUm9vdHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgY3RuID0gQ29udGVudENvcmUuUm9vdHNbaV07XHJcbiAgICAgICAgICAgIGlmIChjdG4uX0luaXQpXHJcbiAgICAgICAgICAgICAgICBjdG4uX0luaXQuY2FsbChjdG4pO1xyXG4gICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICAvL2NhbiBiZSBhcyBmaWVsZCBpbiBhbm90aGVyIENvbnRlbnQgKGp1c3QgYXMgZmllbGQsIG5vdCBsaWtlIGNoaWxkKSBzbyB0aGF0IF9Jbml0KCkgY291bGQgY2FsbGVkIGFsc28gYXMgY2hpbGRcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gXCIke0FwcGxpY2F0aW9uLkNvbnRlbnRbaV0uTmFtZX1cImAsQXBwbGljYXRpb24uQ29udGVudFtpXSwnXFxuJyxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXBwbGljYXRpb24uRW50cnkpe1xyXG4gICAgICAgICAgICAvKmZvciAobGV0IGkgPSAwOyBpIDwgTHVyZS5Db250ZW50TGlzdC5fUm9vdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICBpZiAoTHVyZS5Db250ZW50TGlzdC5fUm9vdFtpXS5OYW1lICE9PSBBcHBsaWNhdGlvbi5FbnRyeSl7XHJcbiAgICAgICAgICAgICBMdXJlLkNvbnRlbnRMaXN0Ll9Sb290W2ldLlZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICBsZXQgY3QgPSBDb250ZW50Q29yZS5CeU5hbWVbQXBwbGljYXRpb24uRW50cnldO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQXBwbGljYXRpb24uRW50cnknLCBBcHBsaWNhdGlvbi5FbnRyeSwgY3QpO1xyXG4gICAgICAgICAgICBpZiAoY3QpXHJcbiAgICAgICAgICAgICAgICBjdC5TaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vaWYgKEx1cmUuUm91dGUuRW5hYmxlZCl7XHJcbiAgICAgICAgLy8gICAgTHVyZS5Sb3V0ZS5Jbml0KCk7XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1tMdXJlLkFwcC5SdW5dJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFwcGxpY2F0aW9uOyJdfQ==
},{"../Content/ContentStore.js":5}],2:[function(require,module,exports){
'use strict';

/**
 * @function require
 */
var HtmlParse = require('./HtmlParser.js');
var ParseRegex = {
    DataLine: new RegExp('<[\\w ]+ [\\s\\S]*?({{#data-line}})[\\s\\S]*?>', 'gi'),
    LineID: new RegExp('{{#LineID}}', 'gi'),

    If: new RegExp('{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}', 'gi'),
    IfInline: new RegExp('{{#if([\\s\\S]*?\\?[\\s\\S]*?:[\\s\\S]*?)}}', 'gi'),
    Each: new RegExp('{{#each\\s+([^}]+)}}', 'gi'),
    EditRemove: new RegExp('<[^>]+class=[\'"][\\w\\d\\s-{}]*(editable|removable)[\\w\\d\\s-{}]*[\'"][^>]*>([^<]*)<[^>]+>', 'g'),
    Editable: new RegExp('<[^>]+class=[\'"][\\w\\d\\s-{}]*(editable)[\\w\\d\\s-{}]*[\'"][^>]*>([^<]*)<[^>]+>'),
    Removable: new RegExp('<[^>]+class=[\'"][\\w\\d\\s-{}]*(removable)[\\w\\d\\s-{}]*[\'"][^>]*>([^<]*)<[^>]+>'),
    EditableInEach: new RegExp('{{#each\\s+([^}]+)}}[\\s\\S]*<[^>]+class=[\'"][\\w\\d\\s-{}]*(editable|removable)[\\w\\d\\s-{}]*[\'"][^>]*>([^<]*)<[^>]+>[\\s\\S]*{{#endeach}}', 'g'),
    Expression: new RegExp('{{([^#}]+)}}', 'g')
};

var SpecialProps = ['this', '$item', '$this', '$parent', '$g', //'$global',
'$index', '$j', '$key', '$lvl']; //TreeBuilder's

function isParam(word) {
    return word.trim().length > 0 //not empty
    && SpecialProps.indexOf(word.split('.')[0]) < 0 //not a special word
    && !Lure.isNumeric(word); //not a number
    //&& "()".indexOf(word.trim()) < 0            //kurwa?
}

function Compile(DOMString, Controller) {
    DOMString = DOMString.replace(ParseRegex.LineID, '{{__LineID}}');
    DOMString = DOMString.replace(ParseRegex.DataLine, function (m, dataline) {
        return m.replace(dataline, 'data-line="{{__LineID}}"');
    });
    //let o = this.HtmlParser.Parse(DOMString);
    var o = HtmlParse(DOMString);
    //console.log('Tree', o);
    //let TargetProperty = 'o'; // or $item


    //Tree = CompileElement(o, Controller);
    //console.log('Tree', Tree);
    return CompileElement(o, Controller);
}
function CompileElement(Element, Controller) {
    var Elem = Element;
    Elem.Properties = [];
    if (Elem.Tag === 'text') {
        var Gen = CompileProperty(Elem.InnerHTML, Controller);
        Elem.Properties = Gen.Properties;
        Elem.Gen = Gen.Gen;
        return Elem;
    }
    //Attributes
    for (var k in Element.Attributes) {
        if (Element.Attributes.hasOwnProperty(k)) {
            var Att = Element.Attributes[k];

            if (k.substring(0, 2).toLowerCase() === 'on') {
                //Context.AddEventListener(a.substring(2), )
                Elem.Attributes[k] = new Function('e', 'p', 'return ' + Att + '.call(this, e, p);');
                continue;
            }

            Elem.Attributes[k] = CompileProperty(Att, Controller);
            /*if (Att.indexOf('{{') > -1) {
             Elem.Attributes[k] = CompileProperty(Att, Controller);
             }
             else{
             Elem.Attributes[k] = Att;
             }*/
            /*for (let a in Elem.Attributes[k].Properties){
             let p = Elem.Attributes[k].Properties[a];
             if (Elem.Attributes[k].Properties.hasOwnProperty(a) && Elem.Properties.indexOf(p) < 0){
             Elem.Properties.push(p);
             }
             }*/
        }
    }
    //children
    for (var i = 0; i < Element.Children.length; i++) {
        CompileElement(Element.Children[i], Controller);
    }
    return Elem;
}

function CompileProperty(PropertyString, Controller) {
    var Properties = [];
    var f = new Function('__State', 'MagicParameter', '\n    let $item    = __State.State;\n    let $this    = __State.Data; \n    let o        = __State.Data;\n    let __LineID = __State.LineID; \n    let i = __State.i; \n    let j = __State.j; \n    //debugger;\n    return `' + Prepare(PropertyString, Properties, Controller) + '`;\n            ');
    return {
        Path: '',
        Properties: Properties,
        Gen: f //function(o,p){return f.call(this,o,p)},
        //Generator: LureCompiler.Prepare(AttValue, Properties),
    };
}
function Prepare(c, properties, Controller) {
    return c.replace(ParseRegex.Expression, function (bkt, expression) {
        return '${' + PrepareProperty(expression, properties, Controller) + '}';
    });
}
function PrepareProperty(ObjectName, properties, Controller) {
    var Func = 0; //function count(level) like f(g(p(x,y))) - 3
    var Word = ''; //property or number or const string
    var Splitters = '+-*/^<>?:|& ,';
    var Quotes = '`"\'';
    var isString = false;
    var isFunc = false;

    var Result = '';

    function FinishWord(Ch) {
        if (!isString) {
            if (isParam(Word)) {
                //is param
                if (properties.indexOf(Word) < 0) properties.push(Word);

                //debugger;
                Word = '__State.PropFormat && __State.PropFormat["' + Word + '"]? __State.PropFormat["' + Word + '"].call(this, o.' + Word + ',$this) : ((typeof o.' + Word + '!==typeof void 0)?o.' + Word + ':"' + Lure.Settings.Compiler.Undefined + '")';
                // if (!!Controller && Controller.PropFormat && Controller.PropFormat[Word])
                //     Word = `Controller.PropFormat["${Word}"].call(this, o.${Word},$this)`;
                // else
                //     Word = `((typeof o.${Word}!==typeof void 0)?o.${Word}:"${Lure.Settings.Compiler.Undefined}")`;

                //Word = 'o.'+Word;
                //Word = `Controller.GetComputedProperty('${Word}')`;
            }
            Result += Word;
            Word = '';
            if (Ch !== ' ') Result += Ch;
        } else {
            Word += Ch;
            Result += Word;
            Word = '';
            isString = false;
        }
    }
    for (var i = 0; i < ObjectName.length; i++) {
        var Ch = ObjectName.charAt(i);
        //string check
        if (Quotes.indexOf(Ch) > 0) {
            if (isString) {
                if (Ch === Word.charAt(0) && i > 0 && ObjectName.charAt(i - 1) !== '\\') {
                    FinishWord(Ch);
                    continue;
                } else if (Ch === Word.charAt(0) && i > 0 && ObjectName.charAt(i - 1) === '\\') {
                    Word = Word.substring(0, Word.length - 1);
                    Word += Word.charAt(0);
                    continue;
                }
            } else {
                isString = true;
                Word += Ch;
                continue;
            }
        }
        //if sting quote opened before
        if (isString) {
            Word += Ch;
            continue;
        }
        if (Splitters.indexOf(Ch) < 0) {
            //if not splitter character
            /*bracket test: function caller or just brackets*/
            if (Ch === '(' && !isString) {
                if (i > 0 && Splitters.indexOf(ObjectName.charAt(i - 1)) < 0) {
                    isFunc = true;
                    Func++;
                    FinishWord(Ch);
                } else {
                    Result += Ch;
                }
            } else if (Ch === ')' && !isString) {
                if (Func > 0) {
                    Func--;
                }
                FinishWord(Ch);
            } else {
                Word += Ch;
            }
        } else {
            FinishWord(Ch);
        }
    }
    //last word commit
    FinishWord('');
    //console.log(properties);
    return Result;
}

module.exports = Compile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./HtmlParser.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LureHtmlElement = function () {
    _createClass(LureHtmlElement, [{
        key: 'Render',
        value: function Render() {
            var _this = this;

            var State = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._State;
            var Context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._Context;

            this._State = State;
            this._Context = Context;
            var Data = State.Data;
            if (this.Tag !== '#each' && this.Tag !== '#if' && this.Tag !== 'text') {}
            if (this.Tag === '#each') {
                var EachObject = Data[this.Property];

                if (EachObject && Array.isArray(EachObject)) {
                    this.EachItems = this.EachItems ? this.EachItems : [];

                    for (var each = 0; each < Data[this.Property].length; each++) {
                        var EachItem = this.EachItems[each];
                        //if the same each item
                        // if (EachItem)
                        //     debugger;
                        var SubState = {
                            State: Data,
                            Data: Data[this.Property][each],
                            PropFormat: State.PropFormat[this.Property] ? State.PropFormat[this.Property] : {},
                            Parent: State.Parent ? State.Parent : Data,
                            LineID: State.LineID,
                            i: State.i,
                            j: each
                        };

                        if (EachItem && EachItem.ListData === Data[this.Property] && EachItem.ListData.length === Data[this.Property].length) {
                            for (var j = 0; j < EachItem.Elements.length; j++) {
                                EachItem.Elements[j].Render(SubState, Context);
                            }
                            continue;
                        }
                        //if each list is changed
                        //this.EachItems = [];
                        EachItem = {
                            ListData: Data[this.Property],
                            Elements: [],
                            Parent: this.Parent,
                            j: each
                        };

                        for (var _j = 0; _j < this.Children.length; _j++) {
                            this.Children[_j].Parent = this.Parent;
                            var EachJ = new LureHtmlElement(this.Children[_j]);
                            EachJ.Render(SubState, Context);
                            EachItem.Elements.push(EachJ);
                        }
                        this.EachItems[each] = EachItem;
                    }
                }
                return this.Parent.DOM;
            }
            /*########*/
            //if normal elem
            this.DOM = this.DOM ? this.DOM : document.createElement(this.Tag);
            if (this.Children.length === this.Children.Where(function (h) {
                return h.Tag === 'text';
            }).length) this.DOM.innerHTML = '';

            for (var a in this.Attributes) {
                if (this.Attributes.hasOwnProperty(a)) {
                    var _ret = function () {
                        var Att = _this.Attributes[a];
                        var AttValue = Att.Gen ? Att.Gen.call(Context, State) : Att;
                        //check for listeners
                        //add listeners
                        if (a.substring(0, 2).toLowerCase() === 'on') {
                            //Context.AddEventListener(a.substring(2), )
                            if (!_this.DOM[a]) _this.DOM[a] = function (e) {
                                Att.call(Context, Context._State);
                            }.bind(Context);
                            return 'continue';
                        }

                        _this.DOM.setAttribute(a, AttValue);

                        //check state of inputs when re-render
                        if (_this.Tag === 'input' && (_this.DOM.getAttribute('type') === 'checkbox' || _this.DOM.getAttribute('type') === 'radio') && a === 'checked') {
                            _this.DOM.checked = Lure.PropTypes.Bool(AttValue, a);
                        }
                    }();

                    if (_ret === 'continue') continue;
                }
            }

            for (var i = 0; i < this.Children.length; i++) {
                this.Children[i].Render(State, Context);
            }
            if (this.Tag === 'text') {
                //this.Parent.DOM.innerHTML += this.Gen(State);
                if (this.Parent.Children.length > this.Parent.Children.Where(function (h) {
                    return h.Tag === 'text';
                }).length) {
                    this.DOM.innerHTML = this.Gen.call(Context, State);
                    this.Parent.DOM.appendChild(this.DOM);
                } else {
                    this.Parent.DOM.innerHTML += this.Gen.call(Context, State, {});
                }
            } else {
                if (this.Parent && this.Parent.DOM) this.Parent.DOM.appendChild(this.DOM);
                return this.DOM;
            }
        }
    }, {
        key: 'Refresh',
        value: function Refresh() {
            var Property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var Data = arguments[1];
            var Params = arguments[2];

            if (Property === null) {
                return this.Render(Data, Params);
            }
            console.warn("haven't ready yet");
            return null;
            //
            // for (let a in this.Attributes){
            //     if (this.Attributes.hasOwnProperty(a)){
            //         let Att = this.Attributes[a];
            //         let AttValue = Att.Gen ? Att.Gen(Data, Params) : Att;
            //         this.DOM.setAttribute(a, AttValue);
            //
            //         //check state of inputs when re-render
            //         if (this.Tag === 'input' && (this.DOM.getAttribute('type') === 'checkbox' || this.DOM.getAttribute('type') === 'radio') && a === 'checked'){
            //             this.DOM.checked = Lure.PropTypes.TryParse(Lure.PropTypes.Bool, AttValue, null); //TODO Bool PropType parsing
            //         }
            //     }
            // }
            // //children
            // for (let i = 0; i < this.Children.length; i++){
            //     let c = this.Children[i];
            //     //if just an element:
            //     if (c.Tag !== '#each' && c.Tag !== '#if'){
            //         this.Children[i].Refresh(Property, Data, Params);
            //         continue;
            //     }
            //
            //     // if something complicated (#each, #if)
            //     // case #each
            //
            //     let EachObject = Data[c.Property];
            //     if (EachObject && Array.isArray(EachObject)){
            //         if (Property === c.Property){
            //             this.EachItems = [];
            //             for (let each = 0; each < Data[c.Property].length; each++){
            //                 let P = {
            //                     LineID: Params.LineID,
            //                     $item: Data,
            //                     $this: Data[c.Property][each],
            //                     $Parent: Params.$Parent ? Params.$Parent : Data,
            //                     i: Params.i,
            //                     j: each,
            //                 };
            //                 let EachItem = {
            //                     Elements: [],
            //                     Parent: this.Parent,
            //                     Path: `o.${c.Property}[${each}]`,
            //                     get Data(){
            //                         return Data[c.Property][each];
            //                     },
            //                     DataRendered: Data[c.Property][each],
            //                     j: each,
            //                 };
            //
            //                 for (let j = 0;j < c.Children.length; j++){
            //                     c.Children[j].Parent = this;
            //                     let EachJ = new LureHtmlElement(c.Children[j]);
            //                     EachJ.Render(Data[c.Property][each], P);
            //                     EachItem.Elements.push(EachJ);
            //                 }
            //                 this.EachItems.push(EachItem);
            //             }
            //         } else {
            //             for (let each = 0; each < Data[c.Property].length; each++){
            //                 let P = {
            //                     LineID: Params.LineID,
            //                     $item: Data,
            //                     $this: Data[c.Property][each],
            //                     $Parent: Params.$Parent ? Params.$Parent : Data,
            //                     i: Params.i,
            //                     j: each,
            //                 };
            //                 if (this.EachItems[each]){
            //                     for (let j = 0;j < this.EachItems[each].Elements.length; j++){
            //                         this.EachItems[each].Elements[j].Refresh(Property, Data[c.Property][each], P);
            //                     }
            //                     continue;
            //                 }
            //                 let EachItem = {
            //                     Elements: [],
            //                     Parent: this.Parent,
            //                     Path: `o.${c.Property}[${each}]`,
            //                     get Data(){
            //                         return Data[c.Property][each];
            //                     },
            //                     DataRendered: Data[c.Property][each],
            //                     j: each,
            //                 };
            //
            //                 for (let j = 0;j < c.Children.length; j++){
            //                     c.Children[j].Parent = this;
            //                     let EachJ = new LureHtmlElement(c.Children[j]);
            //                     EachJ.Render(Data[c.Property][each], P);
            //                     EachItem.Elements.push(EachJ);
            //                 }
            //                 this.EachItems.push(EachItem);
            //             }
            //         }
            //
            //     }
            // }
            // if (this.Tag === 'text' && this.Properties.indexOf(Property))
            // {
            //     //this.Parent.DOM.innerHTML += this.Gen(Data);
            //     if (this.Parent.Children.length > this.Parent.Children.Where(h=>h.Tag === 'text').length)
            //     {
            //         this.DOM.innerHTML = this.Gen(Data, {});
            //         this.Parent.DOM.appendChild(this.DOM);
            //     }
            //     else
            //     {
            //         this.Parent.DOM.innerHTML += this.Gen(Data, {});
            //     }
            // }
            // else {
            //     if (this.Parent && this.Parent.DOM)
            //         this.Parent.DOM.appendChild(this.DOM);
            //     return this.DOM;
            // }
        }
    }]);

    function LureHtmlElement(_ref) {
        var _ref$Parent = _ref.Parent,
            Parent = _ref$Parent === undefined ? null : _ref$Parent,
            _ref$Patron = _ref.Patron,
            Patron = _ref$Patron === undefined ? null : _ref$Patron,
            _ref$Tag = _ref.Tag,
            Tag = _ref$Tag === undefined ? 'div' : _ref$Tag,
            _ref$Attributes = _ref.Attributes,
            Attributes = _ref$Attributes === undefined ? {} : _ref$Attributes,
            _ref$InnerHTML = _ref.InnerHTML,
            InnerHTML = _ref$InnerHTML === undefined ? '' : _ref$InnerHTML,
            _ref$Properties = _ref.Properties,
            Properties = _ref$Properties === undefined ? [] : _ref$Properties,
            _ref$Data = _ref.Data,
            Data = _ref$Data === undefined ? {} : _ref$Data,
            _ref$LineID = _ref.LineID,
            LineID = _ref$LineID === undefined ? null : _ref$LineID,
            _ref$Children = _ref.Children,
            Children = _ref$Children === undefined ? [] : _ref$Children,
            _ref$Property = _ref.Property,
            Property = _ref$Property === undefined ? '' : _ref$Property,
            _ref$Gen = _ref.Gen,
            Gen = _ref$Gen === undefined ? function () {} : _ref$Gen;

        _classCallCheck(this, LureHtmlElement);

        this.Tag = Tag;
        this.Attributes = Attributes;
        this.InnerHTML = InnerHTML;
        this.Properties = Properties;
        this.LineID = LineID;
        this.Gen = Gen;

        this.Data = Data;
        this.Property = Property;

        this.DOM = null;
        this.Children = [];
        this.Parent = Parent;
        for (var i = 0; i < Children.length; i++) {
            Children[i].Parent = this;
            this.Children[i] = new LureHtmlElement(Children[i]);
        }
    }

    return LureHtmlElement;
}();

module.exports = LureHtmlElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],4:[function(require,module,exports){
'use strict';

var VoidElements = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr', 'path', 'circle', 'ellipse', 'line', 'rect', 'use', 'stop', 'polyline', 'polygon']; // svg void elements
var RegexpTag = new RegExp('<([\\/\\w\\-]+)([\\s\\S]*?)>([^<]*\\?[^>]+:[^<>]+)*', 'g'); //  /<([\/\w\-]+)([\s\S]*?)>([^<]*\?[^>]+:[^<>]+)*/g;
var RegexpAtt = new RegExp('([\\w-]+)=', 'g');
var RegexComment = new RegExp('<!--[\\s\\S]*?-->', 'g');
var RegexDataLine = new RegExp('<[\\w ]+ [\\s\\S]*?({{#data-line}})[\\s\\S]*?>', 'gi');
var RegexLineID = new RegExp('{{#LineID}}', 'gi');

var IndexTag = 0;

function isVoidElement(TagName) {
    return VoidElements.indexOf(TagName) > -1;
}
function OnTag(Str, Find, PrevFind, Element) {
    var IndexLast = IndexTag;
    if (PrevFind !== null) {
        var TagName = Find[1];
        var CurrentElement = Element;

        /*TEXT*/
        var len = PrevFind[0].length;
        var sw = 0;
        if (typeof PrevFind[3] !== 'undefined') sw = 1;
        //check innerText and keywords (like #each, #if, etc.)
        var text = Str.substring(PrevFind.index + len + sw, Find.index).trim();
        if (text.length > 0) {
            var TextShot = text;
            var SharpElem = false;
            var TextElementA = null;
            var TextElementB = null;
            text = text.replace(/{{#(each|if|else|elseif)([\s\S]+?)}}|{{#endeach}}|{{#endif}}/gi, function (m, tag, prop) {
                if (tag && (tag.toLowerCase() === 'each' || tag.toLowerCase() === 'if')) {
                    IndexTag++;
                    CurrentElement = {
                        Tag: '#' + tag.toLowerCase(),
                        Property: prop.trim(),
                        Attributes: {},
                        Children: [],
                        Parent: Element
                    };
                    SharpElem = true;
                    Element.Children.push(CurrentElement);
                    return '';
                } else if (m.toLowerCase() === '{{#endeach}}' || m.toLowerCase() === '{{#endif}}') {
                    CurrentElement = Element.Parent;
                    IndexTag--;

                    return '';
                }
                debugger;
                TextElementA = {
                    Tag: 'text',
                    Attributes: {},
                    Children: [],
                    InnerHTML: m
                };
                CurrentElement.Children.push(TextElementA);
                return '';
            });
            if (text.trim().length > 0) {
                //debugger
                TextElementB = {
                    Tag: 'text',
                    Attributes: {},
                    Children: [],
                    InnerHTML: text
                };
                //Element.Children.push(TextElementB);
                if (IndexLast > IndexTag) Element.Parent.Children.push(TextElementB);else Element.Children.push(TextElementB);
            }
            /*if (TextElementB)
             {
             if (IndexLast > IndexTag)
             Element.Parent.Children.push(TextElementB);
             else
             Element.Children.push(TextElementB);
                 }
             if (SharpElem)
             Element.Children.push(CurrentElement);*/
        }
        /*--TEXT*/
        //if open Tag
        if (TagName[0] !== "/") {

            if (!isVoidElement(TagName)) IndexTag++;
            var ff = Find[2];
            if (Find[3]) ff += '>' + Find[3];
            var e = {
                Tag: Find[1],
                Attributes: ParseAttribute(ff),
                Children: [],
                Parent: CurrentElement
            };
            CurrentElement.Children.push(e);
            return e;
        }
        //if close tag
        else {
                IndexTag--;
            }

        if (IndexLast < IndexTag) return CurrentElement;else return Element;
    } else {
        IndexTag++;
        var _ff = Find[2];
        if (Find[3]) _ff += '>' + Find[3];
        return {
            Tag: Find[1],
            Attributes: ParseAttribute(_ff),
            Children: [],
            Parent: null
        };
    }
}
function ParseAttribute() {
    var Str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var PrevFind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var Atts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var Find = RegexpAtt.exec(Str);
    ////console.log('att', Find);
    OnAttribute(Str, Find, PrevFind, Atts);
    if (Find !== null) {
        ParseAttribute(Str, Find, Atts);
    }
    return Atts;
}
function OnAttribute(Str, Find, PrevFind, Atts) {
    if (PrevFind !== null) {
        if (Find !== null) {
            var Quote = Str.substr(PrevFind.index + PrevFind[0].length, 1);
            var IndexStart = PrevFind.index + PrevFind[0].length + 1;
            var IndexEnd = Str.lastIndexOf(Quote + ' ', Find.index);
            IndexEnd = IndexEnd > IndexStart ? IndexEnd : Find.index;
            var s = Str.substring(IndexStart, IndexEnd + 1).trim();
            s = s.substring(0, s.length - 1).trim();
            Atts[PrevFind[1]] = s;
        } else {
            var _Quote = Str.substr(PrevFind.index + PrevFind[0].length, 1);
            var _IndexStart = PrevFind.index + PrevFind[0].length + 1;
            var _IndexEnd = Str.lastIndexOf(_Quote + ' ');
            _IndexEnd = _IndexEnd > _IndexStart ? _IndexEnd : Str.length - 1;
            Atts[PrevFind[1]] = Str.substring(PrevFind.index + PrevFind[0].length + 1, _IndexEnd).trim();
        }
    }
}
function Parse() {
    var DOMString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var PrevFind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var Element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    DOMString = DOMString.replace(RegexComment, '');
    DOMString = DOMString.replace(RegexLineID, '{{__LineID}}');
    DOMString = DOMString.replace(RegexDataLine, function (m, dataline) {
        return m.replace(dataline, 'data-line="{{__LineID}}"');
    });

    var Find = RegexpTag.exec(DOMString);
    var IndexLast = IndexTag;
    if (Find !== null) {
        Element = OnTag(DOMString, Find, PrevFind, Element);
        Parse(DOMString, Find, IndexLast < IndexTag ? Element : Element.Parent);
    }
    //console.log(IndexLast, IndexTag, Find);
    return Element;
}
module.exports = Parse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],5:[function(require,module,exports){
"use strict";

module.exports = {
    List: [], // [LureContent, LureContent]
    Roots: [], // [LureContent, LureContent]
    ByType: {}, // {'ContentType': [LureContent, LureContent]}
    ByName: {} // {'ContentName': LureContent}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnRlbnRTdG9yZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTGlzdCIsIlJvb3RzIiwiQnlUeXBlIiwiQnlOYW1lIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JDLFVBQVEsRUFESyxFQUNEO0FBQ1pDLFdBQVEsRUFGSyxFQUVEO0FBQ1pDLFlBQVEsRUFISyxFQUdEO0FBQ1pDLFlBQVEsRUFKSyxDQUlEO0FBSkMsQ0FBakIiLCJmaWxlIjoiQ29udGVudFN0b3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBMaXN0OiAgIFtdLCAvLyBbTHVyZUNvbnRlbnQsIEx1cmVDb250ZW50XVxyXG4gICAgUm9vdHM6ICBbXSwgLy8gW0x1cmVDb250ZW50LCBMdXJlQ29udGVudF1cclxuICAgIEJ5VHlwZToge30sIC8vIHsnQ29udGVudFR5cGUnOiBbTHVyZUNvbnRlbnQsIEx1cmVDb250ZW50XX1cclxuICAgIEJ5TmFtZToge30sIC8vIHsnQ29udGVudE5hbWUnOiBMdXJlQ29udGVudH1cclxufTsiXX0=
},{}],6:[function(require,module,exports){
"use strict";

var DialogElements = [];

module.exports = {
    ConfirmCount: 0,
    Add: function Add(DOMElement) {
        if (DialogElements.indexOf(DOMElement) < 0) DialogElements.push(DOMElement);
    },
    Remove: function Remove(DOMElement) {
        //Lure.Route.Back();
        var i = DialogElements.indexOf(DOMElement);
        if (i > -1) {
            DialogElements.splice(i, 1);
        }
    },

    get zIndex() {
        if (DialogElements.length < 1) return 10;
        return DialogElements.Select(function (x) {
            return parseInt(window.getComputedStyle(x).zIndex);
        }).sort(function (a, b) {
            return a - b;
        }).First();
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRpYWxvZy5qcyJdLCJuYW1lcyI6WyJEaWFsb2dFbGVtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJDb25maXJtQ291bnQiLCJBZGQiLCJET01FbGVtZW50IiwiaW5kZXhPZiIsInB1c2giLCJSZW1vdmUiLCJpIiwic3BsaWNlIiwiekluZGV4IiwibGVuZ3RoIiwiU2VsZWN0IiwicGFyc2VJbnQiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwieCIsInNvcnQiLCJhIiwiYiIsIkZpcnN0Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGlCQUFpQixFQUFyQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxrQkFBYyxDQUREO0FBRWJDLE9BRmEsZUFFVEMsVUFGUyxFQUVFO0FBQ1gsWUFBSUwsZUFBZU0sT0FBZixDQUF1QkQsVUFBdkIsSUFBcUMsQ0FBekMsRUFDSUwsZUFBZU8sSUFBZixDQUFvQkYsVUFBcEI7QUFDUCxLQUxZO0FBTWJHLFVBTmEsa0JBTU5ILFVBTk0sRUFNSztBQUNkO0FBQ0EsWUFBSUksSUFBSVQsZUFBZU0sT0FBZixDQUF1QkQsVUFBdkIsQ0FBUjtBQUNBLFlBQUlJLElBQUksQ0FBQyxDQUFULEVBQVc7QUFDUFQsMkJBQWVVLE1BQWYsQ0FBc0JELENBQXRCLEVBQXlCLENBQXpCO0FBQ0g7QUFDSixLQVpZOztBQWFiLFFBQUlFLE1BQUosR0FBWTtBQUNSLFlBQUlYLGVBQWVZLE1BQWYsR0FBd0IsQ0FBNUIsRUFDSSxPQUFPLEVBQVA7QUFDSixlQUFPWixlQUNGYSxNQURFLENBQ0s7QUFBQSxtQkFBR0MsU0FBU0MsT0FBT0MsZ0JBQVAsQ0FBd0JDLENBQXhCLEVBQTJCTixNQUFwQyxDQUFIO0FBQUEsU0FETCxFQUVGTyxJQUZFLENBRUcsVUFBQ0MsQ0FBRCxFQUFHQyxDQUFIO0FBQUEsbUJBQU9ELElBQUVDLENBQVQ7QUFBQSxTQUZILEVBR0ZDLEtBSEUsRUFBUDtBQUlIO0FBcEJZLENBQWpCIiwiZmlsZSI6IkRpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBEaWFsb2dFbGVtZW50cyA9IFtdO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBDb25maXJtQ291bnQ6IDAsXHJcbiAgICBBZGQoRE9NRWxlbWVudCl7XHJcbiAgICAgICAgaWYgKERpYWxvZ0VsZW1lbnRzLmluZGV4T2YoRE9NRWxlbWVudCkgPCAwKVxyXG4gICAgICAgICAgICBEaWFsb2dFbGVtZW50cy5wdXNoKERPTUVsZW1lbnQpO1xyXG4gICAgfSxcclxuICAgIFJlbW92ZShET01FbGVtZW50KXtcclxuICAgICAgICAvL0x1cmUuUm91dGUuQmFjaygpO1xyXG4gICAgICAgIGxldCBpID0gRGlhbG9nRWxlbWVudHMuaW5kZXhPZihET01FbGVtZW50KTtcclxuICAgICAgICBpZiAoaSA+IC0xKXtcclxuICAgICAgICAgICAgRGlhbG9nRWxlbWVudHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXQgekluZGV4KCl7XHJcbiAgICAgICAgaWYgKERpYWxvZ0VsZW1lbnRzLmxlbmd0aCA8IDEpXHJcbiAgICAgICAgICAgIHJldHVybiAxMDtcclxuICAgICAgICByZXR1cm4gRGlhbG9nRWxlbWVudHNcclxuICAgICAgICAgICAgLlNlbGVjdCh4PT5wYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh4KS56SW5kZXgpKVxyXG4gICAgICAgICAgICAuc29ydCgoYSxiKT0+YS1iKVxyXG4gICAgICAgICAgICAuRmlyc3QoKVxyXG4gICAgfVxyXG59OyJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LurePropertySeter = function () {
    _createClass(LurePropertySeter, [{
        key: 'Get',
        value: function Get() {
            return this.__Data;
        }
    }, {
        key: 'Set',
        value: function Set(Data) {
            this.RemoveKeys(this);
            this.RemoveKeys(this.__Data);
            for (var k in Data) {
                if (Data.hasOwnProperty(k)) {
                    this.__Data[k] = Data[k];
                }
            }
            this.GetSet(this.__Data, this, this.__PropTypes);
            this.__OnSet(this.__Data);
        }
    }, {
        key: 'GetArrayPropType',
        value: function GetArrayPropType(ctx, PropTypes) {
            if (!ctx) return { __nullCtx: null };
            var PT = PropTypes[ctx.__Key];
            if (PT) return PT;
            return this.GetArrayPropType(ctx.__PrevCtx, PropTypes);
        }
    }, {
        key: 'CloseObject',
        value: function CloseObject(ctx) {
            if (!ctx.__PrevCtx) return void 0;
            if (ctx.__PrevCtx.__Type !== 'array') return ctx;
            return this.CloseObject(ctx.__PrevCtx);
        }
    }, {
        key: 'RemoveKeys',
        value: function RemoveKeys(ctx) {
            for (var k in ctx) {
                if (ctx.hasOwnProperty(k) && k.substring(0, 2) !== '__') {
                    delete ctx[k];
                }
            }
        }
    }, {
        key: 'GetSet',
        value: function GetSet(obj, ctx) {
            var _this = this;

            var PropTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { __Null: null };

            var _loop = function _loop(k) {

                if (obj.hasOwnProperty(k)) {
                    var Type = Lure.GetType(obj[k]);
                    var Getter = function Getter(Value) {
                        if (Value === void 0) return Getter.Get(); //obj[k];
                        return Getter.Set(Value);
                    };

                    Getter.__Key = k;
                    Getter.__PrevCtx = ctx;
                    Getter.__Type = Type;
                    Getter.__Setter = _this;

                    var isArray = Type === 'array';
                    var isArrayParent = ctx.__Type === 'array';
                    var PT = PropTypes;
                    var fa = 0;
                    if (ctx.__Type !== void 0) {
                        if (isArrayParent && !isArray) {
                            //debugger
                            PT = PropTypes; //ctx.__Key];
                            fa = 1;
                        }
                        if (isArrayParent && isArray) {
                            PT = PropTypes;
                            fa = 2;
                        }
                        if (!isArrayParent && !isArray) {
                            PT = _this.GetArrayPropType(ctx, PropTypes); //PropTypes[ctx.__Key];
                            fa = 3;
                        }
                        if (!isArrayParent && isArray) {
                            PT = _this.GetArrayPropType(ctx, PropTypes);
                            fa = 4;
                        }
                    }
                    Getter.__PropTypes = PT;
                    //debugger;
                    //console.log(`ctx.Key:${ctx.__Key === void 0? 'root': ctx.__Key},k:${k}, fa:${fa}`, PT);
                    Getter.Get = function () {
                        return obj[k];
                    };
                    Getter.GetFormatted = function () {
                        return obj[k];
                    };
                    Getter.Set = function (v) {
                        var t = Lure.GetType(v);
                        if (t === 'object' || t === 'array') {
                            if (t === 'object') {
                                Getter.__Setter.RemoveKeys(Getter);
                            }
                            //let PT = ctx.__Type !== 'array' ? PT[k] : PT;
                            Getter.__Setter.GetSet(v, this, PT);
                        }
                        //debugger;
                        if (t !== 'object' && t !== 'array' && PT[k]) {
                            v = PT[k](v);
                        } else if (t !== 'object' && t !== 'array' && ctx.__Type === 'array' && PT[ctx.__Key]) {
                            v = PT[ctx.__Key](v);
                        }
                        obj[k] = v;
                        Getter.__Setter.__OnSet(obj);
                        return v;
                    };
                    //debugger
                    if (Type === 'object' || Type === 'array') {
                        _this.GetSet(obj[k], Getter, PT);
                    }
                    ctx[k] = Getter;
                }
            };

            /*
             x = new LurePropertySetter(HustleState, {PropTypes: HustleTypes});
             x.Vox.Page.Set(-2);
             x.Vox.Set({Date: 124312412414, Page: 'Das3'});
             x.Vox.Page.Set(-23);
             x.Rock[0].Date.Set('14.12.2018');
             x.Rock[0].Set({Date: 12412414, asf: 'Das3'});
             x.Rock[0].Date.Set('16.12.2018');
             */
            // if (Array.isArray(obj)){
            //     for (let i = 0; i < obj.length; i++){
            //         let Type = Lure.GetType(obj[i]);
            //         let Getter = {};
            //         Getter.__Type      = Type;
            //         Getter.__Setter    = this;
            //         Getter.__PropTypes = PropTypes;
            //         Getter.Get = function () {
            //             return obj[i];
            //         };
            //         Getter.Set = function (v) {
            //             let t = Lure.GetType(v);
            //             if (t === 'object' || t === 'array'){
            //                 if (t === 'object'){
            //                     Getter.__Setter.RemoveKeys(Getter);
            //                 }
            //                 let PT = ctx.__Type !== 'array' ? PropTypes[i] : PropTypes;
            //                 Getter.__Setter.GetSet(v, this, PT);
            //             }
            //             if (t !== 'object' && t !== 'array' && Getter.__PropTypes[k]){
            //                 v = Getter.__PropTypes[k](v);
            //             }
            //             return obj[i] = v;
            //         };
            //         if (Type === 'object'){
            //             this.GetSet(obj[i], Getter, PropTypes);
            //         }
            //         if (Type === 'array'){
            //             this.GetSet(obj[i], Getter, PropTypes);
            //         }
            //         ctx[i] = Getter;
            //     }
            //     return;
            // }

            for (var k in obj) {
                _loop(k);
            }
        }
    }]);

    function LurePropertySeter(Setup) {
        var Options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, LurePropertySeter);

        this.__PropTypes = Options.PropTypes;
        this.__PropFormat = Options.PropFormat;
        this.__OnSet = Options.OnSet;

        this.__Data = Setup;
        this.GetSet(Setup, this, this.__PropTypes);
    }

    return LurePropertySeter;
}();

module.exports = LurePropertySeter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],8:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @function require
 */

var t = window.performance.now();
//### UTILS
/* Date Format */
Date.prototype.Format = function (format, isBandMonthNames) {
    // console.warn('Deprecation warning.', 'This method will be killed on release. Use Lure.Date().Format');
    return Lure.Date.Format(this, format, isBandMonthNames);
};

/* Micro LINQ */
/**
 *
 * @param delegate
 * @returns {Array}
 */
Array.prototype.Select = function (delegate) {
    var a = [];
    for (var i = 0; i < this.length; i++) {
        if (typeof delegate === 'string') a.push(this[i][delegate]);else a.push(delegate(this[i], i));
    }
    return a;
};
/**
 *
 * @param delegateKey
 * @param delegateValue
 * @returns {{}}
 */
Array.prototype.ToDictionary = function (delegateKey, delegateValue) {
    var dict = {};
    for (var i = 0; i < this.length; i++) {
        dict[delegateKey(this[i], i)] = delegateValue(this[i], i);
    }
    return dict;
};
/**
 *
 * @param delegate
 * @returns {Array}
 */
Array.prototype.Where = function (delegate) {
    var a = [];
    for (var i = 0; i < this.length; i++) {
        if (delegate(this[i], i)) a.push(this[i]);
    }
    return a;
};
/**
 *
 * @param Default
 * @returns {*}
 */
Array.prototype.FirstOrDefault = function (Default) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] !== null && typeof this[i] !== 'undefined') return this[i];
    }
    return typeof Default === 'undefined' ? null : Default;
};
Array.prototype.First = function () {
    return this[0];
};
Array.prototype.Last = function () {
    return this[this.length - 1];
};
Array.prototype.ToList = function () {
    var a = [];
    for (var i = 0; i < this.length; i++) {
        a.push(this[i]);
    }
    return a;
};
Array.prototype.Sort = function (delegate) {
    for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {}

    return this;
};

Array.prototype.GroupBy = function (key) {
    var xx = this.reduce(function (rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
    }, {});
    var g = [];
    for (var k in xx) {
        if (xx.hasOwnProperty(k)) {
            xx[k].Key = k;
            g.push(xx[k]);
        }
    }
    return g;
};

NodeList.prototype.Select = Array.prototype.Select;
NodeList.prototype.Where = Array.prototype.Where;
NodeList.prototype.ToDictionary = Array.prototype.ToDictionary;
NodeList.prototype.ToList = Array.prototype.ToList;

HTMLCollection.prototype.Select = Array.prototype.Select;
HTMLCollection.prototype.Where = Array.prototype.Where;
HTMLCollection.prototype.ToDictionary = Array.prototype.ToDictionary;
HTMLCollection.prototype.ToList = Array.prototype.ToList;

//### END UTILS

var Lure = {
    /**
     *
     * @returns {string}
     */
    get Version() {
        return '3.0.0';
    },
    Plugin: {},
    Controller: {},
    System: require('./modules/system/system.js'),
    Diagnostics: {
        /** @namespace window.performance */
        Perf: function () {
            _createClass(LurePerformance, [{
                key: 'Elapsed',

                /**
                 *
                 * @param Name
                 * @returns {*}
                 * @constructor
                 */
                value: function Elapsed() {
                    var Name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Perf';

                    if (!this.Enabled) return 0;
                    this.Stepped = window.performance.now(); //istantly save
                    var v = (this.Stepped - this.Started).toFixed(2);
                    console.info('[' + Name + ']: ' + v + 'ms');

                    return v;
                }

                /**
                 *
                 * @param Name
                 * @returns {number}
                 * @constructor
                 */

            }, {
                key: 'Perf',
                value: function Perf() {
                    var Name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Perf';
                    var isDraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                    var step = window.performance.now();
                    if (!this.Enabled) return 0;
                    var SpaceCount = 40 - Name.length;
                    var v = (step - this.Stepped).toFixed(4);
                    if (isDraw) console.info('%c[' + Name + ']:' + ' '.repeat(SpaceCount > 0 ? SpaceCount : 1) + ' ' + v + 'ms', 'color: #3583a7');

                    this.Stepped = window.performance.now();
                    return v;
                }

                /**
                 *
                 * @returns {number}
                 * @constructor
                 */

            }, {
                key: 'Reset',
                value: function Reset() {
                    this.Started = performance.now();
                    this.Stepped = this.Started;
                    return 0;
                }

                /**
                 *
                 * @param {boolean} Enabled
                 */

            }]);

            function LurePerformance() {
                var Enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                _classCallCheck(this, LurePerformance);

                this.Started = performance.now();
                this.Stepped = this.Started;
                this.Enabled = Enabled;
            }

            return LurePerformance;
        }()
    },

    Settings2: {
        _Locale: 'ru',
        /**
         *
         * @returns {string}
         * @constructor
         */
        get Locale() {
            return this._Locale;
        },
        set Locale(loc) {
            if (Lure.CultureInfo[loc]) {
                Lure.Culture = Lure.CultureInfo[loc];
                this._Locale = loc;
            } else {
                Lure.System.ShowError('[SetLocale] Error. Locale "' + loc + '" is unknown');
            }
        },

        Controller: {
            Common: {
                Undefined: 'undefined'
            },
            Templator: {
                Pagination: {
                    PageSize: -1,
                    DataLength: -1,
                    DataCount: -1,
                    PageGet: null,
                    isGetAllButton: true,
                    isGetAllCount: true,
                    isGetMoreButton: true,
                    isGetMoreCount: true,
                    isRefreshButton: true
                },
                isDataClone: false,
                isEmptyVisible: true
            }
        },

        Dialog: {
            Blur: 'l-blur',
            BlurTarget: '.body',
            Wrapper: 'l-dialog-wrapper'
        },

        Confirm: {
            Wrapper: 'l-dialog-wrapper-transparent'
        },

        Common: {
            CSSButtonBusy: 'l-busy'
        }
    },
    ContentList: {
        _Root: [],
        _Typed: []
    },

    Core: {
        HtmlParser: require('./Core/Compiler/HtmlParser.js'),
        Compiler: require('./Core/Compiler/Compiler.js')
    },
    /* MegaModules */
    Content: require('./modules/Content/Content.js'),

    /////
    App: require('./Core/Application/Application.js'),
    Settings: require('./settings/settings.js'),
    CultureInfo: require('./settings/culture/culture-info.js'),

    /* Library */
    Object: require('./library/object/object.js'),
    Array: require('./library/array/array.js'),
    DOM: require('./library/DOM/DOM.js'),
    String: require('./library/string/string.js'),
    Input: require('./library/input/input.js'),
    Button: require('./library/button/button.js'),
    Cookie: require('./library/cookie.js'),

    Select: require('./library/DOM/select.js'),
    SelectAll: require('./library/DOM/select-all.js'),

    isNumeric: require('./library/isNumeric.js'),
    Call: require('./library/call.js'),
    AsyncToggle: require('./library/async-toggle.js'),
    GetDurationAnimation: require('./library/GetDurationAnimation.js'),
    DocumentSelectionClear: require('./library/DocumentSelectionClear.js'),
    GetTextWidth: require('./library/GetTextWidth.js'),
    GetInlineSize: require('./library/GetInlineSize.js'),
    GetID: require('./library/GetID.js'),
    GetLastID: require('./library/GetLastID.js'),
    ErrorHint: require('./library/ErrorHint.js'),
    RoundBy: require('./library/RoundBy.js'),
    GetNumberOrder: require('./library/GetNumberOrder.js'),
    GetRandom: require('./library/GetRandom.js'),

    /* Modules */

    Confirm: require('./modules/Confirm.js'),
    Load: require('./modules/Loading/Loading.js'),
    Date: require('./modules/Date/Date.js'),
    Draggable: require('./modules/Draggable/Draggable.js'),
    PropTypes: require('./modules/PropTypes/PropTypes.js'),

    Listener: require('./modules/Listener/Listener.js')
};

/* Shortcuts */

//Lure.Object:
Lure.Clone = Lure.Object.Clone;
Lure.GetProperty = Lure.Object.GetProperty;
Lure.SetProperty = Lure.Object.SetProperty;
Lure.CheckDirty = Lure.Object.Compare;

//Lure.DOM:
Lure.Select = Lure.DOM.Select;
Lure.SelectAll = Lure.DOM.SelectAll;
Lure.CreateElementFromString = Lure.DOM.CreateElementFromString;
Lure.CreateElementsFromString = Lure.DOM.CreateElementsFromString;
Lure.CloneNode = Lure.DOM.CloneNode;
Lure.AddEventListenerGlobal = Lure.DOM.AddEventListenerGlobal;
Lure.isVisible = Lure.DOM.isVisible;
Lure.PrintElement = Lure.DOM.Print;

//Lure.Culture:
Lure.Culture = Lure.CultureInfo[Lure.Settings.Locale];

//Lure.PropTypes:
Lure.GetType = Lure.PropTypes.GetType;

//Lure.App
Lure.Application = Lure.App;

//User default:
Lure.User = {
    ID: -1,
    Roles: [], // ex.: Roles: [2,5,7]
    SubRoles: {}, // ex.: SubRoles: {4:[-1], 8:[123,212,314]}
    Cache: {}
};

// Get browser's scroll bar width:
document.addEventListener('DOMContentLoaded', function () {
    Lure.DOM.ScrollBarWidth = function () {
        var outer = document.createElement("div");
        outer.style.visibility = "hidden";
        outer.style.width = "100px";
        document.body.appendChild(outer);
        var widthNoScroll = outer.offsetWidth;
        // force scrollbars
        outer.style.overflow = "scroll";
        // add innerdiv
        var inner = document.createElement("div");
        inner.style.width = "100%";
        outer.appendChild(inner);
        var widthWithScroll = inner.offsetWidth;
        // remove divs
        outer.parentNode.removeChild(outer);
        return widthNoScroll - widthWithScroll;
    }();
});

console.log('[Lure] Ready for: ' + Math.round((performance.now() - t) * 1000) / 1000 + 'ms');
window.Lure = Lure;

//=require corelib/lib.js
//=require core/culture.js
//=require core/proptypes.js


//=require compiler/compiler.js

//=require controllers/controller.js

//=require content/content.js


//=require library/date.js
//=require library/draggable.js
//=require library/periodpicker.js
//=require library/popuplog.js
//=require library/load.js

//=require core/application.js
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./Core/Application/Application.js":1,"./Core/Compiler/Compiler.js":2,"./Core/Compiler/HtmlParser.js":4,"./library/DOM/DOM.js":13,"./library/DOM/select-all.js":15,"./library/DOM/select.js":16,"./library/DocumentSelectionClear.js":17,"./library/ErrorHint.js":18,"./library/GetDurationAnimation.js":19,"./library/GetID.js":20,"./library/GetInlineSize.js":21,"./library/GetLastID.js":22,"./library/GetNumberOrder.js":23,"./library/GetRandom.js":24,"./library/GetTextWidth.js":25,"./library/RoundBy.js":26,"./library/array/array.js":27,"./library/async-toggle.js":28,"./library/button/button.js":29,"./library/call.js":30,"./library/cookie.js":31,"./library/input/input.js":32,"./library/isNumeric.js":33,"./library/object/object.js":37,"./library/string/string.js":38,"./modules/Confirm.js":39,"./modules/Content/Content.js":40,"./modules/Date/Date.js":42,"./modules/Draggable/Draggable.js":43,"./modules/Listener/Listener.js":44,"./modules/Loading/Loading.js":45,"./modules/PropTypes/PropTypes.js":46,"./modules/system/system.js":48,"./settings/culture/culture-info.js":50,"./settings/settings.js":51}],9:[function(require,module,exports){
'use strict';

function EventClone(e) {
    function ClonedEvent() {}
    var clone = new ClonedEvent();
    for (var p in e) {
        var d = Object.getOwnPropertyDescriptor(e, p);
        if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {
            Object.defineProperty(clone, p, d);
        } else {
            clone[p] = e[p];
        }
    }
    Object.setPrototypeOf(clone, e);
    return clone;
}
var AddEventListenerGlobal = function AddEventListenerGlobal(eventName, selector, handler) {
    var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;
    var thisArg = arguments[4];

    parent.addEventListener(eventName, function (e) {
        var target = e.target;
        var isIt = false;
        var event = EventClone(e);
        var elems = parent.querySelectorAll(selector);
        if (elems[0] === target) {
            event.currentTarget = target;
            isIt = true;
        }
        if (!isIt) {
            for (var i = 0; i < elems.length; i++) {
                if (elems[i].contains(target)) {
                    isIt = true;
                    event.currentTarget = target.closest(selector);
                    break;
                }
            }
        }
        if (event.target.classList.contains('l-edit-editor') && eventName === 'click') {
            e.stopPropagation();
            //console.log('stopPropagation', event.target);
            return;
        }
        if (isIt) {
            var p = {};
            var ID = event.currentTarget.dataset['id'];
            var LineID = event.currentTarget.dataset['line'];
            if (ID) {
                p.ID = parseInt(ID);
            }

            if (LineID) {
                p.LineID = parseInt(LineID);
            } else {
                var TemplatorLine = event.currentTarget.closest('.l-t-line');
                if (TemplatorLine) {
                    p.LineID = TemplatorLine.dataset['line'];
                }
            }

            handler.call(thisArg ? thisArg : event.currentTarget, event, p);
        }
    });
};

module.exports = AddEventListenerGlobal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFkZEV2ZW50TGlzdGVuZXJHbG9iYWwuanMiXSwibmFtZXMiOlsiRXZlbnRDbG9uZSIsImUiLCJDbG9uZWRFdmVudCIsImNsb25lIiwicCIsImQiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJkZWZpbmVQcm9wZXJ0eSIsInNldFByb3RvdHlwZU9mIiwiQWRkRXZlbnRMaXN0ZW5lckdsb2JhbCIsImV2ZW50TmFtZSIsInNlbGVjdG9yIiwiaGFuZGxlciIsInBhcmVudCIsImRvY3VtZW50IiwidGhpc0FyZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0YXJnZXQiLCJpc0l0IiwiZXZlbnQiLCJlbGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjdXJyZW50VGFyZ2V0IiwiaSIsImxlbmd0aCIsImNvbnRhaW5zIiwiY2xvc2VzdCIsImNsYXNzTGlzdCIsInN0b3BQcm9wYWdhdGlvbiIsIklEIiwiZGF0YXNldCIsIkxpbmVJRCIsInBhcnNlSW50IiwiVGVtcGxhdG9yTGluZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXVCO0FBQ25CLGFBQVNDLFdBQVQsR0FBdUIsQ0FBRTtBQUN6QixRQUFJQyxRQUFRLElBQUlELFdBQUosRUFBWjtBQUNBLFNBQUssSUFBSUUsQ0FBVCxJQUFjSCxDQUFkLEVBQWlCO0FBQ2IsWUFBSUksSUFBSUMsT0FBT0Msd0JBQVAsQ0FBZ0NOLENBQWhDLEVBQW1DRyxDQUFuQyxDQUFSO0FBQ0EsWUFBSUMsTUFBTSxDQUFDQSxFQUFFRyxRQUFILElBQWUsQ0FBQ0gsRUFBRUksWUFBbEIsSUFBa0MsQ0FBQ0osRUFBRUssVUFBckMsSUFBbURMLEVBQUVNLEdBQXJELElBQTRETixFQUFFTyxHQUFwRSxDQUFKLEVBQThFO0FBQzFFTixtQkFBT08sY0FBUCxDQUFzQlYsS0FBdEIsRUFBNkJDLENBQTdCLEVBQWdDQyxDQUFoQztBQUNILFNBRkQsTUFHSztBQUNERixrQkFBTUMsQ0FBTixJQUFXSCxFQUFFRyxDQUFGLENBQVg7QUFDSDtBQUNKO0FBQ0RFLFdBQU9RLGNBQVAsQ0FBc0JYLEtBQXRCLEVBQTZCRixDQUE3QjtBQUNBLFdBQU9FLEtBQVA7QUFDSDtBQUNELElBQUlZLHlCQUF5QixTQUF6QkEsc0JBQXlCLENBQVNDLFNBQVQsRUFBb0JDLFFBQXBCLEVBQThCQyxPQUE5QixFQUFrRTtBQUFBLFFBQTNCQyxNQUEyQix1RUFBbEJDLFFBQWtCO0FBQUEsUUFBUkMsT0FBUTs7QUFDM0ZGLFdBQU9HLGdCQUFQLENBQXdCTixTQUF4QixFQUFtQyxVQUFTZixDQUFULEVBQVk7QUFDM0MsWUFBSXNCLFNBQVN0QixFQUFFc0IsTUFBZjtBQUNBLFlBQUlDLE9BQU8sS0FBWDtBQUNBLFlBQUlDLFFBQVF6QixXQUFXQyxDQUFYLENBQVo7QUFDQSxZQUFJeUIsUUFBUVAsT0FBT1EsZ0JBQVAsQ0FBd0JWLFFBQXhCLENBQVo7QUFDQSxZQUFJUyxNQUFNLENBQU4sTUFBYUgsTUFBakIsRUFDQTtBQUNJRSxrQkFBTUcsYUFBTixHQUFzQkwsTUFBdEI7QUFDQUMsbUJBQU8sSUFBUDtBQUNIO0FBQ0QsWUFBSSxDQUFDQSxJQUFMLEVBQVU7QUFDTixpQkFBSyxJQUFJSyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILE1BQU1JLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUFzQztBQUNsQyxvQkFBSUgsTUFBTUcsQ0FBTixFQUFTRSxRQUFULENBQWtCUixNQUFsQixDQUFKLEVBQThCO0FBQzFCQywyQkFBTyxJQUFQO0FBQ0FDLDBCQUFNRyxhQUFOLEdBQXNCTCxPQUFPUyxPQUFQLENBQWVmLFFBQWYsQ0FBdEI7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNELFlBQUlRLE1BQU1GLE1BQU4sQ0FBYVUsU0FBYixDQUF1QkYsUUFBdkIsQ0FBZ0MsZUFBaEMsS0FBcURmLGNBQWMsT0FBdkUsRUFBZ0Y7QUFDNUVmLGNBQUVpQyxlQUFGO0FBQ0E7QUFDQTtBQUNIO0FBQ0QsWUFBSVYsSUFBSixFQUFTO0FBQ0wsZ0JBQUlwQixJQUFJLEVBQVI7QUFDQSxnQkFBSStCLEtBQUtWLE1BQU1HLGFBQU4sQ0FBb0JRLE9BQXBCLENBQTRCLElBQTVCLENBQVQ7QUFDQSxnQkFBSUMsU0FBU1osTUFBTUcsYUFBTixDQUFvQlEsT0FBcEIsQ0FBNEIsTUFBNUIsQ0FBYjtBQUNBLGdCQUFJRCxFQUFKLEVBQU87QUFDSC9CLGtCQUFFK0IsRUFBRixHQUFPRyxTQUFTSCxFQUFULENBQVA7QUFDSDs7QUFFRCxnQkFBSUUsTUFBSixFQUFXO0FBQ1BqQyxrQkFBRWlDLE1BQUYsR0FBV0MsU0FBU0QsTUFBVCxDQUFYO0FBQ0gsYUFGRCxNQUdLO0FBQ0Qsb0JBQUlFLGdCQUFnQmQsTUFBTUcsYUFBTixDQUFvQkksT0FBcEIsQ0FBNEIsV0FBNUIsQ0FBcEI7QUFDQSxvQkFBSU8sYUFBSixFQUFrQjtBQUNkbkMsc0JBQUVpQyxNQUFGLEdBQVdFLGNBQWNILE9BQWQsQ0FBc0IsTUFBdEIsQ0FBWDtBQUNIO0FBQ0o7O0FBRURsQixvQkFBUXNCLElBQVIsQ0FBYW5CLFVBQVNBLE9BQVQsR0FBbUJJLE1BQU1HLGFBQXRDLEVBQXFESCxLQUFyRCxFQUE0RHJCLENBQTVEO0FBQ0g7QUFFSixLQTdDRDtBQThDSCxDQS9DRDs7QUFtREFxQyxPQUFPQyxPQUFQLEdBQWlCM0Isc0JBQWpCIiwiZmlsZSI6IkFkZEV2ZW50TGlzdGVuZXJHbG9iYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBFdmVudENsb25lKGUpIHtcclxuICAgIGZ1bmN0aW9uIENsb25lZEV2ZW50KCkge31cclxuICAgIGxldCBjbG9uZSA9IG5ldyBDbG9uZWRFdmVudCgpO1xyXG4gICAgZm9yIChsZXQgcCBpbiBlKSB7XHJcbiAgICAgICAgbGV0IGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHApO1xyXG4gICAgICAgIGlmIChkICYmICghZC53cml0YWJsZSB8fCAhZC5jb25maWd1cmFibGUgfHwgIWQuZW51bWVyYWJsZSB8fCBkLmdldCB8fCBkLnNldCkpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lLCBwLCBkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNsb25lW3BdID0gZVtwXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2xvbmUsIGUpO1xyXG4gICAgcmV0dXJuIGNsb25lO1xyXG59XHJcbmxldCBBZGRFdmVudExpc3RlbmVyR2xvYmFsID0gZnVuY3Rpb24oZXZlbnROYW1lLCBzZWxlY3RvciwgaGFuZGxlciwgcGFyZW50ID0gZG9jdW1lbnQsIHRoaXNBcmcpe1xyXG4gICAgcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGxldCBpc0l0ID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGV2ZW50ID0gRXZlbnRDbG9uZShlKTtcclxuICAgICAgICBsZXQgZWxlbXMgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKGVsZW1zWzBdID09PSB0YXJnZXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICBpc0l0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc0l0KXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbXNbaV0uY29udGFpbnModGFyZ2V0KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNJdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IHRhcmdldC5jbG9zZXN0KHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbC1lZGl0LWVkaXRvcicpICAmJiBldmVudE5hbWUgPT09ICdjbGljaycpIHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnc3RvcFByb3BhZ2F0aW9uJywgZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNJdCl7XHJcbiAgICAgICAgICAgIGxldCBwID0ge307XHJcbiAgICAgICAgICAgIGxldCBJRCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldFsnaWQnXTtcclxuICAgICAgICAgICAgbGV0IExpbmVJRCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldFsnbGluZSddO1xyXG4gICAgICAgICAgICBpZiAoSUQpe1xyXG4gICAgICAgICAgICAgICAgcC5JRCA9IHBhcnNlSW50KElEKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKExpbmVJRCl7XHJcbiAgICAgICAgICAgICAgICBwLkxpbmVJRCA9IHBhcnNlSW50KExpbmVJRCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgVGVtcGxhdG9yTGluZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmwtdC1saW5lJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoVGVtcGxhdG9yTGluZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5MaW5lSUQgPSBUZW1wbGF0b3JMaW5lLmRhdGFzZXRbJ2xpbmUnXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXNBcmc/IHRoaXNBcmcgOiBldmVudC5jdXJyZW50VGFyZ2V0LCBldmVudCwgcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59O1xyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFkZEV2ZW50TGlzdGVuZXJHbG9iYWw7Il19
},{}],10:[function(require,module,exports){
"use strict";

var CloneNode = function CloneNode(node) {
    var clone = node.cloneNode();
    if (node.childNodes.length > 0) {
        for (var i = 0; i < node.childNodes.length; i++) {
            clone.appendChild(Lure.CloneNode(node.childNodes[i]));
        }
    }
    return clone;
};

module.exports = CloneNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNsb25lTm9kZS5qcyJdLCJuYW1lcyI6WyJDbG9uZU5vZGUiLCJub2RlIiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJjaGlsZE5vZGVzIiwibGVuZ3RoIiwiaSIsImFwcGVuZENoaWxkIiwiTHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWSxTQUFaQSxTQUFZLENBQVNDLElBQVQsRUFBYztBQUMxQixRQUFJQyxRQUFRRCxLQUFLRSxTQUFMLEVBQVo7QUFDQSxRQUFJRixLQUFLRyxVQUFMLENBQWdCQyxNQUFoQixHQUF1QixDQUEzQixFQUE2QjtBQUN6QixhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUwsS0FBS0csVUFBTCxDQUFnQkMsTUFBcEMsRUFBNENDLEdBQTVDLEVBQWdEO0FBQzVDSixrQkFBTUssV0FBTixDQUFrQkMsS0FBS1IsU0FBTCxDQUFlQyxLQUFLRyxVQUFMLENBQWdCRSxDQUFoQixDQUFmLENBQWxCO0FBQ0g7QUFDSjtBQUNELFdBQU9KLEtBQVA7QUFDSCxDQVJEOztBQVVBTyxPQUFPQyxPQUFQLEdBQWlCVixTQUFqQiIsImZpbGUiOiJDbG9uZU5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQ2xvbmVOb2RlID0gZnVuY3Rpb24obm9kZSl7XHJcbiAgICBsZXQgY2xvbmUgPSBub2RlLmNsb25lTm9kZSgpO1xyXG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg+MCl7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChMdXJlLkNsb25lTm9kZShub2RlLmNoaWxkTm9kZXNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xvbmU7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENsb25lTm9kZTsiXX0=
},{}],11:[function(require,module,exports){
"use strict";

module.exports = function (string) {
    var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "div";

    var frag = document.createDocumentFragment();
    var elem = document.createElement(ownerTagName);
    elem.innerHTML = string;
    while (elem.childNodes[0]) {
        frag.appendChild(elem.childNodes[0]);
    }
    return frag.childNodes.Where(function (x) {
        return x.nodeName.indexOf('text') < 0;
    }).First();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNyZWF0ZUVsZW1lbnRGcm9tU3RyaW5nLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpbmciLCJvd25lclRhZ05hbWUiLCJmcmFnIiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZWxlbSIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJjaGlsZE5vZGVzIiwiYXBwZW5kQ2hpbGQiLCJXaGVyZSIsIngiLCJub2RlTmFtZSIsImluZGV4T2YiLCJGaXJzdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxNQUFULEVBQXNDO0FBQUEsUUFBckJDLFlBQXFCLHVFQUFOLEtBQU07O0FBQ25ELFFBQUlDLE9BQU9DLFNBQVNDLHNCQUFULEVBQVg7QUFDQSxRQUFJQyxPQUFPRixTQUFTRyxhQUFULENBQXVCTCxZQUF2QixDQUFYO0FBQ0FJLFNBQUtFLFNBQUwsR0FBaUJQLE1BQWpCO0FBQ0EsV0FBT0ssS0FBS0csVUFBTCxDQUFnQixDQUFoQixDQUFQLEVBQTJCO0FBQ3ZCTixhQUFLTyxXQUFMLENBQWlCSixLQUFLRyxVQUFMLENBQWdCLENBQWhCLENBQWpCO0FBQ0g7QUFDRCxXQUFPTixLQUFLTSxVQUFMLENBQWdCRSxLQUFoQixDQUFzQjtBQUFBLGVBQUdDLEVBQUVDLFFBQUYsQ0FBV0MsT0FBWCxDQUFtQixNQUFuQixJQUE2QixDQUFoQztBQUFBLEtBQXRCLEVBQXlEQyxLQUF6RCxFQUFQO0FBQ0gsQ0FSRCIsImZpbGUiOiJDcmVhdGVFbGVtZW50RnJvbVN0cmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyaW5nLCBvd25lclRhZ05hbWUgPSBcImRpdlwiKXtcclxuICAgIGxldCBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgbGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG93bmVyVGFnTmFtZSk7XHJcbiAgICBlbGVtLmlubmVySFRNTCA9IHN0cmluZztcclxuICAgIHdoaWxlIChlbGVtLmNoaWxkTm9kZXNbMF0pIHtcclxuICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGVsZW0uY2hpbGROb2Rlc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnJhZy5jaGlsZE5vZGVzLldoZXJlKHg9Pngubm9kZU5hbWUuaW5kZXhPZigndGV4dCcpIDwgMCkuRmlyc3QoKTtcclxufSJdfQ==
},{}],12:[function(require,module,exports){
"use strict";

module.exports = function (string) {
    var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "div";

    var frag = document.createDocumentFragment();
    var elem = document.createElement(ownerTagName);
    elem.innerHTML = string;
    while (elem.childNodes[0]) {
        frag.appendChild(elem.childNodes[0]);
    }
    if (frag.childNodes.length > 0) {
        var nodes = [];
        for (var i = 0; i < frag.childNodes.length; i++) {
            nodes.push(frag.childNodes[i]);
        }return nodes.Where(function (x) {
            return x.nodeName.indexOf('text') < 0;
        });
    }
    return null;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNyZWF0ZUVsZW1lbnRzRnJvbVN0cmluZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3RyaW5nIiwib3duZXJUYWdOYW1lIiwiZnJhZyIsImRvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImVsZW0iLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiY2hpbGROb2RlcyIsImFwcGVuZENoaWxkIiwibGVuZ3RoIiwibm9kZXMiLCJpIiwicHVzaCIsIldoZXJlIiwieCIsIm5vZGVOYW1lIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxNQUFULEVBQXNDO0FBQUEsUUFBckJDLFlBQXFCLHVFQUFOLEtBQU07O0FBQ25ELFFBQUlDLE9BQU9DLFNBQVNDLHNCQUFULEVBQVg7QUFDQSxRQUFJQyxPQUFPRixTQUFTRyxhQUFULENBQXVCTCxZQUF2QixDQUFYO0FBQ0FJLFNBQUtFLFNBQUwsR0FBaUJQLE1BQWpCO0FBQ0EsV0FBT0ssS0FBS0csVUFBTCxDQUFnQixDQUFoQixDQUFQLEVBQTJCO0FBQ3ZCTixhQUFLTyxXQUFMLENBQWlCSixLQUFLRyxVQUFMLENBQWdCLENBQWhCLENBQWpCO0FBQ0g7QUFDRCxRQUFJTixLQUFLTSxVQUFMLENBQWdCRSxNQUFoQixHQUF5QixDQUE3QixFQUNBO0FBQ0ksWUFBSUMsUUFBUSxFQUFaO0FBQ0EsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlWLEtBQUtNLFVBQUwsQ0FBZ0JFLE1BQXBDLEVBQTRDRSxHQUE1QztBQUNJRCxrQkFBTUUsSUFBTixDQUFXWCxLQUFLTSxVQUFMLENBQWdCSSxDQUFoQixDQUFYO0FBREosU0FFQSxPQUFPRCxNQUFNRyxLQUFOLENBQVk7QUFBQSxtQkFBR0MsRUFBRUMsUUFBRixDQUFXQyxPQUFYLENBQW1CLE1BQW5CLElBQTZCLENBQWhDO0FBQUEsU0FBWixDQUFQO0FBQ0g7QUFDRCxXQUFPLElBQVA7QUFDSCxDQWZEIiwiZmlsZSI6IkNyZWF0ZUVsZW1lbnRzRnJvbVN0cmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyaW5nLCBvd25lclRhZ05hbWUgPSBcImRpdlwiKXtcclxuICAgIGxldCBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgbGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG93bmVyVGFnTmFtZSk7XHJcbiAgICBlbGVtLmlubmVySFRNTCA9IHN0cmluZztcclxuICAgIHdoaWxlIChlbGVtLmNoaWxkTm9kZXNbMF0pIHtcclxuICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGVsZW0uY2hpbGROb2Rlc1swXSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZnJhZy5jaGlsZE5vZGVzLmxlbmd0aCA+IDApXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG5vZGVzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFnLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIG5vZGVzLnB1c2goZnJhZy5jaGlsZE5vZGVzW2ldKTtcclxuICAgICAgICByZXR1cm4gbm9kZXMuV2hlcmUoeD0+eC5ub2RlTmFtZS5pbmRleE9mKCd0ZXh0JykgPCAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59OyJdfQ==
},{}],13:[function(require,module,exports){
'use strict';

module.exports = {
    ShowWithAnimation: function ShowWithAnimation(HTMLElement, CSSAnimation) {
        var Duration = Lure.GetDurationAnimation(CSSAnimation, HTMLElement);
        HTMLElement.style.display = '';
        HTMLElement.classList.add(CSSAnimation);
        setTimeout(function () {
            HTMLElement.classList.remove(CSSAnimation);
        }, Duration);
    },
    HideWithAnimation: function HideWithAnimation(HTMLElement, CSSAnimation) {
        var Duration = Lure.GetDurationAnimation(CSSAnimation, HTMLElement);
        HTMLElement.classList.add(CSSAnimation);
        setTimeout(function () {
            HTMLElement.style.display = 'none';
            HTMLElement.classList.remove(CSSAnimation);
        }, Duration);
    },
    GetLineID: function GetLineID(HTMLElement) {
        return parseInt(HTMLElement.dataset['line']);
    },

    Print: function Print(HTMLElement) {
        var CSSPrint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var mywindow = window.open('', 'PRINT'); //, 'height=800,width=1000');
        var styles = '';
        for (var i = 0; i < document.styleSheets.length; i++) {
            if (document.styleSheets[i].href) {
                var rules = void 0;
                if (document.styleSheets[i].rules) {
                    rules = document.styleSheets[i].rules; //chrome
                } else if (document.styleSheets[i].cssRules) {
                    rules = document.styleSheets[i].cssRules; //firefox
                }
                if (!rules) {
                    continue;
                }
                for (var j = 0; j < rules.length; j++) {
                    if (rules[j].cssText.indexOf("@") < 0) //skip other @media, @key-frames
                        styles += rules[j].cssText;
                }
            }
        }
        styles = '@media print{\n                        ' + styles + '\n                        .button-print{display:none!important}\n                        ' + CSSPrint + '\n                    }\n                    @media screen{\n                        ' + styles + '\n                        .button-print{display:none!important}\n                        ' + CSSPrint + '\n                    }';
        //console.log('styles', styles);
        mywindow.document.write('<html><head><title>' + document.title + '</title>');

        mywindow.document.write('<style>' + styles + '</style>');
        mywindow.document.write('</head><body>');
        mywindow.document.write(HTMLElement.innerHTML);
        mywindow.document.write('</body></html>');

        mywindow.document.close(); // necessary for IE >= 10
        mywindow.focus(); // necessary for IE >= 10*/

        mywindow.print();
        mywindow.close();
    },
    CreateElementFromString: require('./CreateElementFromString.js'),
    CreateElementsFromString: require('./CreateElementsFromString.js'),
    Select: require('./select.js'),
    SelectAll: require('./select-all.js'),

    CloneNode: require('./CloneNode.js'),
    AddEventListenerGlobal: require('./AddEventListenerGlobal.js'),
    isVisible: require('./isVisible.js')
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRPTS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiU2hvd1dpdGhBbmltYXRpb24iLCJIVE1MRWxlbWVudCIsIkNTU0FuaW1hdGlvbiIsIkR1cmF0aW9uIiwiTHVyZSIsIkdldER1cmF0aW9uQW5pbWF0aW9uIiwic3R5bGUiLCJkaXNwbGF5IiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0VGltZW91dCIsInJlbW92ZSIsIkhpZGVXaXRoQW5pbWF0aW9uIiwiR2V0TGluZUlEIiwicGFyc2VJbnQiLCJkYXRhc2V0IiwiUHJpbnQiLCJDU1NQcmludCIsIm15d2luZG93Iiwid2luZG93Iiwib3BlbiIsInN0eWxlcyIsImkiLCJkb2N1bWVudCIsInN0eWxlU2hlZXRzIiwibGVuZ3RoIiwiaHJlZiIsInJ1bGVzIiwiY3NzUnVsZXMiLCJqIiwiY3NzVGV4dCIsImluZGV4T2YiLCJ3cml0ZSIsInRpdGxlIiwiaW5uZXJIVE1MIiwiY2xvc2UiLCJmb2N1cyIsInByaW50IiwiQ3JlYXRlRWxlbWVudEZyb21TdHJpbmciLCJyZXF1aXJlIiwiQ3JlYXRlRWxlbWVudHNGcm9tU3RyaW5nIiwiU2VsZWN0IiwiU2VsZWN0QWxsIiwiQ2xvbmVOb2RlIiwiQWRkRXZlbnRMaXN0ZW5lckdsb2JhbCIsImlzVmlzaWJsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyx1QkFBbUIsMkJBQVVDLFdBQVYsRUFBdUJDLFlBQXZCLEVBQXFDO0FBQ3BELFlBQUlDLFdBQVdDLEtBQUtDLG9CQUFMLENBQTBCSCxZQUExQixFQUF3Q0QsV0FBeEMsQ0FBZjtBQUNBQSxvQkFBWUssS0FBWixDQUFrQkMsT0FBbEIsR0FBNEIsRUFBNUI7QUFDQU4sb0JBQVlPLFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCUCxZQUExQjtBQUNBUSxtQkFBVyxZQUFZO0FBQ25CVCx3QkFBWU8sU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkJULFlBQTdCO0FBQ0gsU0FGRCxFQUVHQyxRQUZIO0FBR0gsS0FSWTtBQVNiUyx1QkFBbUIsMkJBQVVYLFdBQVYsRUFBdUJDLFlBQXZCLEVBQXFDO0FBQ3BELFlBQUlDLFdBQVdDLEtBQUtDLG9CQUFMLENBQTBCSCxZQUExQixFQUF3Q0QsV0FBeEMsQ0FBZjtBQUNBQSxvQkFBWU8sU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEJQLFlBQTFCO0FBQ0FRLG1CQUFXLFlBQVk7QUFDbkJULHdCQUFZSyxLQUFaLENBQWtCQyxPQUFsQixHQUE0QixNQUE1QjtBQUNBTix3QkFBWU8sU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkJULFlBQTdCO0FBQ0gsU0FIRCxFQUdHQyxRQUhIO0FBSUgsS0FoQlk7QUFpQmJVLGVBQVcsbUJBQVVaLFdBQVYsRUFBdUI7QUFDOUIsZUFBT2EsU0FBU2IsWUFBWWMsT0FBWixDQUFvQixNQUFwQixDQUFULENBQVA7QUFDSCxLQW5CWTs7QUFzQmJDLFdBQU8sZUFBVWYsV0FBVixFQUFvQztBQUFBLFlBQWJnQixRQUFhLHVFQUFKLEVBQUk7O0FBQ3ZDLFlBQUlDLFdBQVdDLE9BQU9DLElBQVAsQ0FBWSxFQUFaLEVBQWdCLE9BQWhCLENBQWYsQ0FEdUMsQ0FDQztBQUN4QyxZQUFJQyxTQUFTLEVBQWI7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUMsU0FBU0MsV0FBVCxDQUFxQkMsTUFBekMsRUFBaURILEdBQWpELEVBQXFEO0FBQ2pELGdCQUFHQyxTQUFTQyxXQUFULENBQXFCRixDQUFyQixFQUF3QkksSUFBM0IsRUFBZ0M7QUFDNUIsb0JBQUlDLGNBQUo7QUFDQSxvQkFBSUosU0FBU0MsV0FBVCxDQUFxQkYsQ0FBckIsRUFBd0JLLEtBQTVCLEVBQWtDO0FBQzlCQSw0QkFBUUosU0FBU0MsV0FBVCxDQUFxQkYsQ0FBckIsRUFBd0JLLEtBQWhDLENBRDhCLENBQ1M7QUFDMUMsaUJBRkQsTUFHSyxJQUFJSixTQUFTQyxXQUFULENBQXFCRixDQUFyQixFQUF3Qk0sUUFBNUIsRUFBcUM7QUFDdENELDRCQUFRSixTQUFTQyxXQUFULENBQXFCRixDQUFyQixFQUF3Qk0sUUFBaEMsQ0FEc0MsQ0FDSTtBQUM3QztBQUNELG9CQUFJLENBQUNELEtBQUwsRUFBVztBQUNQO0FBQ0g7QUFDRCxxQkFBSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLE1BQU1GLE1BQTFCLEVBQWtDSSxHQUFsQyxFQUFzQztBQUNsQyx3QkFBSUYsTUFBTUUsQ0FBTixFQUFTQyxPQUFULENBQWlCQyxPQUFqQixDQUF5QixHQUF6QixJQUFnQyxDQUFwQyxFQUF1QztBQUNuQ1Ysa0NBQVVNLE1BQU1FLENBQU4sRUFBU0MsT0FBbkI7QUFDUDtBQUNKO0FBQ0o7QUFDRFQsNkRBQ2tCQSxNQURsQixpR0FHa0JKLFFBSGxCLDZGQU1rQkksTUFObEIsaUdBUWtCSixRQVJsQjtBQVVBO0FBQ0FDLGlCQUFTSyxRQUFULENBQWtCUyxLQUFsQixDQUF3Qix3QkFBd0JULFNBQVNVLEtBQWpDLEdBQTBDLFVBQWxFOztBQUVBZixpQkFBU0ssUUFBVCxDQUFrQlMsS0FBbEIsYUFBa0NYLE1BQWxDO0FBQ0FILGlCQUFTSyxRQUFULENBQWtCUyxLQUFsQixDQUF3QixlQUF4QjtBQUNBZCxpQkFBU0ssUUFBVCxDQUFrQlMsS0FBbEIsQ0FBd0IvQixZQUFZaUMsU0FBcEM7QUFDQWhCLGlCQUFTSyxRQUFULENBQWtCUyxLQUFsQixDQUF3QixnQkFBeEI7O0FBRUFkLGlCQUFTSyxRQUFULENBQWtCWSxLQUFsQixHQXZDdUMsQ0F1Q1o7QUFDM0JqQixpQkFBU2tCLEtBQVQsR0F4Q3VDLENBd0NyQjs7QUFFbEJsQixpQkFBU21CLEtBQVQ7QUFDQW5CLGlCQUFTaUIsS0FBVDtBQUNILEtBbEVZO0FBbUViRyw2QkFBeUJDLFFBQVEsOEJBQVIsQ0FuRVo7QUFvRWJDLDhCQUEwQkQsUUFBUSwrQkFBUixDQXBFYjtBQXFFYkUsWUFBUUYsUUFBUSxhQUFSLENBckVLO0FBc0ViRyxlQUFXSCxRQUFRLGlCQUFSLENBdEVFOztBQXdFYkksZUFBV0osUUFBUSxnQkFBUixDQXhFRTtBQXlFYkssNEJBQXdCTCxRQUFRLDZCQUFSLENBekVYO0FBMEViTSxlQUFXTixRQUFRLGdCQUFSO0FBMUVFLENBQWpCIiwiZmlsZSI6IkRPTS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgU2hvd1dpdGhBbmltYXRpb246IGZ1bmN0aW9uIChIVE1MRWxlbWVudCwgQ1NTQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgbGV0IER1cmF0aW9uID0gTHVyZS5HZXREdXJhdGlvbkFuaW1hdGlvbihDU1NBbmltYXRpb24sIEhUTUxFbGVtZW50KTtcclxuICAgICAgICBIVE1MRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgSFRNTEVsZW1lbnQuY2xhc3NMaXN0LmFkZChDU1NBbmltYXRpb24pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBIVE1MRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENTU0FuaW1hdGlvbik7XHJcbiAgICAgICAgfSwgRHVyYXRpb24pXHJcbiAgICB9LFxyXG4gICAgSGlkZVdpdGhBbmltYXRpb246IGZ1bmN0aW9uIChIVE1MRWxlbWVudCwgQ1NTQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgbGV0IER1cmF0aW9uID0gTHVyZS5HZXREdXJhdGlvbkFuaW1hdGlvbihDU1NBbmltYXRpb24sIEhUTUxFbGVtZW50KTtcclxuICAgICAgICBIVE1MRWxlbWVudC5jbGFzc0xpc3QuYWRkKENTU0FuaW1hdGlvbik7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIEhUTUxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIEhUTUxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ1NTQW5pbWF0aW9uKTtcclxuICAgICAgICB9LCBEdXJhdGlvbilcclxuICAgIH0sXHJcbiAgICBHZXRMaW5lSUQ6IGZ1bmN0aW9uIChIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUludChIVE1MRWxlbWVudC5kYXRhc2V0WydsaW5lJ10pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgUHJpbnQ6IGZ1bmN0aW9uIChIVE1MRWxlbWVudCwgQ1NTUHJpbnQ9XCJcIikge1xyXG4gICAgICAgIGxldCBteXdpbmRvdyA9IHdpbmRvdy5vcGVuKCcnLCAnUFJJTlQnKTsvLywgJ2hlaWdodD04MDAsd2lkdGg9MTAwMCcpO1xyXG4gICAgICAgIGxldCBzdHlsZXMgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgaWYoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0uaHJlZil7XHJcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ucnVsZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ucnVsZXM7IC8vY2hyb21lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5jc3NSdWxlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5jc3NSdWxlczsgLy9maXJlZm94XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJ1bGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcnVsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChydWxlc1tqXS5jc3NUZXh0LmluZGV4T2YoXCJAXCIpIDwgMCkgLy9za2lwIG90aGVyIEBtZWRpYSwgQGtleS1mcmFtZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzICs9IHJ1bGVzW2pdLmNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3R5bGVzID0gYEBtZWRpYSBwcmludHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtzdHlsZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5idXR0b24tcHJpbnR7ZGlzcGxheTpub25lIWltcG9ydGFudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtDU1NQcmludH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbntcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtzdHlsZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5idXR0b24tcHJpbnR7ZGlzcGxheTpub25lIWltcG9ydGFudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtDU1NQcmludH1cclxuICAgICAgICAgICAgICAgICAgICB9YDtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdzdHlsZXMnLCBzdHlsZXMpO1xyXG4gICAgICAgIG15d2luZG93LmRvY3VtZW50LndyaXRlKCc8aHRtbD48aGVhZD48dGl0bGU+JyArIGRvY3VtZW50LnRpdGxlICArICc8L3RpdGxlPicpO1xyXG5cclxuICAgICAgICBteXdpbmRvdy5kb2N1bWVudC53cml0ZShgPHN0eWxlPiR7c3R5bGVzfTwvc3R5bGU+YCk7XHJcbiAgICAgICAgbXl3aW5kb3cuZG9jdW1lbnQud3JpdGUoJzwvaGVhZD48Ym9keT4nKTtcclxuICAgICAgICBteXdpbmRvdy5kb2N1bWVudC53cml0ZShIVE1MRWxlbWVudC5pbm5lckhUTUwpO1xyXG4gICAgICAgIG15d2luZG93LmRvY3VtZW50LndyaXRlKCc8L2JvZHk+PC9odG1sPicpO1xyXG5cclxuICAgICAgICBteXdpbmRvdy5kb2N1bWVudC5jbG9zZSgpOyAvLyBuZWNlc3NhcnkgZm9yIElFID49IDEwXHJcbiAgICAgICAgbXl3aW5kb3cuZm9jdXMoKTsgLy8gbmVjZXNzYXJ5IGZvciBJRSA+PSAxMCovXHJcblxyXG4gICAgICAgIG15d2luZG93LnByaW50KCk7XHJcbiAgICAgICAgbXl3aW5kb3cuY2xvc2UoKTtcclxuICAgIH0sXHJcbiAgICBDcmVhdGVFbGVtZW50RnJvbVN0cmluZzogcmVxdWlyZSgnLi9DcmVhdGVFbGVtZW50RnJvbVN0cmluZy5qcycpLFxyXG4gICAgQ3JlYXRlRWxlbWVudHNGcm9tU3RyaW5nOiByZXF1aXJlKCcuL0NyZWF0ZUVsZW1lbnRzRnJvbVN0cmluZy5qcycpLFxyXG4gICAgU2VsZWN0OiByZXF1aXJlKCcuL3NlbGVjdC5qcycpLFxyXG4gICAgU2VsZWN0QWxsOiByZXF1aXJlKCcuL3NlbGVjdC1hbGwuanMnKSxcclxuXHJcbiAgICBDbG9uZU5vZGU6IHJlcXVpcmUoJy4vQ2xvbmVOb2RlLmpzJyksXHJcbiAgICBBZGRFdmVudExpc3RlbmVyR2xvYmFsOiByZXF1aXJlKCcuL0FkZEV2ZW50TGlzdGVuZXJHbG9iYWwuanMnKSxcclxuICAgIGlzVmlzaWJsZTogcmVxdWlyZSgnLi9pc1Zpc2libGUuanMnKSxcclxufTtcclxuIl19
},{"./AddEventListenerGlobal.js":9,"./CloneNode.js":10,"./CreateElementFromString.js":11,"./CreateElementsFromString.js":12,"./isVisible.js":14,"./select-all.js":15,"./select.js":16}],14:[function(require,module,exports){
'use strict';

function isVisibleElem(HTMLElement) {
    var Style = window.getComputedStyle(HTMLElement);

    return Style.display !== 'none' && Style.visibility !== 'hidden' && parseFloat(Style.opacity) !== 0 && parseFloat(Style.height) + parseFloat(Style.minHeight) !== 0 && parseFloat(Style.width) + parseFloat(Style.minWidth) !== 0 && (HTMLElement.tagName.toLowerCase() === 'body' || HTMLElement.offsetParent !== null && Style.display !== 'fixed');
    //jquery
    //return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
}

module.exports = function (HTMLElement) {
    var isVisible = isVisibleElem(HTMLElement);
    if (isVisible) {
        while (HTMLElement.parentElement) {
            if (!isVisibleElem(HTMLElement)) {
                return false;
            }
            HTMLElement = HTMLElement.parentElement;
        }
    }
    return isVisible;
    /*
     //check invisible state;
     let isVisibleSelf = function(element){
     let ContentStyle = window.getComputedStyle(element);
     if ( (ContentStyle.display === "none") || (ContentStyle.opacity === "0") || (ContentStyle.visibility === "hidden") )
     return false;
     //check for null-size
     if ( (parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === "auto")  && parseInt(ContentStyle.width) === 0)
     return false;
     if ( (parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === "auto") && parseInt(ContentStyle.height) === 0)
     return false;
     return true;
     };
     let isVisibleParent = function (element) {
     while (element.parentElement){
     if (!isVisibleSelf(element.parentElement)
     || (element.tagName.toLowerCase() !== 'body' && !element.parentElement))//not real elem
     {
     return false;
     }
     element = element.parentElement;
     }
     return true;
     };
     if (!isVisibleSelf(HTMLElement))
     {
     return false;
     }
       return isVisibleParent(HTMLElement);
       return true;*/
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVmlzaWJsZS5qcyJdLCJuYW1lcyI6WyJpc1Zpc2libGVFbGVtIiwiSFRNTEVsZW1lbnQiLCJTdHlsZSIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsInBhcnNlRmxvYXQiLCJvcGFjaXR5IiwiaGVpZ2h0IiwibWluSGVpZ2h0Iiwid2lkdGgiLCJtaW5XaWR0aCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsIm9mZnNldFBhcmVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc1Zpc2libGUiLCJwYXJlbnRFbGVtZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsQ0FBdUJDLFdBQXZCLEVBQW9DO0FBQ2hDLFFBQUlDLFFBQVFDLE9BQU9DLGdCQUFQLENBQXdCSCxXQUF4QixDQUFaOztBQUVBLFdBQU9DLE1BQU1HLE9BQU4sS0FBcUIsTUFBckIsSUFDQUgsTUFBTUksVUFBTixLQUFxQixRQURyQixJQUVBQyxXQUFXTCxNQUFNTSxPQUFqQixNQUE4QixDQUY5QixJQUdBRCxXQUFXTCxNQUFNTyxNQUFqQixJQUEyQkYsV0FBV0wsTUFBTVEsU0FBakIsQ0FBM0IsS0FBMkQsQ0FIM0QsSUFJQUgsV0FBV0wsTUFBTVMsS0FBakIsSUFBMkJKLFdBQVdMLE1BQU1VLFFBQWpCLENBQTNCLEtBQTJELENBSjNELEtBS0VYLFlBQVlZLE9BQVosQ0FBb0JDLFdBQXBCLE9BQXNDLE1BQXRDLElBQWlEYixZQUFZYyxZQUFaLEtBQTZCLElBQTdCLElBQXFDYixNQUFNRyxPQUFOLEtBQWtCLE9BTDFHLENBQVA7QUFNQTtBQUNBO0FBQ0g7O0FBSURXLE9BQU9DLE9BQVAsR0FBaUIsVUFBU2hCLFdBQVQsRUFBcUI7QUFDbEMsUUFBSWlCLFlBQVlsQixjQUFjQyxXQUFkLENBQWhCO0FBQ0EsUUFBSWlCLFNBQUosRUFBYztBQUNWLGVBQU9qQixZQUFZa0IsYUFBbkIsRUFBaUM7QUFDN0IsZ0JBQUksQ0FBQ25CLGNBQWNDLFdBQWQsQ0FBTCxFQUFnQztBQUM1Qix1QkFBTyxLQUFQO0FBQ0g7QUFDREEsMEJBQWNBLFlBQVlrQixhQUExQjtBQUNIO0FBQ0o7QUFDRCxXQUFPRCxTQUFQO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDSCxDQTNDRCIsImZpbGUiOiJpc1Zpc2libGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc1Zpc2libGVFbGVtKEhUTUxFbGVtZW50KSB7XHJcbiAgICBsZXQgU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShIVE1MRWxlbWVudCk7XHJcblxyXG4gICAgcmV0dXJuIFN0eWxlLmRpc3BsYXkgICAgIT09ICdub25lJ1xyXG4gICAgICAgICYmIFN0eWxlLnZpc2liaWxpdHkgIT09ICdoaWRkZW4nXHJcbiAgICAgICAgJiYgcGFyc2VGbG9hdChTdHlsZS5vcGFjaXR5KSAhPT0gMFxyXG4gICAgICAgICYmIHBhcnNlRmxvYXQoU3R5bGUuaGVpZ2h0KSArIHBhcnNlRmxvYXQoU3R5bGUubWluSGVpZ2h0KSAhPT0gMFxyXG4gICAgICAgICYmIHBhcnNlRmxvYXQoU3R5bGUud2lkdGgpICArIHBhcnNlRmxvYXQoU3R5bGUubWluV2lkdGgpICAhPT0gMFxyXG4gICAgICAgICYmICggSFRNTEVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScgfHwgKEhUTUxFbGVtZW50Lm9mZnNldFBhcmVudCAhPT0gbnVsbCAmJiBTdHlsZS5kaXNwbGF5ICE9PSAnZml4ZWQnKSlcclxuICAgIC8vanF1ZXJ5XHJcbiAgICAvL3JldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XHJcbn1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIVE1MRWxlbWVudCl7XHJcbiAgICBsZXQgaXNWaXNpYmxlID0gaXNWaXNpYmxlRWxlbShIVE1MRWxlbWVudCk7XHJcbiAgICBpZiAoaXNWaXNpYmxlKXtcclxuICAgICAgICB3aGlsZSAoSFRNTEVsZW1lbnQucGFyZW50RWxlbWVudCl7XHJcbiAgICAgICAgICAgIGlmICghaXNWaXNpYmxlRWxlbShIVE1MRWxlbWVudCkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEhUTUxFbGVtZW50ID0gSFRNTEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNWaXNpYmxlO1xyXG4gICAgLypcclxuICAgICAvL2NoZWNrIGludmlzaWJsZSBzdGF0ZTtcclxuICAgICBsZXQgaXNWaXNpYmxlU2VsZiA9IGZ1bmN0aW9uKGVsZW1lbnQpe1xyXG4gICAgIGxldCBDb250ZW50U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgICBpZiAoIChDb250ZW50U3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIpIHx8IChDb250ZW50U3R5bGUub3BhY2l0eSA9PT0gXCIwXCIpIHx8IChDb250ZW50U3R5bGUudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIikgKVxyXG4gICAgIHJldHVybiBmYWxzZTtcclxuICAgICAvL2NoZWNrIGZvciBudWxsLXNpemVcclxuICAgICBpZiAoIChwYXJzZUludChDb250ZW50U3R5bGUubWluV2lkdGgpID09PSAwIHx8IENvbnRlbnRTdHlsZS5taW5XaWR0aCA9PT0gXCJhdXRvXCIpICAmJiBwYXJzZUludChDb250ZW50U3R5bGUud2lkdGgpID09PSAwKVxyXG4gICAgIHJldHVybiBmYWxzZTtcclxuICAgICBpZiAoIChwYXJzZUludChDb250ZW50U3R5bGUubWluSGVpZ2h0KSA9PT0gMCB8fCBDb250ZW50U3R5bGUubWluSGVpZ2h0ID09PSBcImF1dG9cIikgJiYgcGFyc2VJbnQoQ29udGVudFN0eWxlLmhlaWdodCkgPT09IDApXHJcbiAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgIHJldHVybiB0cnVlO1xyXG4gICAgIH07XHJcbiAgICAgbGV0IGlzVmlzaWJsZVBhcmVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgd2hpbGUgKGVsZW1lbnQucGFyZW50RWxlbWVudCl7XHJcbiAgICAgaWYgKCFpc1Zpc2libGVTZWxmKGVsZW1lbnQucGFyZW50RWxlbWVudClcclxuICAgICB8fCAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdib2R5JyAmJiAhZWxlbWVudC5wYXJlbnRFbGVtZW50KSkvL25vdCByZWFsIGVsZW1cclxuICAgICB7XHJcbiAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgIH1cclxuICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgIH1cclxuICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICB9O1xyXG4gICAgIGlmICghaXNWaXNpYmxlU2VsZihIVE1MRWxlbWVudCkpXHJcbiAgICAge1xyXG4gICAgIHJldHVybiBmYWxzZTtcclxuICAgICB9XHJcblxyXG4gICAgIHJldHVybiBpc1Zpc2libGVQYXJlbnQoSFRNTEVsZW1lbnQpO1xyXG5cclxuICAgICByZXR1cm4gdHJ1ZTsqL1xyXG59Il19
},{}],15:[function(require,module,exports){
'use strict';

module.exports = function (Selector) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

    if (typeof Selector === 'undefined') return [];
    if (typeof Selector.tagName !== 'undefined' || Selector === document) return [Selector];
    return parent.querySelectorAll(Selector);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC1hbGwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlNlbGVjdG9yIiwicGFyZW50IiwiZG9jdW1lbnQiLCJ0YWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxRQUFULEVBQXFDO0FBQUEsUUFBbEJDLE1BQWtCLHVFQUFUQyxRQUFTOztBQUNsRCxRQUFJLE9BQU9GLFFBQVAsS0FBb0IsV0FBeEIsRUFDSSxPQUFPLEVBQVA7QUFDSixRQUFJLE9BQU9BLFNBQVNHLE9BQWhCLEtBQTRCLFdBQTVCLElBQTJDSCxhQUFhRSxRQUE1RCxFQUNJLE9BQU8sQ0FBQ0YsUUFBRCxDQUFQO0FBQ0osV0FBT0MsT0FBT0csZ0JBQVAsQ0FBd0JKLFFBQXhCLENBQVA7QUFDSCxDQU5EIiwiZmlsZSI6InNlbGVjdC1hbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudCl7XHJcbiAgICBpZiAodHlwZW9mIFNlbGVjdG9yID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICBpZiAodHlwZW9mIFNlbGVjdG9yLnRhZ05hbWUgIT09ICd1bmRlZmluZWQnIHx8IFNlbGVjdG9yID09PSBkb2N1bWVudClcclxuICAgICAgICByZXR1cm4gW1NlbGVjdG9yXTtcclxuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvcik7XHJcbn07Il19
},{}],16:[function(require,module,exports){
'use strict';

module.exports = function (query, parent) {
    if (!parent) {
        parent = document;
    }
    if (query === '' || query === null) return null;
    if (query instanceof Node && query.parentNode === null) return null;
    return query instanceof Node ? query : parent.querySelector(query);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicXVlcnkiLCJwYXJlbnQiLCJkb2N1bWVudCIsIk5vZGUiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxLQUFULEVBQWdCQyxNQUFoQixFQUF1QjtBQUNwQyxRQUFJLENBQUNBLE1BQUwsRUFBWTtBQUNSQSxpQkFBU0MsUUFBVDtBQUNIO0FBQ0QsUUFBSUYsVUFBVSxFQUFWLElBQWdCQSxVQUFVLElBQTlCLEVBQ0ksT0FBTyxJQUFQO0FBQ0osUUFBSUEsaUJBQWlCRyxJQUFqQixJQUF5QkgsTUFBTUksVUFBTixLQUFxQixJQUFsRCxFQUNJLE9BQU8sSUFBUDtBQUNKLFdBQU9KLGlCQUFpQkcsSUFBakIsR0FBd0JILEtBQXhCLEdBQWdDQyxPQUFPSSxhQUFQLENBQXFCTCxLQUFyQixDQUF2QztBQUNILENBVEQiLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxdWVyeSwgcGFyZW50KXtcclxuICAgIGlmICghcGFyZW50KXtcclxuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudDtcclxuICAgIH1cclxuICAgIGlmIChxdWVyeSA9PT0gJycgfHwgcXVlcnkgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAocXVlcnkgaW5zdGFuY2VvZiBOb2RlICYmIHF1ZXJ5LnBhcmVudE5vZGUgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gcXVlcnkgaW5zdGFuY2VvZiBOb2RlID8gcXVlcnkgOiBwYXJlbnQucXVlcnlTZWxlY3RvcihxdWVyeSlcclxufTsiXX0=
},{}],17:[function(require,module,exports){
"use strict";

module.exports = function () {
    if (window.getSelection) {
        if (window.getSelection().empty) {
            // Chrome
            window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges) {
            // Firefox
            window.getSelection().removeAllRanges();
        }
    } else if (document.selection) {
        // IE?
        document.selection.empty();
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRvY3VtZW50U2VsZWN0aW9uQ2xlYXIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyIsImdldFNlbGVjdGlvbiIsImVtcHR5IiwicmVtb3ZlQWxsUmFuZ2VzIiwiZG9jdW1lbnQiLCJzZWxlY3Rpb24iXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsWUFBWTtBQUN6QixRQUFJQyxPQUFPQyxZQUFYLEVBQXlCO0FBQ3JCLFlBQUlELE9BQU9DLFlBQVAsR0FBc0JDLEtBQTFCLEVBQWlDO0FBQUc7QUFDaENGLG1CQUFPQyxZQUFQLEdBQXNCQyxLQUF0QjtBQUNILFNBRkQsTUFFTyxJQUFJRixPQUFPQyxZQUFQLEdBQXNCRSxlQUExQixFQUEyQztBQUFHO0FBQ2pESCxtQkFBT0MsWUFBUCxHQUFzQkUsZUFBdEI7QUFDSDtBQUNKLEtBTkQsTUFNTyxJQUFJQyxTQUFTQyxTQUFiLEVBQXdCO0FBQUc7QUFDOUJELGlCQUFTQyxTQUFULENBQW1CSCxLQUFuQjtBQUNIO0FBQ0osQ0FWRCIsImZpbGUiOiJEb2N1bWVudFNlbGVjdGlvbkNsZWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xyXG4gICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkpIHsgIC8vIENocm9tZVxyXG4gICAgICAgICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMpIHsgIC8vIEZpcmVmb3hcclxuICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7ICAvLyBJRT9cclxuICAgICAgICBkb2N1bWVudC5zZWxlY3Rpb24uZW1wdHkoKTtcclxuICAgIH1cclxufTsiXX0=
},{}],18:[function(require,module,exports){
'use strict';

module.exports = function (HTMLElement, Message) {
    var ShowingDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;

    if (!Message) Message = "Поле не может быть пустым";
    var div = document.createElement('div');
    div.classList.add('lure-error-hint');
    div.innerHTML = Message;
    HTMLElement.parentElement.style.position = 'relative';
    HTMLElement.parentElement.appendChild(div);
    div.style.display = 'block';
    try {
        div.animate({ opacity: [0, 1] }, { duration: 300 });
    } catch (e) {}

    setTimeout(function () {

        try {
            //TODO fix this shit
            div.animate({ opacity: [1, 0] }, { duration: 300 }).onfinish = function () {
                div.style.display = 'none';
            };
        } catch (e) {
            div.style.display = 'none';
        }
        //TODO CHECK FADEIN FADEOUT
        setTimeout(function () {
            if (HTMLElement.parentElement) HTMLElement.parentElement.style.position = '';
            div.remove();
        }, 500);
    }, ShowingDuration);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVycm9ySGludC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiSFRNTEVsZW1lbnQiLCJNZXNzYWdlIiwiU2hvd2luZ0R1cmF0aW9uIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJhcHBlbmRDaGlsZCIsImRpc3BsYXkiLCJhbmltYXRlIiwib3BhY2l0eSIsImR1cmF0aW9uIiwiZSIsInNldFRpbWVvdXQiLCJvbmZpbmlzaCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxXQUFULEVBQXNCQyxPQUF0QixFQUF1RDtBQUFBLFFBQXhCQyxlQUF3Qix1RUFBTixJQUFNOztBQUNwRSxRQUFJLENBQUNELE9BQUwsRUFDSUEsVUFBVSwyQkFBVjtBQUNKLFFBQUlFLE1BQU1DLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBRixRQUFJRyxTQUFKLENBQWNDLEdBQWQsQ0FBa0IsaUJBQWxCO0FBQ0FKLFFBQUlLLFNBQUosR0FBZ0JQLE9BQWhCO0FBQ0FELGdCQUFZUyxhQUFaLENBQTBCQyxLQUExQixDQUFnQ0MsUUFBaEMsR0FBMkMsVUFBM0M7QUFDQVgsZ0JBQVlTLGFBQVosQ0FBMEJHLFdBQTFCLENBQXNDVCxHQUF0QztBQUNBQSxRQUFJTyxLQUFKLENBQVVHLE9BQVYsR0FBb0IsT0FBcEI7QUFDQSxRQUFJO0FBQ0FWLFlBQUlXLE9BQUosQ0FBWSxFQUFDQyxTQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVixFQUFaLEVBQStCLEVBQUNDLFVBQVcsR0FBWixFQUEvQjtBQUNILEtBRkQsQ0FHQSxPQUFPQyxDQUFQLEVBQVMsQ0FBRTs7QUFFWEMsZUFBVyxZQUFVOztBQUVqQixZQUFJO0FBQ0E7QUFDQWYsZ0JBQUlXLE9BQUosQ0FBWSxFQUFDQyxTQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVixFQUFaLEVBQStCLEVBQUNDLFVBQVcsR0FBWixFQUEvQixFQUNLRyxRQURMLEdBQ2dCLFlBQUk7QUFBQ2hCLG9CQUFJTyxLQUFKLENBQVVHLE9BQVYsR0FBb0IsTUFBcEI7QUFBMkIsYUFEaEQ7QUFFSCxTQUpELENBS0EsT0FBT0ksQ0FBUCxFQUFTO0FBQ0xkLGdCQUFJTyxLQUFKLENBQVVHLE9BQVYsR0FBb0IsTUFBcEI7QUFDSDtBQUNEO0FBQ0FLLG1CQUFXLFlBQVU7QUFDakIsZ0JBQUlsQixZQUFZUyxhQUFoQixFQUNJVCxZQUFZUyxhQUFaLENBQTBCQyxLQUExQixDQUFnQ0MsUUFBaEMsR0FBMkMsRUFBM0M7QUFDSlIsZ0JBQUlpQixNQUFKO0FBQ0gsU0FKRCxFQUlHLEdBSkg7QUFLSCxLQWhCRCxFQWdCR2xCLGVBaEJIO0FBaUJILENBL0JEIiwiZmlsZSI6IkVycm9ySGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSFRNTEVsZW1lbnQsIE1lc3NhZ2UsIFNob3dpbmdEdXJhdGlvbiA9IDIwMDApIHtcclxuICAgIGlmICghTWVzc2FnZSlcclxuICAgICAgICBNZXNzYWdlID0gXCLQn9C+0LvQtSDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8XCI7XHJcbiAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnbHVyZS1lcnJvci1oaW50Jyk7XHJcbiAgICBkaXYuaW5uZXJIVE1MID0gTWVzc2FnZTtcclxuICAgIEhUTUxFbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgSFRNTEVsZW1lbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBkaXYuYW5pbWF0ZSh7b3BhY2l0eTogWzAsIDFdfSwge2R1cmF0aW9uIDogMzAwfSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSl7fVxyXG5cclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy9UT0RPIGZpeCB0aGlzIHNoaXRcclxuICAgICAgICAgICAgZGl2LmFuaW1hdGUoe29wYWNpdHk6IFsxLCAwXX0sIHtkdXJhdGlvbiA6IDMwMH0pXHJcbiAgICAgICAgICAgICAgICAub25maW5pc2ggPSAoKT0+e2Rpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpe1xyXG4gICAgICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9UT0RPIENIRUNLIEZBREVJTiBGQURFT1VUXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZiAoSFRNTEVsZW1lbnQucGFyZW50RWxlbWVudClcclxuICAgICAgICAgICAgICAgIEhUTUxFbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnJztcclxuICAgICAgICAgICAgZGl2LnJlbW92ZSgpO1xyXG4gICAgICAgIH0sIDUwMClcclxuICAgIH0sIFNob3dpbmdEdXJhdGlvbilcclxufTsiXX0=
},{}],19:[function(require,module,exports){
'use strict';

module.exports = function (CSSAnimation) {
    var HTMLElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var isNull = false;
    if (!HTMLElement) {
        isNull = true;
        HTMLElement = document.createElement('div');
        document.body.appendChild(HTMLElement);
    }
    /* Check for CSS animation or transition */
    if (CSSAnimation) HTMLElement.classList.add(CSSAnimation);

    var Style = window.getComputedStyle(HTMLElement);
    var Duration = eval(Style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));
    var DurationAnim = eval(Style.animationDuration.replace('ms', '*1').replace('s', '*1000'));
    if (Duration < DurationAnim) Duration = DurationAnim;
    if (CSSAnimation) HTMLElement.classList.remove(CSSAnimation);
    if (isNull) HTMLElement.remove();
    return Duration;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldER1cmF0aW9uQW5pbWF0aW9uLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDU1NBbmltYXRpb24iLCJIVE1MRWxlbWVudCIsImlzTnVsbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNsYXNzTGlzdCIsImFkZCIsIlN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIkR1cmF0aW9uIiwiZXZhbCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInJlcGxhY2UiLCJEdXJhdGlvbkFuaW0iLCJhbmltYXRpb25EdXJhdGlvbiIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxZQUFULEVBQXlDO0FBQUEsUUFBbEJDLFdBQWtCLHVFQUFOLElBQU07O0FBQ3RELFFBQUlDLFNBQVMsS0FBYjtBQUNBLFFBQUksQ0FBQ0QsV0FBTCxFQUFpQjtBQUNiQyxpQkFBUyxJQUFUO0FBQ0FELHNCQUFjRSxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQUQsaUJBQVNFLElBQVQsQ0FBY0MsV0FBZCxDQUEwQkwsV0FBMUI7QUFDSDtBQUNEO0FBQ0EsUUFBSUQsWUFBSixFQUNJQyxZQUFZTSxTQUFaLENBQXNCQyxHQUF0QixDQUEwQlIsWUFBMUI7O0FBRUosUUFBSVMsUUFBZUMsT0FBT0MsZ0JBQVAsQ0FBd0JWLFdBQXhCLENBQW5CO0FBQ0EsUUFBSVcsV0FBZUMsS0FBS0osTUFBTUssa0JBQU4sQ0FBeUJDLE9BQXpCLENBQWlDLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDQSxPQUE3QyxDQUFxRCxHQUFyRCxFQUEwRCxPQUExRCxDQUFMLENBQW5CO0FBQ0EsUUFBSUMsZUFBZUgsS0FBS0osTUFBTVEsaUJBQU4sQ0FBd0JGLE9BQXhCLENBQWdDLElBQWhDLEVBQXNDLElBQXRDLEVBQTRDQSxPQUE1QyxDQUFvRCxHQUFwRCxFQUF5RCxPQUF6RCxDQUFMLENBQW5CO0FBQ0EsUUFBSUgsV0FBV0ksWUFBZixFQUNJSixXQUFXSSxZQUFYO0FBQ0osUUFBSWhCLFlBQUosRUFDSUMsWUFBWU0sU0FBWixDQUFzQlcsTUFBdEIsQ0FBNkJsQixZQUE3QjtBQUNKLFFBQUlFLE1BQUosRUFDSUQsWUFBWWlCLE1BQVo7QUFDSixXQUFPTixRQUFQO0FBQ0gsQ0FyQkQiLCJmaWxlIjoiR2V0RHVyYXRpb25BbmltYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENTU0FuaW1hdGlvbiwgSFRNTEVsZW1lbnQ9bnVsbCkge1xyXG4gICAgbGV0IGlzTnVsbCA9IGZhbHNlO1xyXG4gICAgaWYgKCFIVE1MRWxlbWVudCl7XHJcbiAgICAgICAgaXNOdWxsID0gdHJ1ZTtcclxuICAgICAgICBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoSFRNTEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgLyogQ2hlY2sgZm9yIENTUyBhbmltYXRpb24gb3IgdHJhbnNpdGlvbiAqL1xyXG4gICAgaWYgKENTU0FuaW1hdGlvbilcclxuICAgICAgICBIVE1MRWxlbWVudC5jbGFzc0xpc3QuYWRkKENTU0FuaW1hdGlvbik7XHJcblxyXG4gICAgbGV0IFN0eWxlICAgICAgICA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKEhUTUxFbGVtZW50KTtcclxuICAgIGxldCBEdXJhdGlvbiAgICAgPSBldmFsKFN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbi5yZXBsYWNlKCdtcycsICcqMScpLnJlcGxhY2UoJ3MnLCAnKjEwMDAnKSk7XHJcbiAgICBsZXQgRHVyYXRpb25BbmltID0gZXZhbChTdHlsZS5hbmltYXRpb25EdXJhdGlvbi5yZXBsYWNlKCdtcycsICcqMScpLnJlcGxhY2UoJ3MnLCAnKjEwMDAnKSk7XHJcbiAgICBpZiAoRHVyYXRpb24gPCBEdXJhdGlvbkFuaW0pXHJcbiAgICAgICAgRHVyYXRpb24gPSBEdXJhdGlvbkFuaW07XHJcbiAgICBpZiAoQ1NTQW5pbWF0aW9uKVxyXG4gICAgICAgIEhUTUxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ1NTQW5pbWF0aW9uKTtcclxuICAgIGlmIChpc051bGwpXHJcbiAgICAgICAgSFRNTEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICByZXR1cm4gRHVyYXRpb247XHJcbn07Il19
},{}],20:[function(require,module,exports){
"use strict";

var CounterID = 0;

/**
 *
 * @returns {int}
 */
var GetID = function GetID() {
  CounterID++;
  return CounterID;
};

/**
 *
 * @returns {int}
 */
GetID.LastID = function () {
  return CounterID;
};

module.exports = GetID;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldElELmpzIl0sIm5hbWVzIjpbIkNvdW50ZXJJRCIsIkdldElEIiwiTGFzdElEIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxZQUFZLENBQWhCOztBQUVBOzs7O0FBSUEsSUFBSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVU7QUFDbEJEO0FBQ0EsU0FBT0EsU0FBUDtBQUNILENBSEQ7O0FBS0E7Ozs7QUFJQUMsTUFBTUMsTUFBTixHQUFlLFlBQVk7QUFDdkIsU0FBT0YsU0FBUDtBQUNILENBRkQ7O0FBSUFHLE9BQU9DLE9BQVAsR0FBaUJILEtBQWpCIiwiZmlsZSI6IkdldElELmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IENvdW50ZXJJRCA9IDA7XHJcblxyXG4vKipcclxuICpcclxuICogQHJldHVybnMge2ludH1cclxuICovXHJcbmxldCBHZXRJRCA9IGZ1bmN0aW9uKCl7XHJcbiAgICBDb3VudGVySUQrKztcclxuICAgIHJldHVybiBDb3VudGVySUQ7XHJcbn07XHJcblxyXG4vKipcclxuICpcclxuICogQHJldHVybnMge2ludH1cclxuICovXHJcbkdldElELkxhc3RJRCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBDb3VudGVySUQ7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdldElEOyJdfQ==
},{}],21:[function(require,module,exports){
'use strict';

module.exports = function (elem) {
    var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1rem';

    var hiddenStyle = "left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;";
    var clone = document.createElement('div');
    for (var k in elem.style) {
        if (elem.style.hasOwnProperty(k)) {
            try {
                if (elem.style[k] !== '' && elem.style[k].indexOf(":") > 0) {
                    clone.style[k] = elem.style[k];
                }
            } catch (e) {}
        }
    }
    document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);
    clone.style.fontSize = fontSize;
    clone.innerHTML = elem.innerHTML;
    parent.document.body.appendChild(clone);
    var sizes = { width: clone.clientWidth, height: clone.clientHeight };
    parent.document.body.removeChild(clone);
    return sizes;
};

// this.GetInlineSize1 = function(elem, fontSize='12px'){
//     let pp = performance.now();
//     const hiddenStyle = "left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;";
//     const clone = document.createElement('div');
//     for (let k in elem.style) {
//         try {
//             if ((elem.style[k] !== '') && (elem.style[k].indexOf(":") > 0)) {
//                 clone.style[k] = elem.style[k];
//             }
//         } catch (e) {}
//     }
//     document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);
//     clone.style.fontSize = fontSize;
//     clone.innerHTML = elem.innerHTML;
//     parent.document.body.appendChild(clone);
//     let xx = getComputedStyle(clone);
//     let ps = performance.now();
//     let sizes = {width: Lure.GetTextWidth(elem.innerText, xx.getPropertyValue('font-family'), xx.getPropertyValue("font-size")), height: 12};
//     Lure.Perf(ps, '--size');
//     parent.document.body.removeChild(clone);
//     console.log('sizes', sizes, xx);
//     Lure.Perf(pp, '--calxXwidth');
//     return sizes;
// };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldElubGluZVNpemUuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVsZW0iLCJmb250U2l6ZSIsImhpZGRlblN0eWxlIiwiY2xvbmUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJrIiwic3R5bGUiLCJoYXNPd25Qcm9wZXJ0eSIsImluZGV4T2YiLCJlIiwiYWxsIiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwicGFyZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwic2l6ZXMiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0MsSUFBVCxFQUErQjtBQUFBLFFBQWhCQyxRQUFnQix1RUFBUCxNQUFPOztBQUM1QyxRQUFNQyxjQUFjLHNFQUFwQjtBQUNBLFFBQU1DLFFBQVFDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtBQUNBLFNBQUssSUFBSUMsQ0FBVCxJQUFjTixLQUFLTyxLQUFuQixFQUEwQjtBQUN0QixZQUFJUCxLQUFLTyxLQUFMLENBQVdDLGNBQVgsQ0FBMEJGLENBQTFCLENBQUosRUFBaUM7QUFDN0IsZ0JBQUk7QUFDQSxvQkFBS04sS0FBS08sS0FBTCxDQUFXRCxDQUFYLE1BQWtCLEVBQW5CLElBQTJCTixLQUFLTyxLQUFMLENBQVdELENBQVgsRUFBY0csT0FBZCxDQUFzQixHQUF0QixJQUE2QixDQUE1RCxFQUFnRTtBQUM1RE4sMEJBQU1JLEtBQU4sQ0FBWUQsQ0FBWixJQUFpQk4sS0FBS08sS0FBTCxDQUFXRCxDQUFYLENBQWpCO0FBQ0g7QUFDSixhQUpELENBSUUsT0FBT0ksQ0FBUCxFQUFVLENBQUU7QUFDakI7QUFDSjtBQUNETixhQUFTTyxHQUFULEdBQWVSLE1BQU1JLEtBQU4sQ0FBWUssWUFBWixDQUF5QixTQUF6QixFQUFvQ1YsV0FBcEMsQ0FBZixHQUFrRUMsTUFBTVMsWUFBTixDQUFtQixPQUFuQixFQUE0QlYsV0FBNUIsQ0FBbEU7QUFDQUMsVUFBTUksS0FBTixDQUFZTixRQUFaLEdBQXVCQSxRQUF2QjtBQUNBRSxVQUFNVSxTQUFOLEdBQWtCYixLQUFLYSxTQUF2QjtBQUNBQyxXQUFPVixRQUFQLENBQWdCVyxJQUFoQixDQUFxQkMsV0FBckIsQ0FBaUNiLEtBQWpDO0FBQ0EsUUFBTWMsUUFBUSxFQUFDQyxPQUFNZixNQUFNZ0IsV0FBYixFQUF5QkMsUUFBT2pCLE1BQU1rQixZQUF0QyxFQUFkO0FBQ0FQLFdBQU9WLFFBQVAsQ0FBZ0JXLElBQWhCLENBQXFCTyxXQUFyQixDQUFpQ25CLEtBQWpDO0FBQ0EsV0FBT2MsS0FBUDtBQUNILENBbkJEOztBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiR2V0SW5saW5lU2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZWxlbSwgZm9udFNpemU9JzFyZW0nKXtcclxuICAgIGNvbnN0IGhpZGRlblN0eWxlID0gXCJsZWZ0Oi0xMDAwMHB4O3RvcDotMTAwMDBweDtoZWlnaHQ6YXV0bzt3aWR0aDphdXRvO3Bvc2l0aW9uOmFic29sdXRlO1wiO1xyXG4gICAgY29uc3QgY2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGZvciAobGV0IGsgaW4gZWxlbS5zdHlsZSkge1xyXG4gICAgICAgIGlmIChlbGVtLnN0eWxlLmhhc093blByb3BlcnR5KGspKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmICgoZWxlbS5zdHlsZVtrXSAhPT0gJycpICYmIChlbGVtLnN0eWxlW2tdLmluZGV4T2YoXCI6XCIpID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5zdHlsZVtrXSA9IGVsZW0uc3R5bGVba107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYWxsID8gY2xvbmUuc3R5bGUuc2V0QXR0cmlidXRlKCdjc3NUZXh0JywgaGlkZGVuU3R5bGUpIDogY2xvbmUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGhpZGRlblN0eWxlKTtcclxuICAgIGNsb25lLnN0eWxlLmZvbnRTaXplID0gZm9udFNpemU7XHJcbiAgICBjbG9uZS5pbm5lckhUTUwgPSBlbGVtLmlubmVySFRNTDtcclxuICAgIHBhcmVudC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNsb25lKTtcclxuICAgIGNvbnN0IHNpemVzID0ge3dpZHRoOmNsb25lLmNsaWVudFdpZHRoLGhlaWdodDpjbG9uZS5jbGllbnRIZWlnaHR9O1xyXG4gICAgcGFyZW50LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY2xvbmUpO1xyXG4gICAgcmV0dXJuIHNpemVzO1xyXG59O1xyXG5cclxuLy8gdGhpcy5HZXRJbmxpbmVTaXplMSA9IGZ1bmN0aW9uKGVsZW0sIGZvbnRTaXplPScxMnB4Jyl7XHJcbi8vICAgICBsZXQgcHAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuLy8gICAgIGNvbnN0IGhpZGRlblN0eWxlID0gXCJsZWZ0Oi0xMDAwMHB4O3RvcDotMTAwMDBweDtoZWlnaHQ6YXV0bzt3aWR0aDphdXRvO3Bvc2l0aW9uOmFic29sdXRlO1wiO1xyXG4vLyAgICAgY29uc3QgY2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuLy8gICAgIGZvciAobGV0IGsgaW4gZWxlbS5zdHlsZSkge1xyXG4vLyAgICAgICAgIHRyeSB7XHJcbi8vICAgICAgICAgICAgIGlmICgoZWxlbS5zdHlsZVtrXSAhPT0gJycpICYmIChlbGVtLnN0eWxlW2tdLmluZGV4T2YoXCI6XCIpID4gMCkpIHtcclxuLy8gICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlW2tdID0gZWxlbS5zdHlsZVtrXTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbi8vICAgICB9XHJcbi8vICAgICBkb2N1bWVudC5hbGwgPyBjbG9uZS5zdHlsZS5zZXRBdHRyaWJ1dGUoJ2Nzc1RleHQnLCBoaWRkZW5TdHlsZSkgOiBjbG9uZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgaGlkZGVuU3R5bGUpO1xyXG4vLyAgICAgY2xvbmUuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZTtcclxuLy8gICAgIGNsb25lLmlubmVySFRNTCA9IGVsZW0uaW5uZXJIVE1MO1xyXG4vLyAgICAgcGFyZW50LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4vLyAgICAgbGV0IHh4ID0gZ2V0Q29tcHV0ZWRTdHlsZShjbG9uZSk7XHJcbi8vICAgICBsZXQgcHMgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuLy8gICAgIGxldCBzaXplcyA9IHt3aWR0aDogTHVyZS5HZXRUZXh0V2lkdGgoZWxlbS5pbm5lclRleHQsIHh4LmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtZmFtaWx5JyksIHh4LmdldFByb3BlcnR5VmFsdWUoXCJmb250LXNpemVcIikpLCBoZWlnaHQ6IDEyfTtcclxuLy8gICAgIEx1cmUuUGVyZihwcywgJy0tc2l6ZScpO1xyXG4vLyAgICAgcGFyZW50LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY2xvbmUpO1xyXG4vLyAgICAgY29uc29sZS5sb2coJ3NpemVzJywgc2l6ZXMsIHh4KTtcclxuLy8gICAgIEx1cmUuUGVyZihwcCwgJy0tY2FseFh3aWR0aCcpO1xyXG4vLyAgICAgcmV0dXJuIHNpemVzO1xyXG4vLyB9OyJdfQ==
},{}],22:[function(require,module,exports){
'use strict';

var GetID = require('./GetID.js');

module.exports = function () {
    return GetID.LastID();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldExhc3RJRC5qcyJdLCJuYW1lcyI6WyJHZXRJRCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiTGFzdElEIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVFDLFFBQVEsWUFBUixDQUFaOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFlBQVk7QUFDekIsV0FBT0gsTUFBTUksTUFBTixFQUFQO0FBQ0gsQ0FGRCIsImZpbGUiOiJHZXRMYXN0SUQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgR2V0SUQgPSByZXF1aXJlKCcuL0dldElELmpzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBHZXRJRC5MYXN0SUQoKTtcclxufTsiXX0=
},{"./GetID.js":20}],23:[function(require,module,exports){
"use strict";

var RegexpZero = new RegExp("[^0]");

module.exports = function (number) {
    //debugger;
    var b = number.toString().split('.');
    if (parseInt(b[0]) !== 0) {
        b = b[0].length;
        return b - 1;
    } else {
        var p = b[1] ? b[1].match(RegexpZero) : null;
        p = p ? p.index + 1 : 1;
        return -p;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldE51bWJlck9yZGVyLmpzIl0sIm5hbWVzIjpbIlJlZ2V4cFplcm8iLCJSZWdFeHAiLCJtb2R1bGUiLCJleHBvcnRzIiwibnVtYmVyIiwiYiIsInRvU3RyaW5nIiwic3BsaXQiLCJwYXJzZUludCIsImxlbmd0aCIsInAiLCJtYXRjaCIsImluZGV4Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGFBQWEsSUFBSUMsTUFBSixDQUFXLE1BQVgsQ0FBakI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0MsTUFBVCxFQUFnQjtBQUM3QjtBQUNBLFFBQUlDLElBQUlELE9BQU9FLFFBQVAsR0FBa0JDLEtBQWxCLENBQXdCLEdBQXhCLENBQVI7QUFDQSxRQUFJQyxTQUFTSCxFQUFFLENBQUYsQ0FBVCxNQUFtQixDQUF2QixFQUF5QjtBQUNyQkEsWUFBSUEsRUFBRSxDQUFGLEVBQUtJLE1BQVQ7QUFDQSxlQUFPSixJQUFFLENBQVQ7QUFDSCxLQUhELE1BR0s7QUFDRCxZQUFJSyxJQUFJTCxFQUFFLENBQUYsSUFBS0EsRUFBRSxDQUFGLEVBQUtNLEtBQUwsQ0FBV1gsVUFBWCxDQUFMLEdBQTRCLElBQXBDO0FBQ0FVLFlBQUlBLElBQUdBLEVBQUVFLEtBQUYsR0FBUSxDQUFYLEdBQWEsQ0FBakI7QUFDQSxlQUFPLENBQUNGLENBQVI7QUFDSDtBQUNKLENBWEQiLCJmaWxlIjoiR2V0TnVtYmVyT3JkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUmVnZXhwWmVybyA9IG5ldyBSZWdFeHAoXCJbXjBdXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihudW1iZXIpe1xyXG4gICAgLy9kZWJ1Z2dlcjtcclxuICAgIGxldCBiID0gbnVtYmVyLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcclxuICAgIGlmIChwYXJzZUludChiWzBdKSAhPT0gMCl7XHJcbiAgICAgICAgYiA9IGJbMF0ubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBiLTE7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBsZXQgcCA9IGJbMV0/YlsxXS5tYXRjaChSZWdleHBaZXJvKTpudWxsO1xyXG4gICAgICAgIHAgPSBwPyBwLmluZGV4KzE6MTtcclxuICAgICAgICByZXR1cm4gLXA7XHJcbiAgICB9XHJcbn07Il19
},{}],24:[function(require,module,exports){
"use strict";

module.exports = function () {
    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    return Math.round(Math.random() * (max - min) + min);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldFJhbmRvbS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWF4IiwibWluIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFlBQXlCO0FBQUEsUUFBZkMsR0FBZSx1RUFBWCxHQUFXO0FBQUEsUUFBTkMsR0FBTSx1RUFBRixDQUFFOztBQUN0QyxXQUFPQyxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsTUFBZUosTUFBSUMsR0FBbkIsSUFBd0JBLEdBQW5DLENBQVA7QUFDSCxDQUZEIiwiZmlsZSI6IkdldFJhbmRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1heD0xMDAsIG1pbj0wKXtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqKG1heC1taW4pK21pbilcclxufTsgIl19
},{}],25:[function(require,module,exports){
'use strict';

module.exports = function (txt, fontname, fontsize) {
    if (this.c === void 0) {
        this.c = document.createElement('canvas');
        this.ctx = this.c.getContext('2d');
    }
    this.ctx.font = fontsize + ' ' + fontname;
    return this.ctx.measureText(txt).width;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldFRleHRXaWR0aC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidHh0IiwiZm9udG5hbWUiLCJmb250c2l6ZSIsImMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiZm9udCIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0MsR0FBVCxFQUFjQyxRQUFkLEVBQXdCQyxRQUF4QixFQUFpQztBQUM5QyxRQUFHLEtBQUtDLENBQUwsS0FBVyxLQUFLLENBQW5CLEVBQXFCO0FBQ2pCLGFBQUtBLENBQUwsR0FBU0MsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFUO0FBQ0EsYUFBS0MsR0FBTCxHQUFXLEtBQUtILENBQUwsQ0FBT0ksVUFBUCxDQUFrQixJQUFsQixDQUFYO0FBQ0g7QUFDRCxTQUFLRCxHQUFMLENBQVNFLElBQVQsR0FBZ0JOLFdBQVcsR0FBWCxHQUFpQkQsUUFBakM7QUFDQSxXQUFPLEtBQUtLLEdBQUwsQ0FBU0csV0FBVCxDQUFxQlQsR0FBckIsRUFBMEJVLEtBQWpDO0FBQ0gsQ0FQRCIsImZpbGUiOiJHZXRUZXh0V2lkdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHR4dCwgZm9udG5hbWUsIGZvbnRzaXplKXtcclxuICAgIGlmKHRoaXMuYyA9PT0gdm9pZCAwKXtcclxuICAgICAgICB0aGlzLmMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuYy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdHguZm9udCA9IGZvbnRzaXplICsgJyAnICsgZm9udG5hbWU7XHJcbiAgICByZXR1cm4gdGhpcy5jdHgubWVhc3VyZVRleHQodHh0KS53aWR0aDtcclxufTsiXX0=
},{}],26:[function(require,module,exports){
"use strict";

module.exports = function (number, divider) {
    var b = number % divider;
    b && (number = number - b + divider);
    return number;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJvdW5kQnkuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm51bWJlciIsImRpdmlkZXIiLCJiIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVNDLE1BQVQsRUFBaUJDLE9BQWpCLEVBQXlCO0FBQ3RDLFFBQUlDLElBQUlGLFNBQVNDLE9BQWpCO0FBQ0FDLFVBQU1GLFNBQVNBLFNBQVNFLENBQVQsR0FBYUQsT0FBNUI7QUFDQSxXQUFPRCxNQUFQO0FBQ0gsQ0FKRCIsImZpbGUiOiJSb3VuZEJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihudW1iZXIsIGRpdmlkZXIpe1xyXG4gICAgbGV0IGIgPSBudW1iZXIgJSBkaXZpZGVyO1xyXG4gICAgYiAmJiAobnVtYmVyID0gbnVtYmVyIC0gYiArIGRpdmlkZXIpO1xyXG4gICAgcmV0dXJuIG51bWJlclxyXG59OyJdfQ==
},{}],27:[function(require,module,exports){
"use strict";

module.exports = {
    Remove: function Remove(array, delegate) {
        for (var i = array.length - 1; i >= 0; --i) {
            if (delegate(array[i])) {
                array.splice(i, 1);
            }
        }
        return array;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJSZW1vdmUiLCJhcnJheSIsImRlbGVnYXRlIiwiaSIsImxlbmd0aCIsInNwbGljZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxZQUFRLGdCQUFDQyxLQUFELEVBQVFDLFFBQVIsRUFBbUI7QUFDdkIsYUFBSyxJQUFJQyxJQUFJRixNQUFNRyxNQUFOLEdBQWUsQ0FBNUIsRUFBK0JELEtBQUssQ0FBcEMsRUFBdUMsRUFBRUEsQ0FBekMsRUFBNEM7QUFDeEMsZ0JBQUlELFNBQVNELE1BQU1FLENBQU4sQ0FBVCxDQUFKLEVBQXdCO0FBQ3BCRixzQkFBTUksTUFBTixDQUFhRixDQUFiLEVBQWUsQ0FBZjtBQUNIO0FBQ0o7QUFDRCxlQUFPRixLQUFQO0FBQ0g7QUFSWSxDQUFqQiIsImZpbGUiOiJhcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgUmVtb3ZlOiAoYXJyYXksIGRlbGVnYXRlKT0+e1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICBpZiAoZGVsZWdhdGUoYXJyYXlbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJheS5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcbn07Il19
},{}],28:[function(require,module,exports){
"use strict";

//toggle HTMLElement visibility with CSS animation waiting, and before/after animation handling

module.exports = function (Context, Arg, Target, before, after, CSSBefore, CSSAnimate, Duration, Timeout) {
    if (Timeout) clearTimeout(Timeout);
    before.call(Context, Arg);
    if (CSSBefore) Target.classList.remove(CSSBefore);

    if (CSSBefore === CSSAnimate) {
        //wait for remove css
        setTimeout(function () {
            if (CSSAnimate) Target.classList.add(CSSAnimate);
            Timeout = setTimeout(function () {
                after.call(Context, Arg);
            }, Duration);
        });

        return Timeout;
    }
    if (CSSAnimate) Target.classList.add(CSSAnimate);
    Timeout = setTimeout(function () {
        after.call(Context, Arg);
    }, Duration);
    return Timeout;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLXRvZ2dsZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ29udGV4dCIsIkFyZyIsIlRhcmdldCIsImJlZm9yZSIsImFmdGVyIiwiQ1NTQmVmb3JlIiwiQ1NTQW5pbWF0ZSIsIkR1cmF0aW9uIiwiVGltZW91dCIsImNsZWFyVGltZW91dCIsImNhbGwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwiYWRkIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLE9BQVYsRUFBbUJDLEdBQW5CLEVBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFBd0NDLEtBQXhDLEVBQStDQyxTQUEvQyxFQUEwREMsVUFBMUQsRUFBc0VDLFFBQXRFLEVBQWdGQyxPQUFoRixFQUF5RjtBQUN0RyxRQUFJQSxPQUFKLEVBQ0lDLGFBQWFELE9BQWI7QUFDSkwsV0FBT08sSUFBUCxDQUFZVixPQUFaLEVBQXFCQyxHQUFyQjtBQUNBLFFBQUlJLFNBQUosRUFDSUgsT0FBT1MsU0FBUCxDQUFpQkMsTUFBakIsQ0FBd0JQLFNBQXhCOztBQUVKLFFBQUlBLGNBQWNDLFVBQWxCLEVBQTZCO0FBQ3pCO0FBQ0FPLG1CQUFXLFlBQUk7QUFDWCxnQkFBSVAsVUFBSixFQUNJSixPQUFPUyxTQUFQLENBQWlCRyxHQUFqQixDQUFxQlIsVUFBckI7QUFDSkUsc0JBQVVLLFdBQVcsWUFBTTtBQUN2QlQsc0JBQU1NLElBQU4sQ0FBV1YsT0FBWCxFQUFvQkMsR0FBcEI7QUFDSCxhQUZTLEVBRVBNLFFBRk8sQ0FBVjtBQUdILFNBTkQ7O0FBUUEsZUFBT0MsT0FBUDtBQUNIO0FBQ0QsUUFBSUYsVUFBSixFQUNJSixPQUFPUyxTQUFQLENBQWlCRyxHQUFqQixDQUFxQlIsVUFBckI7QUFDSkUsY0FBVUssV0FBVyxZQUFNO0FBQ3ZCVCxjQUFNTSxJQUFOLENBQVdWLE9BQVgsRUFBb0JDLEdBQXBCO0FBQ0gsS0FGUyxFQUVQTSxRQUZPLENBQVY7QUFHQSxXQUFPQyxPQUFQO0FBRUgsQ0ExQkQiLCJmaWxlIjoiYXN5bmMtdG9nZ2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy90b2dnbGUgSFRNTEVsZW1lbnQgdmlzaWJpbGl0eSB3aXRoIENTUyBhbmltYXRpb24gd2FpdGluZywgYW5kIGJlZm9yZS9hZnRlciBhbmltYXRpb24gaGFuZGxpbmdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnRleHQsIEFyZywgVGFyZ2V0LCBiZWZvcmUsIGFmdGVyLCBDU1NCZWZvcmUsIENTU0FuaW1hdGUsIER1cmF0aW9uLCBUaW1lb3V0KSB7XHJcbiAgICBpZiAoVGltZW91dClcclxuICAgICAgICBjbGVhclRpbWVvdXQoVGltZW91dCk7XHJcbiAgICBiZWZvcmUuY2FsbChDb250ZXh0LCBBcmcpO1xyXG4gICAgaWYgKENTU0JlZm9yZSlcclxuICAgICAgICBUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShDU1NCZWZvcmUpO1xyXG5cclxuICAgIGlmIChDU1NCZWZvcmUgPT09IENTU0FuaW1hdGUpe1xyXG4gICAgICAgIC8vd2FpdCBmb3IgcmVtb3ZlIGNzc1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAgICAgaWYgKENTU0FuaW1hdGUpXHJcbiAgICAgICAgICAgICAgICBUYXJnZXQuY2xhc3NMaXN0LmFkZChDU1NBbmltYXRlKTtcclxuICAgICAgICAgICAgVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXIuY2FsbChDb250ZXh0LCBBcmcpO1xyXG4gICAgICAgICAgICB9LCBEdXJhdGlvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBUaW1lb3V0O1xyXG4gICAgfVxyXG4gICAgaWYgKENTU0FuaW1hdGUpXHJcbiAgICAgICAgVGFyZ2V0LmNsYXNzTGlzdC5hZGQoQ1NTQW5pbWF0ZSk7XHJcbiAgICBUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgYWZ0ZXIuY2FsbChDb250ZXh0LCBBcmcpO1xyXG4gICAgfSwgRHVyYXRpb24pO1xyXG4gICAgcmV0dXJuIFRpbWVvdXQ7XHJcblxyXG59OyJdfQ==
},{}],29:[function(require,module,exports){
'use strict';

var Select = require('../DOM/select');
var LureSettings = require('../../settings/common/common.js');

module.exports = {
    /**
     *
     * @param {HTMLElement} ButtonElement
     */
    Lock: function Lock(ButtonElement) {
        ButtonElement = Select(ButtonElement);
        ButtonElement.disabled = true;
        ButtonElement.classList.add(LureSettings.CSSButtonBusy);
    },
    /**
     *
     * @param {HTMLElement} ButtonElement
     */
    Unlock: function Unlock(ButtonElement) {
        ButtonElement = Select(ButtonElement);
        ButtonElement.disabled = false;
        ButtonElement.classList.remove(LureSettings.CSSButtonBusy);
    },
    /**
     *
     * @param {HTMLElement} ButtonElement
     */
    Release: function Release(ButtonElement) {
        ButtonElement = Select(ButtonElement);
        ButtonElement.disabled = false;
        ButtonElement.classList.remove(LureSettings.CSSButtonBusy);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJTZWxlY3QiLCJyZXF1aXJlIiwiTHVyZVNldHRpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyIsIkxvY2siLCJCdXR0b25FbGVtZW50IiwiZGlzYWJsZWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJDU1NCdXR0b25CdXN5IiwiVW5sb2NrIiwicmVtb3ZlIiwiUmVsZWFzZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLGVBQVIsQ0FBYjtBQUNBLElBQUlDLGVBQWVELFFBQVEsaUNBQVIsQ0FBbkI7O0FBRUFFLE9BQU9DLE9BQVAsR0FBZ0I7QUFDWjs7OztBQUlBQyxVQUFNLGNBQVVDLGFBQVYsRUFBeUI7QUFDM0JBLHdCQUFnQk4sT0FBT00sYUFBUCxDQUFoQjtBQUNBQSxzQkFBY0MsUUFBZCxHQUF5QixJQUF6QjtBQUNBRCxzQkFBY0UsU0FBZCxDQUF3QkMsR0FBeEIsQ0FBNEJQLGFBQWFRLGFBQXpDO0FBQ0gsS0FUVztBQVVaOzs7O0FBSUFDLFlBQVEsZ0JBQVVMLGFBQVYsRUFBeUI7QUFDN0JBLHdCQUFnQk4sT0FBT00sYUFBUCxDQUFoQjtBQUNBQSxzQkFBY0MsUUFBZCxHQUF5QixLQUF6QjtBQUNBRCxzQkFBY0UsU0FBZCxDQUF3QkksTUFBeEIsQ0FBK0JWLGFBQWFRLGFBQTVDO0FBQ0gsS0FsQlc7QUFtQlo7Ozs7QUFJQUcsYUFBUyxpQkFBVVAsYUFBVixFQUF5QjtBQUM5QkEsd0JBQWdCTixPQUFPTSxhQUFQLENBQWhCO0FBQ0FBLHNCQUFjQyxRQUFkLEdBQXlCLEtBQXpCO0FBQ0FELHNCQUFjRSxTQUFkLENBQXdCSSxNQUF4QixDQUErQlYsYUFBYVEsYUFBNUM7QUFDSDtBQTNCVyxDQUFoQiIsImZpbGUiOiJidXR0b24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgU2VsZWN0ID0gcmVxdWlyZSgnLi4vRE9NL3NlbGVjdCcpO1xyXG5sZXQgTHVyZVNldHRpbmdzID0gcmVxdWlyZSgnLi4vLi4vc2V0dGluZ3MvY29tbW9uL2NvbW1vbi5qcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPXtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IEJ1dHRvbkVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgTG9jazogZnVuY3Rpb24gKEJ1dHRvbkVsZW1lbnQpIHtcclxuICAgICAgICBCdXR0b25FbGVtZW50ID0gU2VsZWN0KEJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgIEJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIEJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChMdXJlU2V0dGluZ3MuQ1NTQnV0dG9uQnVzeSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gQnV0dG9uRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBVbmxvY2s6IGZ1bmN0aW9uIChCdXR0b25FbGVtZW50KSB7XHJcbiAgICAgICAgQnV0dG9uRWxlbWVudCA9IFNlbGVjdChCdXR0b25FbGVtZW50KTtcclxuICAgICAgICBCdXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgQnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEx1cmVTZXR0aW5ncy5DU1NCdXR0b25CdXN5KTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBCdXR0b25FbGVtZW50XHJcbiAgICAgKi9cclxuICAgIFJlbGVhc2U6IGZ1bmN0aW9uIChCdXR0b25FbGVtZW50KSB7XHJcbiAgICAgICAgQnV0dG9uRWxlbWVudCA9IFNlbGVjdChCdXR0b25FbGVtZW50KTtcclxuICAgICAgICBCdXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgQnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEx1cmVTZXR0aW5ncy5DU1NCdXR0b25CdXN5KTtcclxuICAgIH1cclxufTtcclxuIl19
},{"../../settings/common/common.js":49,"../DOM/select":16}],30:[function(require,module,exports){
'use strict';

// promise caller
module.exports = function (promise) {
    var handlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return promise.then(function (x) {
        handlers.Then ? handlers.Then(x) : null;
        handlers.Finally ? handlers.Finally(x) : null;
        return promise;
    }).catch(function (x) {
        handlers.Catch ? handlers.Catch(x) : console.error('[api.call]' + x);
        handlers.Finally ? handlers.Finally(x) : null;
        return promise;
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb21pc2UiLCJoYW5kbGVycyIsInRoZW4iLCJUaGVuIiwieCIsIkZpbmFsbHkiLCJjYXRjaCIsIkNhdGNoIiwiY29uc29sZSIsImVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0FBLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsT0FBVixFQUFnQztBQUFBLFFBQWJDLFFBQWEsdUVBQUosRUFBSTs7QUFDN0MsV0FBT0QsUUFDRkUsSUFERSxDQUNHLGFBQUc7QUFDTEQsaUJBQVNFLElBQVQsR0FBZ0JGLFNBQVNFLElBQVQsQ0FBY0MsQ0FBZCxDQUFoQixHQUFrQyxJQUFsQztBQUNBSCxpQkFBU0ksT0FBVCxHQUFvQkosU0FBU0ksT0FBVCxDQUFpQkQsQ0FBakIsQ0FBcEIsR0FBMEMsSUFBMUM7QUFDQSxlQUFPSixPQUFQO0FBQ0gsS0FMRSxFQU1GTSxLQU5FLENBTUksYUFBRztBQUNOTCxpQkFBU00sS0FBVCxHQUFpQk4sU0FBU00sS0FBVCxDQUFlSCxDQUFmLENBQWpCLEdBQW9DSSxRQUFRQyxLQUFSLENBQWMsZUFBYUwsQ0FBM0IsQ0FBcEM7QUFDQUgsaUJBQVNJLE9BQVQsR0FBb0JKLFNBQVNJLE9BQVQsQ0FBaUJELENBQWpCLENBQXBCLEdBQTBDLElBQTFDO0FBQ0EsZUFBT0osT0FBUDtBQUNILEtBVkUsQ0FBUDtBQVdILENBWkQiLCJmaWxlIjoiY2FsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHByb21pc2UgY2FsbGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHByb21pc2UsIGhhbmRsZXJzPXt9KSB7XHJcbiAgICByZXR1cm4gcHJvbWlzZVxyXG4gICAgICAgIC50aGVuKHg9PntcclxuICAgICAgICAgICAgaGFuZGxlcnMuVGhlbiA/IGhhbmRsZXJzLlRoZW4oeCk6IG51bGw7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLkZpbmFsbHkgPyAgaGFuZGxlcnMuRmluYWxseSh4KSA6IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKHg9PntcclxuICAgICAgICAgICAgaGFuZGxlcnMuQ2F0Y2ggPyBoYW5kbGVycy5DYXRjaCh4KTogY29uc29sZS5lcnJvcignW2FwaS5jYWxsXScreCk7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLkZpbmFsbHkgPyAgaGFuZGxlcnMuRmluYWxseSh4KSA6IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgIH0pO1xyXG59OyJdfQ==
},{}],31:[function(require,module,exports){
"use strict";

module.exports = {
    Get: function Get(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    },
    Set: function Set(Name, Value, Options) {
        Options = Options ? Options : {};
        if (Options.expires) {
            Options.expires = Lure.Date(Options.expires).Date.toUTCString();
        }
        var cookie = Name + "=" + Value;
        Options.path = Options.path !== void 0 ? Options.path : '/';
        for (var p in Options) {
            if (Options.hasOwnProperty(p)) {
                cookie += "; " + p + " = " + (Options[p] !== true ? Options[p] : '');
                /*let propValue = Options[p];
                 if (propValue !== true) {
                 cookie += "=" + propValue;
                 }*/
            }
        }
        document.cookie = cookie;
    },
    Remove: function Remove(Name) {
        var Path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

        Lure.Cookie.Set(Name, '', {
            expires: new Date(0),
            path: Path
        });
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvb2tpZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiR2V0IiwibmFtZSIsIm1hdGNoZXMiLCJkb2N1bWVudCIsImNvb2tpZSIsIm1hdGNoIiwiUmVnRXhwIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInVuZGVmaW5lZCIsIlNldCIsIk5hbWUiLCJWYWx1ZSIsIk9wdGlvbnMiLCJleHBpcmVzIiwiTHVyZSIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInBhdGgiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJSZW1vdmUiLCJQYXRoIiwiQ29va2llIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JDLFNBQUssYUFBVUMsSUFBVixFQUFnQjtBQUNqQixZQUFJQyxVQUFVQyxTQUFTQyxNQUFULENBQWdCQyxLQUFoQixDQUFzQixJQUFJQyxNQUFKLENBQ2hDLGFBQWFMLEtBQUtNLE9BQUwsQ0FBYSw4QkFBYixFQUE2QyxNQUE3QyxDQUFiLEdBQW9FLFVBRHBDLENBQXRCLENBQWQ7QUFHQSxlQUFPTCxVQUFVTSxtQkFBbUJOLFFBQVEsQ0FBUixDQUFuQixDQUFWLEdBQTJDTyxTQUFsRDtBQUNILEtBTlk7QUFPYkMsU0FBSyxhQUFVQyxJQUFWLEVBQWdCQyxLQUFoQixFQUF1QkMsT0FBdkIsRUFBZ0M7QUFDakNBLGtCQUFVQSxVQUFVQSxPQUFWLEdBQW9CLEVBQTlCO0FBQ0EsWUFBSUEsUUFBUUMsT0FBWixFQUFvQjtBQUNoQkQsb0JBQVFDLE9BQVIsR0FBa0JDLEtBQUtDLElBQUwsQ0FBVUgsUUFBUUMsT0FBbEIsRUFBMkJFLElBQTNCLENBQWdDQyxXQUFoQyxFQUFsQjtBQUNIO0FBQ0QsWUFBSWIsU0FBWU8sSUFBWixTQUFvQkMsS0FBeEI7QUFDQUMsZ0JBQVFLLElBQVIsR0FBZUwsUUFBUUssSUFBUixLQUFpQixLQUFLLENBQXRCLEdBQTBCTCxRQUFRSyxJQUFsQyxHQUF5QyxHQUF4RDtBQUNBLGFBQUssSUFBSUMsQ0FBVCxJQUFjTixPQUFkLEVBQXVCO0FBQ25CLGdCQUFJQSxRQUFRTyxjQUFSLENBQXVCRCxDQUF2QixDQUFKLEVBQThCO0FBQzFCZixpQ0FBZWUsQ0FBZixZQUFzQk4sUUFBUU0sQ0FBUixNQUFlLElBQWYsR0FBc0JOLFFBQVFNLENBQVIsQ0FBdEIsR0FBa0MsRUFBeEQ7QUFDQTs7OztBQUlIO0FBQ0o7QUFDRGhCLGlCQUFTQyxNQUFULEdBQWtCQSxNQUFsQjtBQUNILEtBeEJZO0FBeUJiaUIsWUFBUSxnQkFBVVYsSUFBVixFQUEwQjtBQUFBLFlBQVZXLElBQVUsdUVBQUwsR0FBSzs7QUFDOUJQLGFBQUtRLE1BQUwsQ0FBWWIsR0FBWixDQUFnQkMsSUFBaEIsRUFBc0IsRUFBdEIsRUFBMEI7QUFDdEJHLHFCQUFTLElBQUlFLElBQUosQ0FBUyxDQUFULENBRGE7QUFFdEJFLGtCQUFNSTtBQUZnQixTQUExQjtBQUlIO0FBOUJZLENBQWpCIiwiZmlsZSI6ImNvb2tpZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgR2V0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGxldCBtYXRjaGVzID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoXHJcbiAgICAgICAgICAgIFwiKD86Xnw7IClcIiArIG5hbWUucmVwbGFjZSgvKFtcXC4kPyp8e31cXChcXClcXFtcXF1cXFxcXFwvXFwrXl0pL2csICdcXFxcJDEnKSArIFwiPShbXjtdKilcIlxyXG4gICAgICAgICkpO1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogdW5kZWZpbmVkO1xyXG4gICAgfSxcclxuICAgIFNldDogZnVuY3Rpb24gKE5hbWUsIFZhbHVlLCBPcHRpb25zKSB7XHJcbiAgICAgICAgT3B0aW9ucyA9IE9wdGlvbnMgPyBPcHRpb25zIDoge307XHJcbiAgICAgICAgaWYgKE9wdGlvbnMuZXhwaXJlcyl7XHJcbiAgICAgICAgICAgIE9wdGlvbnMuZXhwaXJlcyA9IEx1cmUuRGF0ZShPcHRpb25zLmV4cGlyZXMpLkRhdGUudG9VVENTdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvb2tpZSA9IGAke05hbWV9PSR7VmFsdWV9YDtcclxuICAgICAgICBPcHRpb25zLnBhdGggPSBPcHRpb25zLnBhdGggIT09IHZvaWQgMCA/IE9wdGlvbnMucGF0aCA6ICcvJztcclxuICAgICAgICBmb3IgKGxldCBwIGluIE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKE9wdGlvbnMuaGFzT3duUHJvcGVydHkocCkpe1xyXG4gICAgICAgICAgICAgICAgY29va2llICs9IGA7ICR7cH0gPSAke09wdGlvbnNbcF0gIT09IHRydWUgPyBPcHRpb25zW3BdOiAnJ31gO1xyXG4gICAgICAgICAgICAgICAgLypsZXQgcHJvcFZhbHVlID0gT3B0aW9uc1twXTtcclxuICAgICAgICAgICAgICAgICBpZiAocHJvcFZhbHVlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgY29va2llICs9IFwiPVwiICsgcHJvcFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZTtcclxuICAgIH0sXHJcbiAgICBSZW1vdmU6IGZ1bmN0aW9uIChOYW1lLCBQYXRoPScvJykge1xyXG4gICAgICAgIEx1cmUuQ29va2llLlNldChOYW1lLCAnJywge1xyXG4gICAgICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZSgwKSxcclxuICAgICAgICAgICAgcGF0aDogUGF0aFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn07Il19
},{}],32:[function(require,module,exports){
"use strict";

module.exports = {
    /**
     *
     * @param input
     * @returns {{Start: number, End: number}}
     * @constructor
     */
    GetCursorPosition: function GetCursorPosition(input) {
        var Pos = {
            Start: -1,
            End: -1
        };
        if ("selectionStart" in input && document.activeElement === input) {
            Pos.Start = input.selectionStart;
            Pos.End = input.selectionEnd;
        } else if (input.createTextRange) {
            var Selection = document.selection.createRange();
            if (Selection.parentElement() === input) {
                var Range = input.createTextRange();
                Range.moveToBookmark(Selection.getBookmark());
                for (var len = 0; Range.compareEndPoints("EndToStart", Range) > 0; Range.moveEnd("character", -1)) {
                    len++;
                }
                Range.setEndPoint("StartToStart", input.createTextRange());
                while (Range.compareEndPoints("EndToStart", Range) > 0) {
                    Pos.Start++;
                    Pos.End++;
                    Range.moveEnd("character", -1);
                }
            }
        }
        return Pos;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJHZXRDdXJzb3JQb3NpdGlvbiIsImlucHV0IiwiUG9zIiwiU3RhcnQiLCJFbmQiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImNyZWF0ZVRleHRSYW5nZSIsIlNlbGVjdGlvbiIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwicGFyZW50RWxlbWVudCIsIlJhbmdlIiwibW92ZVRvQm9va21hcmsiLCJnZXRCb29rbWFyayIsImxlbiIsImNvbXBhcmVFbmRQb2ludHMiLCJtb3ZlRW5kIiwic2V0RW5kUG9pbnQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUI7QUFDYjs7Ozs7O0FBTUFDLHVCQUFtQiwyQkFBVUMsS0FBVixFQUFpQjtBQUNoQyxZQUFJQyxNQUFNO0FBQ05DLG1CQUFPLENBQUMsQ0FERjtBQUVOQyxpQkFBSyxDQUFDO0FBRkEsU0FBVjtBQUlBLFlBQUksb0JBQW9CSCxLQUFwQixJQUE2QkksU0FBU0MsYUFBVCxLQUEyQkwsS0FBNUQsRUFBbUU7QUFDL0RDLGdCQUFJQyxLQUFKLEdBQVlGLE1BQU1NLGNBQWxCO0FBQ0FMLGdCQUFJRSxHQUFKLEdBQVVILE1BQU1PLFlBQWhCO0FBQ0gsU0FIRCxNQUlLLElBQUlQLE1BQU1RLGVBQVYsRUFBMkI7QUFDNUIsZ0JBQUlDLFlBQVlMLFNBQVNNLFNBQVQsQ0FBbUJDLFdBQW5CLEVBQWhCO0FBQ0EsZ0JBQUlGLFVBQVVHLGFBQVYsT0FBOEJaLEtBQWxDLEVBQXlDO0FBQ3JDLG9CQUFJYSxRQUFRYixNQUFNUSxlQUFOLEVBQVo7QUFDQUssc0JBQU1DLGNBQU4sQ0FBcUJMLFVBQVVNLFdBQVYsRUFBckI7QUFDQSxxQkFBSyxJQUFJQyxNQUFNLENBQWYsRUFBa0JILE1BQU1JLGdCQUFOLENBQXVCLFlBQXZCLEVBQXFDSixLQUFyQyxJQUE4QyxDQUFoRSxFQUFtRUEsTUFBTUssT0FBTixDQUFjLFdBQWQsRUFBMkIsQ0FBQyxDQUE1QixDQUFuRSxFQUFtRztBQUMvRkY7QUFDSDtBQUNESCxzQkFBTU0sV0FBTixDQUFrQixjQUFsQixFQUFrQ25CLE1BQU1RLGVBQU4sRUFBbEM7QUFDQSx1QkFBT0ssTUFBTUksZ0JBQU4sQ0FBdUIsWUFBdkIsRUFBcUNKLEtBQXJDLElBQThDLENBQXJELEVBQXdEO0FBQ3BEWix3QkFBSUMsS0FBSjtBQUNBRCx3QkFBSUUsR0FBSjtBQUNBVSwwQkFBTUssT0FBTixDQUFjLFdBQWQsRUFBMkIsQ0FBQyxDQUE1QjtBQUNIO0FBQ0o7QUFDSjtBQUNELGVBQU9qQixHQUFQO0FBQ0g7QUFqQ1ksQ0FBakIiLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dFxyXG4gICAgICogQHJldHVybnMge3tTdGFydDogbnVtYmVyLCBFbmQ6IG51bWJlcn19XHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgR2V0Q3Vyc29yUG9zaXRpb246IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIGxldCBQb3MgPSB7XHJcbiAgICAgICAgICAgIFN0YXJ0OiAtMSxcclxuICAgICAgICAgICAgRW5kOiAtMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiBpbnB1dCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xyXG4gICAgICAgICAgICBQb3MuU3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25TdGFydDtcclxuICAgICAgICAgICAgUG9zLkVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5wdXQuY3JlYXRlVGV4dFJhbmdlKSB7XHJcbiAgICAgICAgICAgIGxldCBTZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKFNlbGVjdGlvbi5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgUmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIFJhbmdlLm1vdmVUb0Jvb2ttYXJrKFNlbGVjdGlvbi5nZXRCb29rbWFyaygpKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGxlbiA9IDA7IFJhbmdlLmNvbXBhcmVFbmRQb2ludHMoXCJFbmRUb1N0YXJ0XCIsIFJhbmdlKSA+IDA7IFJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgLTEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBSYW5nZS5zZXRFbmRQb2ludChcIlN0YXJ0VG9TdGFydFwiLCBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKSk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoUmFuZ2UuY29tcGFyZUVuZFBvaW50cyhcIkVuZFRvU3RhcnRcIiwgUmFuZ2UpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFBvcy5TdGFydCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIFBvcy5FbmQrKztcclxuICAgICAgICAgICAgICAgICAgICBSYW5nZS5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIC0xKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQb3M7XHJcbiAgICB9XHJcbn07Il19
},{}],33:[function(require,module,exports){
"use strict";

module.exports = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzTnVtZXJpYy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibiIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRmluaXRlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVNDLENBQVQsRUFBWTtBQUN6QixXQUFPLENBQUNDLE1BQU1DLFdBQVdGLENBQVgsQ0FBTixDQUFELElBQXlCRyxTQUFTSCxDQUFULENBQWhDO0FBQ0gsQ0FGRCIsImZpbGUiOiJpc051bWVyaWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG4pIHtcclxuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XHJcbn07Il19
},{}],34:[function(require,module,exports){
"use strict";

module.exports = function (Object) {
    return JSON.parse(JSON.stringify(Object)); //TODO to optimize cloning
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb25lLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsTUFBVixFQUFrQjtBQUMvQixXQUFPQyxLQUFLQyxLQUFMLENBQVdELEtBQUtFLFNBQUwsQ0FBZUgsTUFBZixDQUFYLENBQVAsQ0FEK0IsQ0FDYTtBQUMvQyxDQUZEIiwiZmlsZSI6ImNsb25lLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoT2JqZWN0KSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShPYmplY3QpKTsgIC8vVE9ETyB0byBvcHRpbWl6ZSBjbG9uaW5nXHJcbn07XHJcbiJdfQ==
},{}],35:[function(require,module,exports){
"use strict";

/**
 *
 * @param Obj1
 * @param Obj2
 * @param isStrict
 * @returns {boolean}
 */
var ObjectCompare = function ObjectCompare(Obj1, Obj2) {
    var isStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (!Obj1 || !Obj2) return false;
    var isEqual = true;
    if (Obj1 instanceof Array) {
        if (isStrict && Obj1.length != Obj2.length) {
            return false;
        }
        for (var i = 0; i < Obj1.length; i++) {
            if (Obj1[i] instanceof Object) {
                isEqual = ObjectCompare(Obj1[i], Obj2[i], isStrict);
                if (!isEqual) {
                    return false;
                }
                continue;
            }
            if (Obj1[i] !== Obj2[i]) {
                return false;
            }
        }
    } else if (Obj1 instanceof Object) {
        if (isStrict && Object.keys(Obj1).length !== Object.keys(Obj2).length) return false;
        for (var _i in Obj1) {
            if (Obj1[_i] instanceof Object) {
                isEqual = ObjectCompare(Obj1[_i], Obj2[_i], isStrict);
                if (!isEqual) {
                    return false;
                }
                continue;
            }
            if (Obj1[_i] !== Obj2[_i]) {
                return false;
            }
        }
    } else {
        return Obj1 === Obj2;
    }
    return isEqual;
};

module.exports = ObjectCompare;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBhcmUuanMiXSwibmFtZXMiOlsiT2JqZWN0Q29tcGFyZSIsIk9iajEiLCJPYmoyIiwiaXNTdHJpY3QiLCJpc0VxdWFsIiwiQXJyYXkiLCJsZW5ndGgiLCJpIiwiT2JqZWN0Iiwia2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFPQSxJQUFJQSxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFtQztBQUFBLFFBQWRDLFFBQWMsdUVBQUwsSUFBSzs7QUFDbkQsUUFBSSxDQUFDRixJQUFELElBQVMsQ0FBQ0MsSUFBZCxFQUNJLE9BQU8sS0FBUDtBQUNKLFFBQUlFLFVBQVUsSUFBZDtBQUNBLFFBQUlILGdCQUFnQkksS0FBcEIsRUFBMEI7QUFDdEIsWUFBSUYsWUFBWUYsS0FBS0ssTUFBTCxJQUFlSixLQUFLSSxNQUFwQyxFQUEyQztBQUN2QyxtQkFBTyxLQUFQO0FBQ0g7QUFDRCxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSU4sS0FBS0ssTUFBekIsRUFBaUNDLEdBQWpDLEVBQXFDO0FBQ2pDLGdCQUFJTixLQUFLTSxDQUFMLGFBQW1CQyxNQUF2QixFQUE4QjtBQUMxQkosMEJBQVVKLGNBQWNDLEtBQUtNLENBQUwsQ0FBZCxFQUF1QkwsS0FBS0ssQ0FBTCxDQUF2QixFQUFnQ0osUUFBaEMsQ0FBVjtBQUNBLG9CQUFJLENBQUNDLE9BQUwsRUFBYTtBQUNULDJCQUFPLEtBQVA7QUFDSDtBQUNEO0FBQ0g7QUFDRCxnQkFBSUgsS0FBS00sQ0FBTCxNQUFZTCxLQUFLSyxDQUFMLENBQWhCLEVBQXdCO0FBQ3BCLHVCQUFPLEtBQVA7QUFDSDtBQUNKO0FBQ0osS0FoQkQsTUFpQkssSUFBSU4sZ0JBQWdCTyxNQUFwQixFQUEyQjtBQUM1QixZQUFJTCxZQUFZSyxPQUFPQyxJQUFQLENBQVlSLElBQVosRUFBa0JLLE1BQWxCLEtBQTZCRSxPQUFPQyxJQUFQLENBQVlQLElBQVosRUFBa0JJLE1BQS9ELEVBQ0ksT0FBTyxLQUFQO0FBQ0osYUFBSyxJQUFJQyxFQUFULElBQWNOLElBQWQsRUFBbUI7QUFDZixnQkFBSUEsS0FBS00sRUFBTCxhQUFtQkMsTUFBdkIsRUFBOEI7QUFDMUJKLDBCQUFVSixjQUFjQyxLQUFLTSxFQUFMLENBQWQsRUFBdUJMLEtBQUtLLEVBQUwsQ0FBdkIsRUFBZ0NKLFFBQWhDLENBQVY7QUFDQSxvQkFBSSxDQUFDQyxPQUFMLEVBQWE7QUFDVCwyQkFBTyxLQUFQO0FBQ0g7QUFDRDtBQUNIO0FBQ0QsZ0JBQUlILEtBQUtNLEVBQUwsTUFBWUwsS0FBS0ssRUFBTCxDQUFoQixFQUF3QjtBQUNwQix1QkFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNKLEtBZkksTUFnQkE7QUFDRCxlQUFPTixTQUFTQyxJQUFoQjtBQUNIO0FBQ0QsV0FBT0UsT0FBUDtBQUNILENBekNEOztBQTJDQU0sT0FBT0MsT0FBUCxHQUFpQlgsYUFBakIiLCJmaWxlIjoiY29tcGFyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gT2JqMVxyXG4gKiBAcGFyYW0gT2JqMlxyXG4gKiBAcGFyYW0gaXNTdHJpY3RcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5sZXQgT2JqZWN0Q29tcGFyZSA9IGZ1bmN0aW9uKE9iajEsIE9iajIsIGlzU3RyaWN0PXRydWUpe1xyXG4gICAgaWYgKCFPYmoxIHx8ICFPYmoyKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGxldCBpc0VxdWFsID0gdHJ1ZTtcclxuICAgIGlmIChPYmoxIGluc3RhbmNlb2YgQXJyYXkpe1xyXG4gICAgICAgIGlmIChpc1N0cmljdCAmJiBPYmoxLmxlbmd0aCAhPSBPYmoyLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmoxLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgaWYgKE9iajFbaV0gaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG4gICAgICAgICAgICAgICAgaXNFcXVhbCA9IE9iamVjdENvbXBhcmUoT2JqMVtpXSwgT2JqMltpXSwgaXNTdHJpY3QpXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWwpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChPYmoxW2ldICE9PSBPYmoyW2ldKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKE9iajEgaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG4gICAgICAgIGlmIChpc1N0cmljdCAmJiBPYmplY3Qua2V5cyhPYmoxKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKE9iajIpLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gT2JqMSl7XHJcbiAgICAgICAgICAgIGlmIChPYmoxW2ldIGluc3RhbmNlb2YgT2JqZWN0KXtcclxuICAgICAgICAgICAgICAgIGlzRXF1YWwgPSBPYmplY3RDb21wYXJlKE9iajFbaV0sIE9iajJbaV0sIGlzU3RyaWN0KVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0VxdWFsKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoT2JqMVtpXSAhPT0gT2JqMltpXSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gT2JqMSA9PT0gT2JqMlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzRXF1YWw7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdENvbXBhcmU7Il19
},{}],36:[function(require,module,exports){
"use strict";

module.exports = function (ObjectCopyFrom, ObjectCopyTo) {
    for (var p in ObjectCopyFrom) {
        if (ObjectCopyFrom.hasOwnProperty(p)) {
            ObjectCopyTo[p] = ObjectCopyFrom[p];
        }
    }
    return Object;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcHkuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdENvcHlGcm9tIiwiT2JqZWN0Q29weVRvIiwicCIsImhhc093blByb3BlcnR5IiwiT2JqZWN0Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLGNBQVYsRUFBMEJDLFlBQTFCLEVBQXdDO0FBQ3JELFNBQUssSUFBSUMsQ0FBVCxJQUFjRixjQUFkLEVBQTZCO0FBQ3pCLFlBQUlBLGVBQWVHLGNBQWYsQ0FBOEJELENBQTlCLENBQUosRUFBcUM7QUFDakNELHlCQUFhQyxDQUFiLElBQWtCRixlQUFlRSxDQUFmLENBQWxCO0FBQ0g7QUFDSjtBQUNELFdBQU9FLE1BQVA7QUFDSCxDQVBEIiwiZmlsZSI6ImNvcHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPYmplY3RDb3B5RnJvbSwgT2JqZWN0Q29weVRvKSB7XHJcbiAgICBmb3IgKGxldCBwIGluIE9iamVjdENvcHlGcm9tKXtcclxuICAgICAgICBpZiAoT2JqZWN0Q29weUZyb20uaGFzT3duUHJvcGVydHkocCkpe1xyXG4gICAgICAgICAgICBPYmplY3RDb3B5VG9bcF0gPSBPYmplY3RDb3B5RnJvbVtwXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0O1xyXG59O1xyXG4iXX0=
},{}],37:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var RegexpProperty = new RegExp('\\[([^]]+)\\]', 'g');

var LureObject = {
    Clone: require('./clone.js'),
    Copy: require('./copy.js'),

    Compare: require('./compare.js'),
    GetProperty: function GetProperty(Obj, Prop) {
        if (Prop === '') return Obj;
        var Way = Prop.replace(RegexpProperty, '.$1');
        Way = Way.substring(0, 1) === '.' ? Way.substring(1) : Way;
        Way = Way.split('.');
        var i = 0;
        var Destination = Obj;
        for (i; i < Way.length - 1; i++) {
            Destination = Destination[Way[i]];
        }
        return Destination[Way[i]];
    },
    SetProperty: function SetProperty(Obj, Prop, Value) {
        if (Prop === '') {
            Obj = Value;
            return Obj;
        }
        var Way = Prop.replace(RegexpProperty, '.$1');
        Way = Way.substring(0, 1) === '.' ? Way.substring(1) : Way;
        Way = Way.split('.');
        var i = 0;
        var Destination = Obj;
        for (i; i < Way.length - 1; i++) {
            Destination = Destination[Way[i]];
        }
        Destination[Way[i]] = Value;
        return Obj;
    },
    isEmpty: function isEmpty(obj) {
        var isStrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (isStrict && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return false;
        return !(obj && Object.keys(obj).length > 0);
    }
};
module.exports = LureObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdC5qcyJdLCJuYW1lcyI6WyJSZWdleHBQcm9wZXJ0eSIsIlJlZ0V4cCIsIkx1cmVPYmplY3QiLCJDbG9uZSIsInJlcXVpcmUiLCJDb3B5IiwiQ29tcGFyZSIsIkdldFByb3BlcnR5IiwiT2JqIiwiUHJvcCIsIldheSIsInJlcGxhY2UiLCJzdWJzdHJpbmciLCJzcGxpdCIsImkiLCJEZXN0aW5hdGlvbiIsImxlbmd0aCIsIlNldFByb3BlcnR5IiwiVmFsdWUiLCJpc0VtcHR5Iiwib2JqIiwiaXNTdHJpY3QiLCJPYmplY3QiLCJrZXlzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGlCQUFpQixJQUFJQyxNQUFKLGtCQUE2QixHQUE3QixDQUFyQjs7QUFHQSxJQUFJQyxhQUFhO0FBQ2JDLFdBQU9DLFFBQVEsWUFBUixDQURNO0FBRWJDLFVBQU1ELFFBQVEsV0FBUixDQUZPOztBQUliRSxhQUFTRixRQUFRLGNBQVIsQ0FKSTtBQUtiRyxlQUxhLHVCQUtEQyxHQUxDLEVBS0lDLElBTEosRUFLVTtBQUNuQixZQUFJQSxTQUFTLEVBQWIsRUFDSSxPQUFPRCxHQUFQO0FBQ0osWUFBSUUsTUFBTUQsS0FBS0UsT0FBTCxDQUFhWCxjQUFiLEVBQTZCLEtBQTdCLENBQVY7QUFDQVUsY0FBTUEsSUFBSUUsU0FBSixDQUFjLENBQWQsRUFBZ0IsQ0FBaEIsTUFBdUIsR0FBdkIsR0FBNEJGLElBQUlFLFNBQUosQ0FBYyxDQUFkLENBQTVCLEdBQTZDRixHQUFuRDtBQUNBQSxjQUFNQSxJQUFJRyxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0EsWUFBSUMsSUFBSSxDQUFSO0FBQ0EsWUFBSUMsY0FBY1AsR0FBbEI7QUFDQSxhQUFLTSxDQUFMLEVBQVFBLElBQUlKLElBQUlNLE1BQUosR0FBVyxDQUF2QixFQUEwQkYsR0FBMUIsRUFBOEI7QUFDMUJDLDBCQUFjQSxZQUFZTCxJQUFJSSxDQUFKLENBQVosQ0FBZDtBQUNIO0FBQ0QsZUFBT0MsWUFBWUwsSUFBSUksQ0FBSixDQUFaLENBQVA7QUFDSCxLQWpCWTtBQWtCYkcsZUFsQmEsdUJBa0JEVCxHQWxCQyxFQWtCSUMsSUFsQkosRUFrQlVTLEtBbEJWLEVBa0JpQjtBQUMxQixZQUFJVCxTQUFTLEVBQWIsRUFBZ0I7QUFDWkQsa0JBQU1VLEtBQU47QUFDQSxtQkFBT1YsR0FBUDtBQUNIO0FBQ0QsWUFBSUUsTUFBTUQsS0FBS0UsT0FBTCxDQUFhWCxjQUFiLEVBQTZCLEtBQTdCLENBQVY7QUFDQVUsY0FBTUEsSUFBSUUsU0FBSixDQUFjLENBQWQsRUFBZ0IsQ0FBaEIsTUFBdUIsR0FBdkIsR0FBNEJGLElBQUlFLFNBQUosQ0FBYyxDQUFkLENBQTVCLEdBQTZDRixHQUFuRDtBQUNBQSxjQUFNQSxJQUFJRyxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0EsWUFBSUMsSUFBSSxDQUFSO0FBQ0EsWUFBSUMsY0FBY1AsR0FBbEI7QUFDQSxhQUFLTSxDQUFMLEVBQVFBLElBQUlKLElBQUlNLE1BQUosR0FBVyxDQUF2QixFQUEwQkYsR0FBMUIsRUFBOEI7QUFDMUJDLDBCQUFjQSxZQUFZTCxJQUFJSSxDQUFKLENBQVosQ0FBZDtBQUNIO0FBQ0RDLG9CQUFZTCxJQUFJSSxDQUFKLENBQVosSUFBc0JJLEtBQXRCO0FBQ0EsZUFBT1YsR0FBUDtBQUNILEtBakNZO0FBa0NiVyxXQWxDYSxtQkFrQ0xDLEdBbENLLEVBa0NpQjtBQUFBLFlBQWpCQyxRQUFpQix1RUFBTixLQUFNOztBQUMxQixZQUFJQSxZQUFZLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUEvQixFQUNJLE9BQU8sS0FBUDtBQUNKLGVBQU8sRUFBRUEsT0FBT0UsT0FBT0MsSUFBUCxDQUFZSCxHQUFaLEVBQWlCSixNQUFqQixHQUF3QixDQUFqQyxDQUFQO0FBQ0g7QUF0Q1ksQ0FBakI7QUF3Q0FRLE9BQU9DLE9BQVAsR0FBaUJ2QixVQUFqQiIsImZpbGUiOiJvYmplY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUmVnZXhwUHJvcGVydHkgPSBuZXcgUmVnRXhwKGBcXFxcWyhbXlxcXV0rKVxcXFxdYCwgJ2cnKTtcclxuXHJcblxyXG5sZXQgTHVyZU9iamVjdCA9IHtcclxuICAgIENsb25lOiByZXF1aXJlKCcuL2Nsb25lLmpzJyksXHJcbiAgICBDb3B5OiByZXF1aXJlKCcuL2NvcHkuanMnKSxcclxuXHJcbiAgICBDb21wYXJlOiByZXF1aXJlKCcuL2NvbXBhcmUuanMnKSxcclxuICAgIEdldFByb3BlcnR5KE9iaiwgUHJvcCkge1xyXG4gICAgICAgIGlmIChQcm9wID09PSAnJylcclxuICAgICAgICAgICAgcmV0dXJuIE9iajtcclxuICAgICAgICBsZXQgV2F5ID0gUHJvcC5yZXBsYWNlKFJlZ2V4cFByb3BlcnR5LCAnLiQxJyk7XHJcbiAgICAgICAgV2F5ID0gV2F5LnN1YnN0cmluZygwLDEpID09PSAnLic/IFdheS5zdWJzdHJpbmcoMSk6V2F5O1xyXG4gICAgICAgIFdheSA9IFdheS5zcGxpdCgnLicpO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBsZXQgRGVzdGluYXRpb24gPSBPYmo7XHJcbiAgICAgICAgZm9yIChpOyBpIDwgV2F5Lmxlbmd0aC0xOyBpKyspe1xyXG4gICAgICAgICAgICBEZXN0aW5hdGlvbiA9IERlc3RpbmF0aW9uW1dheVtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBEZXN0aW5hdGlvbltXYXlbaV1dO1xyXG4gICAgfSxcclxuICAgIFNldFByb3BlcnR5KE9iaiwgUHJvcCwgVmFsdWUpIHtcclxuICAgICAgICBpZiAoUHJvcCA9PT0gJycpe1xyXG4gICAgICAgICAgICBPYmogPSBWYWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIE9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IFdheSA9IFByb3AucmVwbGFjZShSZWdleHBQcm9wZXJ0eSwgJy4kMScpO1xyXG4gICAgICAgIFdheSA9IFdheS5zdWJzdHJpbmcoMCwxKSA9PT0gJy4nPyBXYXkuc3Vic3RyaW5nKDEpOldheTtcclxuICAgICAgICBXYXkgPSBXYXkuc3BsaXQoJy4nKTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgbGV0IERlc3RpbmF0aW9uID0gT2JqO1xyXG4gICAgICAgIGZvciAoaTsgaSA8IFdheS5sZW5ndGgtMTsgaSsrKXtcclxuICAgICAgICAgICAgRGVzdGluYXRpb24gPSBEZXN0aW5hdGlvbltXYXlbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBEZXN0aW5hdGlvbltXYXlbaV1dID0gVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIE9iajtcclxuICAgIH0sXHJcbiAgICBpc0VtcHR5KG9iaiwgaXNTdHJpY3QgPSBmYWxzZSl7XHJcbiAgICAgICAgaWYgKGlzU3RyaWN0ICYmIHR5cGVvZiBvYmogIT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuICEob2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoPjApO1xyXG4gICAgfVxyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IEx1cmVPYmplY3Q7XHJcbiJdfQ==
},{"./clone.js":34,"./compare.js":35,"./copy.js":36}],38:[function(require,module,exports){
'use strict';

var KeyBDKeys = {
    En: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"', '|', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?'],
    Ru: ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '.', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 'Э', '/', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', ',']
};

module.exports = {
    /**
     *
     * @param string
     * @returns {string}
     */
    Capitalize: function Capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    /**
     *
     * @param string
     * @param isHTML
     * @returns {*}
     */
    QuoteScreen: function QuoteScreen(string) {
        var isHTML = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (typeof string !== 'string') return string;
        if (isHTML) return string.replace(/"/g, '&quot;');else return string.replace(/"/g, '\"');
    },
    ReplaceAsync: function ReplaceAsync(string, regExp, callback) {
        string = String(string);
        var parts = [],
            i = 0;
        if (Object.prototype.toString.call(regExp) === "[object RegExp]") {
            if (regExp.global) regExp.lastIndex = i;
            var m = void 0;
            while (m = regExp.exec(string)) {
                var args = m.concat([m.index, m.input]);
                parts.push(string.slice(i, m.index), callback.apply(null, args));
                i = regExp.lastIndex;
                if (!regExp.global) break; // for non-global regexes only take the first match
                if (m[0].length === 0) regExp.lastIndex++;
            }
        } else {
            regExp = String(regExp);
            i = string.indexOf(regExp);
            parts.push(string.slice(0, i), callback.apply(null, [regExp, i, string]));
            i += regExp.length;
        }
        parts.push(string.slice(i));
        return Promise.all(parts).then(function (strings) {
            return strings.join("");
        });
    },


    /**
     *
     * @param {string} string
     * @param {string} LangFrom
     * @param {string} LangTo
     * @returns {string}
     */
    KeyboardSwitch: function KeyboardSwitch(string) {
        var LangFrom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Ru';
        var LangTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'En';

        LangFrom = Lure.String.Capitalize(LangFrom);
        LangTo = Lure.String.Capitalize(LangTo);
        var x = '';
        for (var i = 0; i < string.length; i++) {
            var Index = KeyBDKeys[LangFrom].indexOf(string[i]);
            x += Index >= 0 ? KeyBDKeys[LangTo][Index] : string[i];
        }
        return x;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],39:[function(require,module,exports){
'use strict';

//TODO Dialog counting

var DialogCore = require('./../Core/Dialog.js');
var Confirm = function Confirm() {
    var Caption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Achtung";
    var Message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$Error = _ref.Error,
        Error = _ref$Error === undefined ? false : _ref$Error,
        _ref$CaptionColor = _ref.CaptionColor,
        CaptionColor = _ref$CaptionColor === undefined ? '' : _ref$CaptionColor,
        _ref$CaptionBackgroun = _ref.CaptionBackground,
        CaptionBackground = _ref$CaptionBackgroun === undefined ? '' : _ref$CaptionBackgroun,
        _ref$ButtonAgreeText = _ref.ButtonAgreeText,
        ButtonAgreeText = _ref$ButtonAgreeText === undefined ? Lure.Culture.Lang.Ok : _ref$ButtonAgreeText,
        _ref$ButtonCancelText = _ref.ButtonCancelText,
        ButtonCancelText = _ref$ButtonCancelText === undefined ? Lure.Culture.Lang.Cancel : _ref$ButtonCancelText,
        _ref$OnAgree = _ref.OnAgree,
        OnAgree = _ref$OnAgree === undefined ? function () {} : _ref$OnAgree,
        _ref$OnCancel = _ref.OnCancel,
        OnCancel = _ref$OnCancel === undefined ? null : _ref$OnCancel;

    document.activeElement.blur();
    var zIndex = DialogCore.zIndex;

    var dialog = document.createElement('div');
    dialog.classList.add('lure-confirm');
    if (Lure.Settings.DialogAnimation) dialog.classList.add(Lure.Settings.DialogAnimation);
    //###title
    var title = document.createElement("div");
    title.classList.add('cd-caption');
    title.innerHTML = Caption;
    title.style.color = CaptionColor;
    title.style.background = CaptionBackground;
    dialog.appendChild(title);
    //###message field
    var msg = document.createElement("div");
    msg.classList.add('cd-text');
    msg.innerHTML = Message;
    dialog.appendChild(msg);
    //###buttonfield
    var buttons = document.createElement("div");
    buttons.classList.add("cd-buttons");
    dialog.appendChild(buttons);
    //###button confirm
    var btnOk = document.createElement("div");
    btnOk.classList.add("button", "cd-button", "btn-diag-confirm");
    btnOk.innerHTML = ButtonAgreeText;
    btnOk.onclick = function () {
        DialogCore.ConfirmCount--;
        if (OnAgree !== null && OnAgree !== undefined) OnAgree();
        if (Lure.Settings.Dialog.Blur && DialogCore.ConfirmCount < 1) Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.remove(Lure.Settings.Dialog.Blur);
        //$(Lure.Settings.DialogBlur).removeClass('lure-blur');
        DialogCore.Remove(dialog);
        wrap.remove();
        dialog.remove();
    };
    dialog.getElementsByClassName("cd-buttons")[0].appendChild(btnOk);
    //###button cancel
    if (OnCancel !== null) {
        var btnCancel = document.createElement("div");
        btnCancel.classList.add("button", "cd-button", "btn-diag-cancel");
        btnCancel.innerHTML = ButtonCancelText;
        btnCancel.onclick = function () {
            DialogCore.ConfirmCount--;
            if (OnCancel !== null) OnCancel();
            if (Lure.Settings.Dialog.Blur && DialogCore.ConfirmCount < 1) Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.remove(Lure.Settings.Dialog.Blur);
            DialogCore.Remove(dialog);
            wrap.remove();
            dialog.remove();
        };
        dialog.getElementsByClassName("cd-buttons")[0].appendChild(btnCancel);
    }
    //### Dialog-Wrapper
    var wrap = document.createElement("div");
    wrap.classList.add(Lure.Settings.Dialog.Wrapper);
    if (Lure.Settings.Confirm.Wrapper) wrap.classList.add(Lure.Settings.Confirm.Wrapper);
    wrap.style.zIndex = zIndex + 1;
    dialog.style.zIndex = zIndex + 2;

    DialogCore.Add(dialog);
    if (Lure.Settings.Confirm.Wrapper) document.body.appendChild(wrap);
    document.body.appendChild(dialog);
    DialogCore.ConfirmCount++;
    if (Lure.Settings.Dialog.Blur) {
        wrap.style.background = 'none';
        Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.add(Lure.Settings.Dialog.Blur);
    }
};

module.exports = Confirm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./../Core/Dialog.js":6}],40:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 *
 * @namespace Lure
 */
/**/

var KeyWords = ['Init', 'Props', 'Methods', 'SubContent', 'AfterBuild', 'BeforeShow', 'BeforeHide', '_Init'];
var LureContentBase = require('./ContentBase.js');
var LureApp = require('./../../Core/Application/Application.js');
var ContentStore = require('../../Core/Content/ContentStore.js');
var LureHtmlElement = require('../../Core/Compiler/HtmlElement.js');
var LureCompiler = require('../../Core/Compiler/Compiler.js');

var LurePropertySetter = require('./../../Core/PropertySetter.js');
function InitTarget(ctx, Target) {}

function PutToStorage(R) {
    ContentStore.List.push(this);
    if (!this.Parent) {
        ContentStore.Roots.push(this);
    }
    if (R.Name) {
        ContentStore.ByName[R.Name] = this;
    }
    if (R.Type) {
        ContentStore.ByType[R.Type] = this;
    } else {
        ContentStore.ByType['Untyped'] = this;
    }
}
function GetTarget(R) {
    var Target = R.Target;
    if (!Target && R.Parent) {
        Target = R.Parent.Content;
    }

    this.Target = R.Global ? Lure.Select(Target) : Lure.Select(Target, R.Parent);
    delete R.Target;
}

var LureContent = function (_LureContentBase) {
    _inherits(LureContent, _LureContentBase);

    _createClass(LureContent, [{
        key: '_Init',
        value: function _Init() {
            this.Settings = Lure.Clone(Lure.Settings.Content);
            console.log('init', this._R.Name, this._R);
            var Obj = this._R;
            Obj.Init.call(this);
            for (var k in Obj) {
                if (Obj.hasOwnProperty(k) && KeyWords.indexOf(k) < 0 && !this.hasOwnProperty(k)) {
                    var p = Object.getOwnPropertyDescriptor(Obj, k);
                    //console.log(k,typeof p.value, p);
                    Object.defineProperty(this, k, p);
                }
            }
            var CompiledTree = LureCompiler(this.Content);
            this._Render = new LureHtmlElement(CompiledTree);
            this.State = new LurePropertySetter(this.State, {
                OnSet: function OnSet() {
                    console.info('state');
                }
            });
            this._Init = void 0;
        }
    }], [{
        key: 'Store',
        get: function get() {
            return ContentStore;
        }
    }, {
        key: 'Version',
        get: function get() {
            return '3.0.0';
        }
    }]);

    function LureContent(R) {
        _classCallCheck(this, LureContent);

        var _this = _possibleConstructorReturn(this, (LureContent.__proto__ || Object.getPrototypeOf(LureContent)).call(this));

        if (R.Disabled) return _possibleConstructorReturn(_this);
        _this._R = R;
        _this.ID = Lure.GetID();

        //Lure._Core.Content.Initializer.SetDefaultR(R);


        _this.isActive = true;
        //this.isGlobal  = R.Global;

        _this._isRoot = true;

        _this._SubContent = {};
        _this._SubContentList = [];

        _this.Parent = R.Parent;

        PutToStorage.call(_this, R);
        if (LureApp.isRun && _this._Init) {
            _this._Init();
        }
        return _this;
    }

    return LureContent;
}(LureContentBase);

module.exports = LureContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../Core/Compiler/Compiler.js":2,"../../Core/Compiler/HtmlElement.js":3,"../../Core/Content/ContentStore.js":5,"./../../Core/Application/Application.js":1,"./../../Core/PropertySetter.js":7,"./ContentBase.js":41}],41:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LureContentBase = function () {
    function LureContentBase() {
        _classCallCheck(this, LureContentBase);
    }

    _createClass(LureContentBase, [{
        key: '_Show',
        value: function _Show(e) {}
    }, {
        key: '_Shower',
        value: function _Shower() {
            this.Content.style.display = '';
        }
    }, {
        key: '_Hide',
        value: function _Hide(e) {}
    }, {
        key: '_Hider',
        value: function _Hider() {
            this.Content.style.display = 'none';
        }
    }, {
        key: 'Show',
        value: function Show(e) {
            this._Show(e);
        }
    }, {
        key: 'Hide',
        value: function Hide(e) {
            this._Hide(e);
        }
    }, {
        key: 'Toggle',
        value: function Toggle(e) {
            if (this.isActive) return this._Hide(e);
            this._Show(e);
        }
    }, {
        key: 'GetProperty',
        value: function GetProperty(Path) {
            return Lure.GetProperty(this._Data, Path);
        }
    }, {
        key: 'AddEventListener',
        value: function AddEventListener(eventName, selector, func) {
            Lure.AddEventListenerGlobal(eventName, selector, func, this.Content, this);
        }
    }, {
        key: 'Select',
        value: function Select(query) {
            return Lure.Select(query, this.Content);
        }
    }, {
        key: 'SelectAll',
        value: function SelectAll(query) {
            return Lure.SelectAll(query, this.Content);
        }
    }, {
        key: 'Refresh',
        value: function Refresh() {
            if (this.Proto) this.Proto.Refresh();
            if (this.Controller) this.Controller.Refresh(data);
        }
        /*controller*/

    }, {
        key: 'Add',
        value: function Add(Item, isPrepend) {
            if (this.Controller) return this.Controller.Add(Item, isPrepend);
        }
    }, {
        key: 'Remove',
        value: function Remove(Thing) {
            if (this.Controller) return this.Controller.Remove(Thing);
        }
    }, {
        key: 'GetIndex',
        value: function GetIndex(HTMLElement) {
            HTMLElement = this.Select(HTMLElement);
            return Array.prototype.slice.call(HTMLElement.parentElement.children).indexOf(HTMLElement);
        }
    }, {
        key: 'AddTutor',
        value: function AddTutor(buttonTutorStarter) {
            this.MonsieurTutor = new MonsieurTutor(this.Select(buttonTutorStarter), this.Content);
        }
    }, {
        key: 'GetParent',
        value: function GetParent() {
            var Name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';

            var content = this;
            while (content.Parent !== null && content.Name !== Name) {
                content = content.Parent;
            }return content;
        }
    }, {
        key: 'GetContent',
        value: function GetContent() {
            var Name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';

            var parent = this.GetParent(Name);
            if (parent.Name === Name || Name === 'root') return parent;
            var found = null;
            if (Name === 'root') return found;
            function searcher(content) {
                //let f = null;
                for (var key in content) {
                    if (content.hasOwnProperty(key) && key !== "Parent" && !!content[key] && content[key].isContent) {
                        if (content[key].Name === Name) return content[key];
                        found = searcher(content[key]);
                    }
                }
                return found;
            }
            return searcher(parent);
        }
    }, {
        key: 'isAncestor',
        value: function isAncestor(LureContent) {
            if (!LureContent) return false;
            var p = LureContent.Parent;
            while (p) {
                if (p === this) {
                    return true;
                }
                p = p.Parent;
            }
            return false;
        }
    }, {
        key: 'isDescendant',
        value: function isDescendant(LureContent) {
            if (!LureContent) return false;
            var p = this.Parent;
            while (p) {
                if (p === LureContent) {
                    return true;
                }
                p = p.Parent;
            }
            return false;
        }
    }, {
        key: 'GetSubContentList',
        value: function GetSubContentList() {
            var cts = [];

            for (var s in this) {
                if (this.hasOwnProperty(s) && this[s] && this[s].isContent) {
                    cts.push(this[s]);
                }
            }
            return cts;
        }
    }, {
        key: 'HasElementWritePermission',
        value: function HasElementWritePermission(Element, Data) {
            if (!Element.attributes[this.Settings.Permission.Attribute]) {
                Element = Element.closest('[' + this.Settings.Permission.Attribute + ']');
            }
            if (Element === null) return true;
            var Rule = Element.attributes[this.Settings.Permission.Attribute].value.toLowerCase();
            if (this.Settings.Permission.Rules[Rule]) {
                return this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Write, Data);
            }
            return true;
        }
    }, {
        key: 'isContent',
        get: function get() {
            return true;
        }
    }, {
        key: 'FullName',
        get: function get() {
            var p = this.Parent;
            var Name = this.Name;
            while (p) {
                Name = p.Name + '.' + Name;
                p = p.Parent;
            }
            return Name;
        }
    }, {
        key: 'isVisible',
        get: function get() {
            return Lure.isVisible(this.Content);
        }
    }, {
        key: 'Data',
        get: function get() {
            if (this.Controller) return this.Controller.Data;
            if (this.Proto) return this.Proto.Data;
            return null;
        },
        set: function set(data) {
            if (this.Controller) {
                this.Controller.Data = data;
                return;
            }
            if (this.Proto) {
                this.Proto.Data = data;
            }
        }
    }, {
        key: 'HasPermission',
        get: function get() {
            if (!this._Permission) return true;
            return this._Permission.isAllow;
        }
    }, {
        key: 'HasPermissionWrite',
        get: function get() {
            if (!this._Permission) return true;
            return this._Permission.isAllowWrite;
        }
    }, {
        key: '_PermissionRules',
        get: function get() {
            var p = this;
            while (p) {
                if (p._Permission) return p._Permission;
                p = p.Parent;
            }
        }
    }], [{
        key: 'Version',
        get: function get() {
            return '0.1.4';
        }
    }]);

    return LureContentBase;
}();

module.exports = LureContentBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],42:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LureDate = function () {
    _createClass(LureDate, [{
        key: 'Format',
        value: function Format() {
            var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Lure.Culture.DateFormatFull;
            var isBandMonthName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            return Lure.Date.Format(this._Date, format, isBandMonthName);
        }
    }, {
        key: 'AddSeconds',
        value: function AddSeconds(Count) {
            this._Date.setSeconds(this._Date.getSeconds() + Count);
            return this;
        }
    }, {
        key: 'AddMinutes',
        value: function AddMinutes(Count) {
            this._Date.setMinutes(this._Date.getMinutes() + Count);
            return this;
        }
    }, {
        key: 'AddHours',
        value: function AddHours(Count) {
            this._Date.setHours(this._Date.getHours() + Count);
            return this;
        }
    }, {
        key: 'AddDays',
        value: function AddDays(Count) {
            //const dat = new Date(this._Date.valueOf());
            this._Date.setDate(this._Date.getDate() + Count);
            return this;
        }
    }, {
        key: 'AddMonths',
        value: function AddMonths(Count) {
            this._Date.setMonth(this._Date.getMonth() + Count);
            return this;
        }
    }, {
        key: 'CountDays',
        get: function get() {
            var month = this._Date.getMonth();
            var year = this._Date.getFullYear();
            return new Date(year, month + 1, 0).getDate();
        }
    }, {
        key: 'DayStart',
        get: function get() {
            var d = new Date(this._Date.getTime());
            d.setHours(0, 0, 0, 0);
            return d;
        }
    }, {
        key: 'DayEnd',
        get: function get() {
            var d = new Date(this._Date.getTime());
            d.setHours(23, 59, 59, 997);
            return d;
        }
    }, {
        key: 'MonthStart',
        get: function get() {
            var d = new Date(this._Date.getTime());
            d.setDate(1);
            d.setHours(0, 0, 0, 0);
            return d;
        }
    }, {
        key: 'MonthEnd',
        get: function get() {
            var d = new Date(this._Date.getTime());
            d.setDate(Lure.Date(d).CountDays);
            d.setHours(23, 59, 59, 997);
            return d;
        }
    }, {
        key: 'WeekStart',
        get: function get() {
            var wd = this._Date.getDay();
            wd = wd !== 0 ? wd - 1 : 6; //monday as first weekday
            return this.AddDays(-wd).DayStart;
        }
    }, {
        key: 'WeekEnd',
        get: function get() {
            var wd = this._Date.getDay();
            wd = wd !== 0 ? wd - 1 : 6; //monday as first weekday
            return this.AddDays(6 - wd).DayEnd;
        }
    }, {
        key: 'Date',
        get: function get() {
            return this._Date;
        }
    }, {
        key: 'Int',
        get: function get() {
            return this._Date.valueOf();
        }
    }, {
        key: 'Value',
        get: function get() {
            return this._Date.valueOf();
        }
    }, {
        key: 'DateCs',
        get: function get() {
            return '\/Date(' + +this.Value + this.Format('Z') + ')\/';
        }
    }, {
        key: 'Day',
        get: function get() {
            return this._Date.getDate();
        }
    }, {
        key: 'DayOfWeek',
        get: function get() {
            return this._Date.getDay();
        }
    }, {
        key: 'Month',
        get: function get() {
            return this._Date.getMonth();
        }
    }, {
        key: 'Year',
        get: function get() {
            return this._Date.getFullYear();
        }
    }, {
        key: 'isToday',
        get: function get() {
            return this.isCurrentDay;
        }
    }, {
        key: 'isCurrentDay',
        get: function get() {
            var today = new Date();

            var day = this._Date.getDate();
            var month = this._Date.getMonth();
            var year = this._Date.getFullYear();

            return day === today.getDate() && month === today.getMonth() && year === today.getFullYear();
        }
    }, {
        key: 'isCurrentMonth',
        get: function get() {
            var month = this._Date.getMonth();
            var year = this._Date.getFullYear();
            var today = new Date();
            return month === today.getMonth() && year === today.getFullYear();
        }
    }]);

    function LureDate(date, format) {
        _classCallCheck(this, LureDate);

        if (date === null || typeof date === 'undefined') {
            Lure.System.ShowError('[Lure.Date] Input Date is undefined or null');
            console.error(new Error('[Lure.Date] Input Date is undefined or null'));
            return null;
        }
        if (date instanceof Date) {
            this._Date = new Date(date.valueOf());
        } else if (date instanceof LureDate) {
            this._Date = date._Date;
        } else if (Lure.isNumeric(date) && !format) {
            this._Date = new Date(parseInt(date));
        } else {
            var Dags = 'DDMMYYYYHHmmss';
            var Legacy = [];
            format = format ? format : Lure.Culture.DateFormatFull;
            var rgx = format.replace(/[DMYHms]+/g, function (match, index) {
                Legacy.push(match.substring(0, 1));
                if (Dags.indexOf(match) > -1) {
                    var len = match.length < 2 ? '0,2' : match.length;
                    if (match === 'Y') len = '2,4';
                    return '(\\d{' + len + '})?';
                }
            }).replace(/[.-/ :;]/g, function (match) {
                return match + '?';
            });
            var C = {
                Y: 0,
                M: 0,
                D: 1,
                H: 0,
                m: 0,
                s: 0
            };
            var ErrorSum = 0;
            date.replace(new RegExp(rgx), function (match, a, b, c, d, e, f, g, h) {
                var x = [a, b, c, d, e, f, g, h];
                for (var i = 0; i < Legacy.length; i++) {
                    C[Legacy[i]] = x[i] ? x[i] : C[Legacy[i]];
                    if (x[i] === '' || x[i] === '0') {
                        ErrorSum++;
                    }
                }
            });
            if (!C.Y) ErrorSum++;
            if (!C.M && (C.D || C.H || C.m || C.s)) ErrorSum++;
            if (C.M > 12 || C.H > 23 || C.m > 59 || C.s > 59) ErrorSum++;

            this._Date = new Date(C.Y, C.M - 1, C.D, C.H, C.m, C.s);
            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0) {
                var matchCS = date.match(/Date\(([\d]+)(\+\d{4})\)/);
                if (matchCS) {
                    this._Date = new Date(parseInt(matchCS[1]));
                }
                ErrorSum = 0;
            }
            //return;
            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0) {
                this._Date = new Date(date);
            }
            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0) {
                Lure.System.ShowError('[Lure.Data] Can not parse properly input Data');
                console.error('[Lure.Data] Parse Error. Can not parse properly input Data "' + date + '"');
            }
            // console.log(Legacy, rgx, C,ErrorSum);
        }
    }

    return LureDate;
}();

;
var LDate = function LDate() {
    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
    var format = arguments[1];

    return new LureDate(date, format);
};
//something like static methods
LDate.Format = function (date) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "DD.MM.YYYY HH:mm:ss";
    var isBandMonthName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    //let date = this._Date;
    if (date === null || typeof date === 'undefined') return '';
    var day = date.getDay();
    day = day !== 0 ? day - 1 : 7; //monday as first weekday
    var data = date.getDate();
    var mo = date.getMonth() + 1;
    var year = date.getFullYear();
    var hour = date.getHours();
    var min = date.getMinutes();
    var sec = date.getSeconds();
    var Z = date.getTimezoneOffset() / -0.6;
    var ZzeroCount = 4 - Z.toString().length;
    if (ZzeroCount > 0) Z = '0'.repeat(ZzeroCount) + Z;
    format = format.replace(/[DdMmYyHhSsZz]/g, '%$&');

    return format.replace(/%D%D/g, data.toString().length < 2 ? '0' + data : data).replace(/%D/g, data).replace(/%d%d%d%d/g, Lure.Culture.WeekDays[day]).replace(/%d%d%d/g, Lure.Culture.WeekDaysShort[day]).replace(/%M%M%M%M/g, isBandMonthName ? Lure.Culture.MonthNamesBanded[mo - 1] : Lure.Culture.MonthNames[mo - 1]).replace(/%M%M%M/g, Lure.Culture.MonthNamesShort[mo - 1]).replace(/%M%M/g, mo.toString().length < 2 ? '0' + mo : mo).replace(/%M/g, mo).replace(/%Y%Y%Y%Y/g, year).replace(/%Y%Y/g, year.toString().substring(2, 4)).replace(/%Y/g, year).replace(/%H%H/g, hour.toString().length < 2 ? '0' + hour : hour).replace(/%h%h/g, (hour % 12).toString().length < 2 ? '0' + hour % 12 : hour % 12).replace(/%H/g, hour).replace(/%h/g, hour % 12).replace(/%m%m/g, min.toString().length < 2 ? '0' + min : min).replace(/%m/g, min).replace(/%s%s/g, sec.toString().length < 2 ? '0' + sec : sec).replace(/%s/g, sec).replace(/%Z/g, '+' + Z);
};
LDate.isDateValid = function (date) {
    return Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date.getTime());
};

module.exports = LDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRhdGUuanMiXSwibmFtZXMiOlsiTHVyZURhdGUiLCJmb3JtYXQiLCJMdXJlIiwiQ3VsdHVyZSIsIkRhdGVGb3JtYXRGdWxsIiwiaXNCYW5kTW9udGhOYW1lIiwiRGF0ZSIsIkZvcm1hdCIsIl9EYXRlIiwiQ291bnQiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic2V0SG91cnMiLCJnZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwic2V0TW9udGgiLCJnZXRNb250aCIsIm1vbnRoIiwieWVhciIsImdldEZ1bGxZZWFyIiwiZCIsImdldFRpbWUiLCJDb3VudERheXMiLCJ3ZCIsImdldERheSIsIkFkZERheXMiLCJEYXlTdGFydCIsIkRheUVuZCIsInZhbHVlT2YiLCJWYWx1ZSIsImlzQ3VycmVudERheSIsInRvZGF5IiwiZGF5IiwiZGF0ZSIsIlN5c3RlbSIsIlNob3dFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsIkVycm9yIiwiaXNOdW1lcmljIiwicGFyc2VJbnQiLCJEYWdzIiwiTGVnYWN5Iiwicmd4IiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZXgiLCJwdXNoIiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsImxlbiIsImxlbmd0aCIsIkMiLCJZIiwiTSIsIkQiLCJIIiwibSIsInMiLCJFcnJvclN1bSIsIlJlZ0V4cCIsImEiLCJiIiwiYyIsImUiLCJmIiwiZyIsImgiLCJ4IiwiaSIsImlzRGF0ZVZhbGlkIiwibWF0Y2hDUyIsIkxEYXRlIiwiZGF0YSIsIm1vIiwiaG91ciIsIm1pbiIsInNlYyIsIloiLCJnZXRUaW1lem9uZU9mZnNldCIsIlp6ZXJvQ291bnQiLCJ0b1N0cmluZyIsInJlcGVhdCIsIldlZWtEYXlzIiwiV2Vla0RheXNTaG9ydCIsIk1vbnRoTmFtZXNCYW5kZWQiLCJNb250aE5hbWVzIiwiTW9udGhOYW1lc1Nob3J0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsImlzTmFOIiwibW9k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Q0FBMEJTLElBQTFCLENBQStCekQsSUFBL0IsTUFBeUMsZUFBekMsSUFBNEQsQ0FBQzBELE1BQU8xRCxLQUFLWixPQUFMLEVBQVAsQ0FBckU7QUFDSCxDQUZEOztBQUlBdUUsT0FBT0MsT0FBUCxHQUFpQnJCLEtBQWpCIiwiZmlsZSI6IkRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBMdXJlRGF0ZSB7XHJcbiAgICBGb3JtYXQoIGZvcm1hdCA9IEx1cmUuQ3VsdHVyZS5EYXRlRm9ybWF0RnVsbCwgaXNCYW5kTW9udGhOYW1lID0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gTHVyZS5EYXRlLkZvcm1hdCh0aGlzLl9EYXRlLCBmb3JtYXQsIGlzQmFuZE1vbnRoTmFtZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgQ291bnREYXlzKCl7XHJcbiAgICAgICAgbGV0IG1vbnRoID0gdGhpcy5fRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgIGxldCB5ZWFyID0gdGhpcy5fRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCsxLCAwKS5nZXREYXRlKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgRGF5U3RhcnQoKXtcclxuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKHRoaXMuX0RhdGUuZ2V0VGltZSgpKTtcclxuICAgICAgICBkLnNldEhvdXJzKDAsMCwwLDApO1xyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG4gICAgZ2V0IERheUVuZCgpe1xyXG4gICAgICAgIGxldCBkID0gbmV3IERhdGUodGhpcy5fRGF0ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIGQuc2V0SG91cnMoMjMsNTksNTksOTk3KTtcclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuICAgIGdldCBNb250aFN0YXJ0KCl7XHJcbiAgICAgICAgbGV0IGQgPSBuZXcgRGF0ZSh0aGlzLl9EYXRlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgZC5zZXREYXRlKDEpO1xyXG4gICAgICAgIGQuc2V0SG91cnMoMCwwLDAsMCk7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcbiAgICBnZXQgTW9udGhFbmQoKXtcclxuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKHRoaXMuX0RhdGUuZ2V0VGltZSgpKTtcclxuICAgICAgICBkLnNldERhdGUoTHVyZS5EYXRlKGQpLkNvdW50RGF5cyApO1xyXG4gICAgICAgIGQuc2V0SG91cnMoMjMsNTksNTksOTk3KTtcclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuICAgIGdldCBXZWVrU3RhcnQoKXtcclxuICAgICAgICBsZXQgd2QgPSB0aGlzLl9EYXRlLmdldERheSgpO1xyXG4gICAgICAgIHdkID0gd2QgIT09IDAgPyB3ZC0xOiA2OyAvL21vbmRheSBhcyBmaXJzdCB3ZWVrZGF5XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQWRkRGF5cygtd2QpLkRheVN0YXJ0XHJcblxyXG4gICAgfVxyXG4gICAgZ2V0IFdlZWtFbmQoKXtcclxuICAgICAgICBsZXQgd2QgPSB0aGlzLl9EYXRlLmdldERheSgpO1xyXG4gICAgICAgIHdkID0gd2QgIT09IDAgPyB3ZC0xOiA2OyAvL21vbmRheSBhcyBmaXJzdCB3ZWVrZGF5XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQWRkRGF5cyg2LXdkKS5EYXlFbmRcclxuICAgIH1cclxuICAgIEFkZFNlY29uZHMoQ291bnQpe1xyXG4gICAgICAgIHRoaXMuX0RhdGUuc2V0U2Vjb25kcyh0aGlzLl9EYXRlLmdldFNlY29uZHMoKSArIENvdW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIEFkZE1pbnV0ZXMoQ291bnQpe1xyXG4gICAgICAgIHRoaXMuX0RhdGUuc2V0TWludXRlcyh0aGlzLl9EYXRlLmdldE1pbnV0ZXMoKSArIENvdW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIEFkZEhvdXJzKENvdW50KXtcclxuICAgICAgICB0aGlzLl9EYXRlLnNldEhvdXJzKHRoaXMuX0RhdGUuZ2V0SG91cnMoKSArIENvdW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIEFkZERheXMoQ291bnQpe1xyXG4gICAgICAgIC8vY29uc3QgZGF0ID0gbmV3IERhdGUodGhpcy5fRGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgICAgIHRoaXMuX0RhdGUuc2V0RGF0ZSh0aGlzLl9EYXRlLmdldERhdGUoKSArIENvdW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIEFkZE1vbnRocyhDb3VudCl7XHJcbiAgICAgICAgdGhpcy5fRGF0ZS5zZXRNb250aCh0aGlzLl9EYXRlLmdldE1vbnRoKCkgKyBDb3VudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBnZXQgRGF0ZSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9EYXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IEludCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9EYXRlLnZhbHVlT2YoKVxyXG4gICAgfVxyXG4gICAgZ2V0IFZhbHVlKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX0RhdGUudmFsdWVPZigpXHJcbiAgICB9XHJcbiAgICBnZXQgRGF0ZUNzKCl7XHJcbiAgICAgICAgcmV0dXJuICdcXC9EYXRlKCcgKyAoK3RoaXMuVmFsdWUpICsgdGhpcy5Gb3JtYXQoJ1onKSArICcpXFwvJ1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBEYXkoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fRGF0ZS5nZXREYXRlKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgRGF5T2ZXZWVrKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX0RhdGUuZ2V0RGF5KCk7XHJcbiAgICB9XHJcbiAgICBnZXQgTW9udGgoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0IFllYXIoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgaXNUb2RheSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQ3VycmVudERheVxyXG4gICAgfVxyXG4gICAgZ2V0IGlzQ3VycmVudERheSgpe1xyXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF5ICAgPSB0aGlzLl9EYXRlLmdldERhdGUoKTtcclxuICAgICAgICBjb25zdCBtb250aCA9IHRoaXMuX0RhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICBjb25zdCB5ZWFyICA9IHRoaXMuX0RhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChkYXkgPT09IHRvZGF5LmdldERhdGUoKSAmJiBtb250aCA9PT0gdG9kYXkuZ2V0TW9udGgoKSAmJiB5ZWFyID09PSB0b2RheS5nZXRGdWxsWWVhcigpKVxyXG4gICAgfVxyXG4gICAgZ2V0IGlzQ3VycmVudE1vbnRoKCl7XHJcbiAgICAgICAgY29uc3QgbW9udGggPSB0aGlzLl9EYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgY29uc3QgeWVhciA9ICB0aGlzLl9EYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHJldHVybiAobW9udGggPT09IHRvZGF5LmdldE1vbnRoKCkgJiYgeWVhciA9PT0gdG9kYXkuZ2V0RnVsbFllYXIoKSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRlLCBmb3JtYXQpe1xyXG4gICAgICAgIGlmIChkYXRlID09PSBudWxsIHx8IHR5cGVvZiBkYXRlID09PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgIEx1cmUuU3lzdGVtLlNob3dFcnJvcignW0x1cmUuRGF0ZV0gSW5wdXQgRGF0ZSBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcignW0x1cmUuRGF0ZV0gSW5wdXQgRGF0ZSBpcyB1bmRlZmluZWQgb3IgbnVsbCcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpe1xyXG4gICAgICAgICAgICB0aGlzLl9EYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRlIGluc3RhbmNlb2YgTHVyZURhdGUpe1xyXG4gICAgICAgICAgICB0aGlzLl9EYXRlID0gZGF0ZS5fRGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoTHVyZS5pc051bWVyaWMoZGF0ZSkgJiYgIWZvcm1hdCl7XHJcbiAgICAgICAgICAgIHRoaXMuX0RhdGUgPSBuZXcgRGF0ZShwYXJzZUludChkYXRlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNvbnN0IERhZ3MgPSAnRERNTVlZWVlISG1tc3MnO1xyXG4gICAgICAgICAgICBsZXQgTGVnYWN5ID0gW107XHJcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCA/IGZvcm1hdCA6IEx1cmUuQ3VsdHVyZS5EYXRlRm9ybWF0RnVsbDtcclxuICAgICAgICAgICAgY29uc3Qgcmd4ID0gZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW0RNWUhtc10rL2csZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExlZ2FjeS5wdXNoKG1hdGNoLnN1YnN0cmluZygwLDEpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoRGFncy5pbmRleE9mKG1hdGNoKSA+IC0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlbiA9IG1hdGNoLmxlbmd0aCA8IDIgPyBgMCwyYDptYXRjaC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gJ1knKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gJzIsNCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgKFxcXFxkeyR7bGVufX0pP2A7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bLi0vIDo7XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2grJz8nO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBDID0ge1xyXG4gICAgICAgICAgICAgICAgWTowLFxyXG4gICAgICAgICAgICAgICAgTTowLFxyXG4gICAgICAgICAgICAgICAgRDoxLFxyXG4gICAgICAgICAgICAgICAgSDowLFxyXG4gICAgICAgICAgICAgICAgbTowLFxyXG4gICAgICAgICAgICAgICAgczowLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgRXJyb3JTdW0gPSAwO1xyXG4gICAgICAgICAgICBkYXRlLnJlcGxhY2UobmV3IFJlZ0V4cChyZ3gpLCBmdW5jdGlvbihtYXRjaCwgYSxiLGMsZCxlLGYsZyxoKXtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gW2EsYixjLGQsZSxmLGcsaF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IExlZ2FjeS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgQ1tMZWdhY3lbaV1dID0geFtpXT8geFtpXTogQ1tMZWdhY3lbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4W2ldID09PSAnJyB8fCB4W2ldID09PSAnMCcpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFcnJvclN1bSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIUMuWSlcclxuICAgICAgICAgICAgICAgIEVycm9yU3VtKys7XHJcbiAgICAgICAgICAgIGlmICgoIUMuTSkgJiYgKEMuRCB8fCBDLkggfHwgQy5tIHx8IEMucykpXHJcbiAgICAgICAgICAgICAgICBFcnJvclN1bSsrO1xyXG4gICAgICAgICAgICBpZiAoQy5NPjEyIHx8IEMuSCA+IDIzIHx8IEMubT41OSB8fCBDLnM+NTkpXHJcbiAgICAgICAgICAgICAgICBFcnJvclN1bSsrO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fRGF0ZSA9IG5ldyBEYXRlKEMuWSwgQy5NLTEsQy5ELEMuSCwgQy5tLCBDLnMpO1xyXG4gICAgICAgICAgICBpZiAoIUx1cmUuRGF0ZS5pc0RhdGVWYWxpZCh0aGlzLl9EYXRlKSB8fCBFcnJvclN1bSA+IDApe1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoQ1MgPSBkYXRlLm1hdGNoKC9EYXRlXFwoKFtcXGRdKykoXFwrXFxkezR9KVxcKS8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoQ1Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX0RhdGUgPSBuZXcgRGF0ZShwYXJzZUludChtYXRjaENTWzFdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBFcnJvclN1bSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9yZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghTHVyZS5EYXRlLmlzRGF0ZVZhbGlkKHRoaXMuX0RhdGUpIHx8IEVycm9yU3VtID4gMCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9EYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFMdXJlLkRhdGUuaXNEYXRlVmFsaWQodGhpcy5fRGF0ZSkgfHwgRXJyb3JTdW0gPiAwKXtcclxuICAgICAgICAgICAgICAgIEx1cmUuU3lzdGVtLlNob3dFcnJvcignW0x1cmUuRGF0YV0gQ2FuIG5vdCBwYXJzZSBwcm9wZXJseSBpbnB1dCBEYXRhJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbTHVyZS5EYXRhXSBQYXJzZSBFcnJvci4gQ2FuIG5vdCBwYXJzZSBwcm9wZXJseSBpbnB1dCBEYXRhIFwiJHtkYXRlfVwiYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coTGVnYWN5LCByZ3gsIEMsRXJyb3JTdW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn07XHJcbmxldCBMRGF0ZSA9IChkYXRlPW5ldyBEYXRlKCksIGZvcm1hdCk9PntcclxuICAgIHJldHVybiBuZXcgTHVyZURhdGUoZGF0ZSwgZm9ybWF0KTtcclxufTtcclxuLy9zb21ldGhpbmcgbGlrZSBzdGF0aWMgbWV0aG9kc1xyXG5MRGF0ZS5Gb3JtYXQgPSAoZGF0ZSwgIGZvcm1hdCA9IFwiREQuTU0uWVlZWSBISDptbTpzc1wiLCBpc0JhbmRNb250aE5hbWUgPSBmYWxzZSk9PntcclxuICAgIC8vbGV0IGRhdGUgPSB0aGlzLl9EYXRlO1xyXG4gICAgaWYgKGRhdGUgPT09IG51bGwgfHwgdHlwZW9mIGRhdGUgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIGxldCBkYXkgID0gZGF0ZS5nZXREYXkoKTtcclxuICAgIGRheSA9IGRheSAhPT0gMCA/IGRheS0xOiA3OyAvL21vbmRheSBhcyBmaXJzdCB3ZWVrZGF5XHJcbiAgICBjb25zdCBkYXRhID0gZGF0ZS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBtbyAgID0gZGF0ZS5nZXRNb250aCgpICsgMTtcclxuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBob3VyID0gZGF0ZS5nZXRIb3VycygpO1xyXG4gICAgY29uc3QgbWluICA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG4gICAgY29uc3Qgc2VjICA9IGRhdGUuZ2V0U2Vjb25kcygpO1xyXG4gICAgbGV0IFogICAgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkvKC0wLjYpO1xyXG4gICAgbGV0IFp6ZXJvQ291bnQgICA9IDQgLSBaLnRvU3RyaW5nKCkubGVuZ3RoO1xyXG4gICAgaWYgKFp6ZXJvQ291bnQ+MClcclxuICAgICAgICBaID0gJzAnLnJlcGVhdChaemVyb0NvdW50KSArIFo7XHJcbiAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvW0RkTW1ZeUhoU3Nael0vZywgJyUkJicpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoLyVEJUQvZywgZGF0YS50b1N0cmluZygpLmxlbmd0aCA8IDI/IGAwJHtkYXRhfWA6IGRhdGEpXHJcbiAgICAgICAgLnJlcGxhY2UoLyVEL2csIGRhdGEpXHJcbiAgICAgICAgLnJlcGxhY2UoLyVkJWQlZCVkL2csIEx1cmUuQ3VsdHVyZS5XZWVrRGF5c1tkYXldKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lZCVkJWQvZywgTHVyZS5DdWx0dXJlLldlZWtEYXlzU2hvcnRbZGF5XSlcclxuICAgICAgICAucmVwbGFjZSgvJU0lTSVNJU0vZywgaXNCYW5kTW9udGhOYW1lID8gTHVyZS5DdWx0dXJlLk1vbnRoTmFtZXNCYW5kZWRbbW8tMV0gOiBMdXJlLkN1bHR1cmUuTW9udGhOYW1lc1ttby0xXSApXHJcbiAgICAgICAgLnJlcGxhY2UoLyVNJU0lTS9nLCAgTHVyZS5DdWx0dXJlLk1vbnRoTmFtZXNTaG9ydFttby0xXSApXHJcbiAgICAgICAgLnJlcGxhY2UoLyVNJU0vZywgbW8udG9TdHJpbmcoKS5sZW5ndGggPCAyID8gYDAke21vfWA6bW8pXHJcbiAgICAgICAgLnJlcGxhY2UoLyVNL2csIG1vKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lWSVZJVklWS9nLHllYXIpXHJcbiAgICAgICAgLnJlcGxhY2UoLyVZJVkvZyx5ZWFyLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIsNCkgKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lWS9nLCB5ZWFyKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lSCVIL2csIGhvdXIudG9TdHJpbmcoKS5sZW5ndGggPCAyID8gYDAke2hvdXJ9YDpob3VyKVxyXG4gICAgICAgIC5yZXBsYWNlKC8laCVoL2csIChob3VyJTEyKS50b1N0cmluZygpLmxlbmd0aCA8IDIgPyBgMCR7KGhvdXIlMTIpfWA6KGhvdXIlMTIpIClcclxuICAgICAgICAucmVwbGFjZSgvJUgvZywgaG91cilcclxuICAgICAgICAucmVwbGFjZSgvJWgvZywgaG91ciAlIDEyIClcclxuICAgICAgICAucmVwbGFjZSgvJW0lbS9nLCBtaW4udG9TdHJpbmcoKS5sZW5ndGggPCAyID8gYDAke21pbn1gOm1pbilcclxuICAgICAgICAucmVwbGFjZSgvJW0vZywgbWluKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lcyVzL2csIHNlYy50b1N0cmluZygpLmxlbmd0aCA8IDIgPyBgMCR7c2VjfWA6c2VjKVxyXG4gICAgICAgIC5yZXBsYWNlKC8lcy9nLCBzZWMpXHJcbiAgICAgICAgLnJlcGxhY2UoLyVaL2csIGArJHtafWApO1xyXG5cclxufTtcclxuTERhdGUuaXNEYXRlVmFsaWQgPSAoZGF0ZSk9PntcclxuICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGUpID09PSBcIltvYmplY3QgRGF0ZV1cIiAmJiAhaXNOYU4oIGRhdGUuZ2V0VGltZSgpKSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExEYXRlOyJdfQ==
},{}],43:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//###
//###TODO Beta
//Draggable alpha

var LureSelect = require('./../../library/DOM/select.js');

var LureDraggable = function LureDraggable(_ref) {
    var _ref$Target = _ref.Target,
        Target = _ref$Target === undefined ? null : _ref$Target,
        _ref$Content = _ref.Content,
        Content = _ref$Content === undefined ? null : _ref$Content,
        _ref$Options = _ref.Options,
        Options = _ref$Options === undefined ? {
        OnMove: function OnMove() {}
    } : _ref$Options;

    _classCallCheck(this, LureDraggable);

    this.Target = LureSelect(Target);
    this.Content = Content ? LureSelect(Content) : this.Target;

    this.Content.style.position = 'absolute';

    var obj = void 0,
        x = void 0,
        y = void 0,
        prev_x = void 0,
        prev_y = void 0;
    var ctn = this.Content;
    function drag(e) {
        // Yep, use the object I just clicked on.
        //obj = e.target;
        obj = ctn;
        // Set current X coordinate minus distance left from offsetParent node.
        prev_x = x - obj.offsetLeft;
        // Set current Y coordinate minus distance top from offsetParent node.
        prev_y = y - obj.offsetTop;
        // Change the object's color so it looks like it's usable/moveable.
        //obj.style.background = '#00ff00';
    }
    function move(e) {
        // Always track and record the mouse's current position.
        if (e.pageX) {
            x = e.pageX; // X coordinate based on page, not viewport.
            y = e.pageY; // Y coordinate based on page, not viewport.
        }
        //  else if (e.clientX) {
        //    x=clientX; // X coordinate based on viewport.
        //    y=clientY; // Y coordinate based on viewport.
        //  }
        // If the object specifically is selected, then move it to the X/Y coordinates that are always being tracked.
        if (obj) {
            obj.style.left = x - prev_x + 'px';
            obj.style.top = y - prev_y + 'px';
            if (Options.OnMove) Options.OnMove();
        }
    }

    function drop() {
        // Revert to the default css style.
        //obj.style.background = '';
        // Remove the attached event from the element so it doesn't keep following your mouse. :)
        obj = false;
    }
    this.Target.addEventListener('mousedown', drag);

    //document.getElementById('ball').onmousedown = drag;

    document.addEventListener('mousemove', move);
    document.addEventListener('mouseup', drop);
    this.Target.LureDraggable = this;
};

module.exports = function (Target, Content, Options) {
    return new LureDraggable({ Target: Target, Content: Content, Options: Options });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRyYWdnYWJsZS5qcyJdLCJuYW1lcyI6WyJMdXJlU2VsZWN0IiwicmVxdWlyZSIsIkx1cmVEcmFnZ2FibGUiLCJUYXJnZXQiLCJDb250ZW50IiwiT3B0aW9ucyIsIk9uTW92ZSIsInN0eWxlIiwicG9zaXRpb24iLCJvYmoiLCJ4IiwieSIsInByZXZfeCIsInByZXZfeSIsImN0biIsImRyYWciLCJlIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm1vdmUiLCJwYWdlWCIsInBhZ2VZIiwibGVmdCIsInRvcCIsImRyb3AiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jdW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLGFBQWFDLFFBQVEsK0JBQVIsQ0FBakI7O0lBQ01DLGEsR0FDRiw2QkFNYztBQUFBLDJCQUxFQyxNQUtGO0FBQUEsUUFMRUEsTUFLRiwrQkFMVyxJQUtYO0FBQUEsNEJBSkVDLE9BSUY7QUFBQSxRQUpFQSxPQUlGLGdDQUpZLElBSVo7QUFBQSw0QkFIRUMsT0FHRjtBQUFBLFFBSEVBLE9BR0YsZ0NBSFk7QUFDTkMsZ0JBQVEsa0JBQUksQ0FBRTtBQURSLEtBR1o7O0FBQUE7O0FBQ1YsU0FBS0gsTUFBTCxHQUFjSCxXQUFXRyxNQUFYLENBQWQ7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLFVBQVVKLFdBQVdJLE9BQVgsQ0FBVixHQUFnQyxLQUFLRCxNQUFwRDs7QUFFQSxTQUFLQyxPQUFMLENBQWFHLEtBQWIsQ0FBbUJDLFFBQW5CLEdBQThCLFVBQTlCOztBQUVBLFFBQUlDLFlBQUo7QUFBQSxRQUFTQyxVQUFUO0FBQUEsUUFBWUMsVUFBWjtBQUFBLFFBQWVDLGVBQWY7QUFBQSxRQUF1QkMsZUFBdkI7QUFDQSxRQUFJQyxNQUFNLEtBQUtWLE9BQWY7QUFDQSxhQUFTVyxJQUFULENBQWNDLENBQWQsRUFBaUI7QUFDYjtBQUNBO0FBQ0FQLGNBQU1LLEdBQU47QUFDQTtBQUNBRixpQkFBU0YsSUFBSUQsSUFBSVEsVUFBakI7QUFDQTtBQUNBSixpQkFBU0YsSUFBSUYsSUFBSVMsU0FBakI7QUFDQTtBQUNBO0FBQ0g7QUFDRCxhQUFTQyxJQUFULENBQWNILENBQWQsRUFBaUI7QUFDYjtBQUNBLFlBQUlBLEVBQUVJLEtBQU4sRUFBYTtBQUNUVixnQkFBSU0sRUFBRUksS0FBTixDQURTLENBQ0k7QUFDYlQsZ0JBQUlLLEVBQUVLLEtBQU4sQ0FGUyxDQUVJO0FBQ2hCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUdaLEdBQUgsRUFBUTtBQUNKQSxnQkFBSUYsS0FBSixDQUFVZSxJQUFWLEdBQWtCWixJQUFJRSxNQUFMLEdBQWUsSUFBaEM7QUFDQUgsZ0JBQUlGLEtBQUosQ0FBVWdCLEdBQVYsR0FBaUJaLElBQUlFLE1BQUwsR0FBZSxJQUEvQjtBQUNBLGdCQUFJUixRQUFRQyxNQUFaLEVBQ0lELFFBQVFDLE1BQVI7QUFDUDtBQUVKOztBQUdELGFBQVNrQixJQUFULEdBQWdCO0FBQ1o7QUFDQTtBQUNBO0FBQ0FmLGNBQU0sS0FBTjtBQUNIO0FBQ0QsU0FBS04sTUFBTCxDQUFZc0IsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBMENWLElBQTFDOztBQUVBOztBQUVBVyxhQUFTRCxnQkFBVCxDQUEwQixXQUExQixFQUF1Q04sSUFBdkM7QUFDQU8sYUFBU0QsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUNELElBQXJDO0FBQ0EsU0FBS3JCLE1BQUwsQ0FBWUQsYUFBWixHQUE0QixJQUE1QjtBQUNILEM7O0FBS0x5QixPQUFPQyxPQUFQLEdBQWlCLFVBQVN6QixNQUFULEVBQWlCQyxPQUFqQixFQUEwQkMsT0FBMUIsRUFBa0M7QUFDL0MsV0FBTyxJQUFJSCxhQUFKLENBQWtCLEVBQUNDLFFBQU9BLE1BQVIsRUFBZ0JDLFNBQVFBLE9BQXhCLEVBQWlDQyxTQUFRQSxPQUF6QyxFQUFsQixDQUFQO0FBQ0gsQ0FGRCIsImZpbGUiOiJEcmFnZ2FibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyMjI1xyXG4vLyMjI1RPRE8gQmV0YVxyXG4vL0RyYWdnYWJsZSBhbHBoYVxyXG5cclxubGV0IEx1cmVTZWxlY3QgPSByZXF1aXJlKCcuLy4uLy4uL2xpYnJhcnkvRE9NL3NlbGVjdC5qcycpO1xyXG5jbGFzcyBMdXJlRHJhZ2dhYmxle1xyXG4gICAgY29uc3RydWN0b3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIFRhcmdldCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT25Nb3ZlOiAoKT0+e31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KXtcclxuICAgICAgICB0aGlzLlRhcmdldCA9IEx1cmVTZWxlY3QoVGFyZ2V0KTtcclxuICAgICAgICB0aGlzLkNvbnRlbnQgPSBDb250ZW50ID8gTHVyZVNlbGVjdChDb250ZW50KSA6IHRoaXMuVGFyZ2V0O1xyXG5cclxuICAgICAgICB0aGlzLkNvbnRlbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICAgICAgICBsZXQgb2JqLCB4LCB5LCBwcmV2X3gsIHByZXZfeTtcclxuICAgICAgICBsZXQgY3RuID0gdGhpcy5Db250ZW50O1xyXG4gICAgICAgIGZ1bmN0aW9uIGRyYWcoZSkge1xyXG4gICAgICAgICAgICAvLyBZZXAsIHVzZSB0aGUgb2JqZWN0IEkganVzdCBjbGlja2VkIG9uLlxyXG4gICAgICAgICAgICAvL29iaiA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBvYmogPSBjdG47XHJcbiAgICAgICAgICAgIC8vIFNldCBjdXJyZW50IFggY29vcmRpbmF0ZSBtaW51cyBkaXN0YW5jZSBsZWZ0IGZyb20gb2Zmc2V0UGFyZW50IG5vZGUuXHJcbiAgICAgICAgICAgIHByZXZfeCA9IHggLSBvYmoub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgLy8gU2V0IGN1cnJlbnQgWSBjb29yZGluYXRlIG1pbnVzIGRpc3RhbmNlIHRvcCBmcm9tIG9mZnNldFBhcmVudCBub2RlLlxyXG4gICAgICAgICAgICBwcmV2X3kgPSB5IC0gb2JqLm9mZnNldFRvcDtcclxuICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBvYmplY3QncyBjb2xvciBzbyBpdCBsb29rcyBsaWtlIGl0J3MgdXNhYmxlL21vdmVhYmxlLlxyXG4gICAgICAgICAgICAvL29iai5zdHlsZS5iYWNrZ3JvdW5kID0gJyMwMGZmMDAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBtb3ZlKGUpIHtcclxuICAgICAgICAgICAgLy8gQWx3YXlzIHRyYWNrIGFuZCByZWNvcmQgdGhlIG1vdXNlJ3MgY3VycmVudCBwb3NpdGlvbi5cclxuICAgICAgICAgICAgaWYgKGUucGFnZVgpIHtcclxuICAgICAgICAgICAgICAgIHggPSBlLnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgYmFzZWQgb24gcGFnZSwgbm90IHZpZXdwb3J0LlxyXG4gICAgICAgICAgICAgICAgeSA9IGUucGFnZVk7IC8vIFkgY29vcmRpbmF0ZSBiYXNlZCBvbiBwYWdlLCBub3Qgdmlld3BvcnQuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gIGVsc2UgaWYgKGUuY2xpZW50WCkge1xyXG4gICAgICAgICAgICAvLyAgICB4PWNsaWVudFg7IC8vIFggY29vcmRpbmF0ZSBiYXNlZCBvbiB2aWV3cG9ydC5cclxuICAgICAgICAgICAgLy8gICAgeT1jbGllbnRZOyAvLyBZIGNvb3JkaW5hdGUgYmFzZWQgb24gdmlld3BvcnQuXHJcbiAgICAgICAgICAgIC8vICB9XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3Qgc3BlY2lmaWNhbGx5IGlzIHNlbGVjdGVkLCB0aGVuIG1vdmUgaXQgdG8gdGhlIFgvWSBjb29yZGluYXRlcyB0aGF0IGFyZSBhbHdheXMgYmVpbmcgdHJhY2tlZC5cclxuICAgICAgICAgICAgaWYob2JqKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouc3R5bGUubGVmdCA9ICh4IC0gcHJldl94KSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBvYmouc3R5bGUudG9wID0gKHkgLSBwcmV2X3kpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGlmIChPcHRpb25zLk9uTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICBPcHRpb25zLk9uTW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRyb3AoKSB7XHJcbiAgICAgICAgICAgIC8vIFJldmVydCB0byB0aGUgZGVmYXVsdCBjc3Mgc3R5bGUuXHJcbiAgICAgICAgICAgIC8vb2JqLnN0eWxlLmJhY2tncm91bmQgPSAnJztcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBhdHRhY2hlZCBldmVudCBmcm9tIHRoZSBlbGVtZW50IHNvIGl0IGRvZXNuJ3Qga2VlcCBmb2xsb3dpbmcgeW91ciBtb3VzZS4gOilcclxuICAgICAgICAgICAgb2JqID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGRyYWcpO1xyXG5cclxuICAgICAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWxsJykub25tb3VzZWRvd24gPSBkcmFnO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZHJvcCk7XHJcbiAgICAgICAgdGhpcy5UYXJnZXQuTHVyZURyYWdnYWJsZSA9IHRoaXM7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUYXJnZXQsIENvbnRlbnQsIE9wdGlvbnMpe1xyXG4gICAgcmV0dXJuIG5ldyBMdXJlRHJhZ2dhYmxlKHtUYXJnZXQ6VGFyZ2V0LCBDb250ZW50OkNvbnRlbnQsIE9wdGlvbnM6T3B0aW9uc30pO1xyXG59OyJdfQ==
},{"./../../library/DOM/select.js":16}],44:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LureListener = function () {
    _createClass(LureListener, [{
        key: 'Run',
        value: function Run() {
            var _this = this;

            this.Stop();
            this._Interval = setInterval(function () {
                _this._Listen();
            }, this.Freq);
        }
    }, {
        key: 'Stop',
        value: function Stop() {
            clearInterval(this._Interval);
            clearTimeout(this._TimeOut);
        }
    }, {
        key: '_Listen',
        value: function _Listen() {
            var Width = this.Target.clientWidth;
            if (Width !== this.Width) {
                this.Width = Width;
                return this._OnEvent('width');
            }
            var Height = this.Target.clientHeight;
            if (Height !== this.Height) {
                this.Height = Height;
                return this._OnEvent('height');
            }
        }
    }, {
        key: '_OnEvent',
        value: function _OnEvent() {
            var _this2 = this;

            clearTimeout(this._TimeOut);
            this._TimeOut = setTimeout(function () {
                _this2.OnEvent();
            }, this.Delay);
        }
    }]);

    function LureListener() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$Target = _ref.Target,
            Target = _ref$Target === undefined ? null : _ref$Target,
            _ref$Type = _ref.Type,
            Type = _ref$Type === undefined ? 'resize' : _ref$Type,
            _ref$Freq = _ref.Freq,
            Freq = _ref$Freq === undefined ? 20 : _ref$Freq,
            _ref$Delay = _ref.Delay,
            Delay = _ref$Delay === undefined ? 0 : _ref$Delay,
            _ref$OnEvent = _ref.OnEvent,
            OnEvent = _ref$OnEvent === undefined ? function () {} : _ref$OnEvent;

        _classCallCheck(this, LureListener);

        this.Target = Lure.Select(Target);
        this.Type = 'resize';
        this.Freq = Freq;
        this.Delay = Delay;
        this.OnEvent = OnEvent;

        this._Interval = null;
        this._TimeOut = null;

        this.Width = this.Target.clientWidth;
        this.Height = this.Target.clientHeight;

        this._Timer = 0;
        this.Run();
    }

    return LureListener;
}();

module.exports = LureListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpc3RlbmVyLmpzIl0sIm5hbWVzIjpbIkx1cmVMaXN0ZW5lciIsIlN0b3AiLCJfSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIl9MaXN0ZW4iLCJGcmVxIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsIl9UaW1lT3V0IiwiV2lkdGgiLCJUYXJnZXQiLCJjbGllbnRXaWR0aCIsIl9PbkV2ZW50IiwiSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2V0VGltZW91dCIsIk9uRXZlbnQiLCJEZWxheSIsIlR5cGUiLCJMdXJlIiwiU2VsZWN0IiwiX1RpbWVyIiwiUnVuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQU1BLFk7Ozs4QkFDRztBQUFBOztBQUNELGlCQUFLQyxJQUFMO0FBQ0EsaUJBQUtDLFNBQUwsR0FBaUJDLFlBQVksWUFBSTtBQUM3QixzQkFBS0MsT0FBTDtBQUNILGFBRmdCLEVBRWQsS0FBS0MsSUFGUyxDQUFqQjtBQUdIOzs7K0JBQ0s7QUFDRkMsMEJBQWMsS0FBS0osU0FBbkI7QUFDQUsseUJBQWEsS0FBS0MsUUFBbEI7QUFDSDs7O2tDQUVRO0FBQ0wsZ0JBQUlDLFFBQVEsS0FBS0MsTUFBTCxDQUFZQyxXQUF4QjtBQUNBLGdCQUFJRixVQUFVLEtBQUtBLEtBQW5CLEVBQXlCO0FBQ3JCLHFCQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSx1QkFBTyxLQUFLRyxRQUFMLENBQWMsT0FBZCxDQUFQO0FBQ0g7QUFDRCxnQkFBSUMsU0FBUyxLQUFLSCxNQUFMLENBQVlJLFlBQXpCO0FBQ0EsZ0JBQUlELFdBQVcsS0FBS0EsTUFBcEIsRUFBMkI7QUFDdkIscUJBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLHVCQUFPLEtBQUtELFFBQUwsQ0FBYyxRQUFkLENBQVA7QUFDSDtBQUNKOzs7bUNBQ1M7QUFBQTs7QUFDTkwseUJBQWEsS0FBS0MsUUFBbEI7QUFDQSxpQkFBS0EsUUFBTCxHQUFnQk8sV0FBVyxZQUFJO0FBQzNCLHVCQUFLQyxPQUFMO0FBQ0gsYUFGZSxFQUViLEtBQUtDLEtBRlEsQ0FBaEI7QUFJSDs7O0FBQ0QsNEJBTWlCO0FBQUEsdUZBQUgsRUFBRztBQUFBLCtCQUxEUCxNQUtDO0FBQUEsWUFMREEsTUFLQywrQkFMUSxJQUtSO0FBQUEsNkJBSkRRLElBSUM7QUFBQSxZQUpEQSxJQUlDLDZCQUpRLFFBSVI7QUFBQSw2QkFIRGIsSUFHQztBQUFBLFlBSERBLElBR0MsNkJBSFEsRUFHUjtBQUFBLDhCQUZEWSxLQUVDO0FBQUEsWUFGREEsS0FFQyw4QkFGUSxDQUVSO0FBQUEsZ0NBRERELE9BQ0M7QUFBQSxZQUREQSxPQUNDLGdDQURTLFlBQUksQ0FBRSxDQUNmOztBQUFBOztBQUNiLGFBQUtOLE1BQUwsR0FBY1MsS0FBS0MsTUFBTCxDQUFZVixNQUFaLENBQWQ7QUFDQSxhQUFLUSxJQUFMLEdBQVksUUFBWjtBQUNBLGFBQUtiLElBQUwsR0FBWUEsSUFBWjtBQUNBLGFBQUtZLEtBQUwsR0FBYUEsS0FBYjtBQUNBLGFBQUtELE9BQUwsR0FBZUEsT0FBZjs7QUFFQSxhQUFLZCxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsYUFBS00sUUFBTCxHQUFtQixJQUFuQjs7QUFFQSxhQUFLQyxLQUFMLEdBQWMsS0FBS0MsTUFBTCxDQUFZQyxXQUExQjtBQUNBLGFBQUtFLE1BQUwsR0FBYyxLQUFLSCxNQUFMLENBQVlJLFlBQTFCOztBQUVBLGFBQUtPLE1BQUwsR0FBYyxDQUFkO0FBQ0EsYUFBS0MsR0FBTDtBQUdIOzs7OztBQUdMQyxPQUFPQyxPQUFQLEdBQWlCeEIsWUFBakIiLCJmaWxlIjoiTGlzdGVuZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBMdXJlTGlzdGVuZXIge1xyXG4gICAgUnVuKCl7XHJcbiAgICAgICAgdGhpcy5TdG9wKCk7XHJcbiAgICAgICAgdGhpcy5fSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKT0+e1xyXG4gICAgICAgICAgICB0aGlzLl9MaXN0ZW4oKTtcclxuICAgICAgICB9LCB0aGlzLkZyZXEpXHJcbiAgICB9XHJcbiAgICBTdG9wKCl7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9JbnRlcnZhbCk7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX1RpbWVPdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIF9MaXN0ZW4oKXtcclxuICAgICAgICBsZXQgV2lkdGggPSB0aGlzLlRhcmdldC5jbGllbnRXaWR0aDtcclxuICAgICAgICBpZiAoV2lkdGggIT09IHRoaXMuV2lkdGgpe1xyXG4gICAgICAgICAgICB0aGlzLldpZHRoID0gV2lkdGg7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9PbkV2ZW50KCd3aWR0aCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgSGVpZ2h0ID0gdGhpcy5UYXJnZXQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIGlmIChIZWlnaHQgIT09IHRoaXMuSGVpZ2h0KXtcclxuICAgICAgICAgICAgdGhpcy5IZWlnaHQgPSBIZWlnaHQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9PbkV2ZW50KCdoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfT25FdmVudCgpe1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9UaW1lT3V0KTtcclxuICAgICAgICB0aGlzLl9UaW1lT3V0ID0gc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICB0aGlzLk9uRXZlbnQoKTtcclxuICAgICAgICB9LCB0aGlzLkRlbGF5KVxyXG5cclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKHtcclxuICAgICAgICAgICAgICAgICAgICBUYXJnZXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIFR5cGUgICA9ICdyZXNpemUnLFxyXG4gICAgICAgICAgICAgICAgICAgIEZyZXEgICA9IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgIERlbGF5ICA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgT25FdmVudCA9ICgpPT57fSxcclxuICAgICAgICAgICAgICAgIH09e30pe1xyXG4gICAgICAgIHRoaXMuVGFyZ2V0ID0gTHVyZS5TZWxlY3QoVGFyZ2V0KTtcclxuICAgICAgICB0aGlzLlR5cGUgPSAncmVzaXplJztcclxuICAgICAgICB0aGlzLkZyZXEgPSBGcmVxO1xyXG4gICAgICAgIHRoaXMuRGVsYXkgPSBEZWxheTtcclxuICAgICAgICB0aGlzLk9uRXZlbnQgPSBPbkV2ZW50O1xyXG5cclxuICAgICAgICB0aGlzLl9JbnRlcnZhbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fVGltZU91dCAgICA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuV2lkdGggID0gdGhpcy5UYXJnZXQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5IZWlnaHQgPSB0aGlzLlRhcmdldC5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMuX1RpbWVyID0gMDtcclxuICAgICAgICB0aGlzLlJ1bigpO1xyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTHVyZUxpc3RlbmVyOyJdfQ==
},{}],45:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LureSelect = require('./../../library/DOM/select.js');
var CreateElementFromString = require('./../../library/DOM/CreateElementFromString.js');

var LureLoading = function () {
    function LureLoading() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$Target = _ref.Target,
            Target = _ref$Target === undefined ? 'body' : _ref$Target,
            _ref$SaveOriginalStyl = _ref.SaveOriginalStylePosition,
            SaveOriginalStylePosition = _ref$SaveOriginalStyl === undefined ? false : _ref$SaveOriginalStyl,
            _ref$BackgroundColor = _ref.BackgroundColor,
            BackgroundColor = _ref$BackgroundColor === undefined ? null : _ref$BackgroundColor;

        _classCallCheck(this, LureLoading);

        this.Target = LureSelect(Target);
        //const pos = this.Target.style.position;
        this.Target.style.position = 'relative';
        this.Content = CreateElementFromString('<div class="ajax-loading" style="display: none"></div>');
        if (BackgroundColor !== null) {
            this.Content.style.backgroundColor = BackgroundColor;
        }
        var cx = 60; //diameter
        var cy = 60;
        var _DoArc = function _DoArc(radius, maxAngle) {
            var d = " M " + (cx + radius) + " " + cy;
            for (var angle = 0; angle < maxAngle; angle++) {
                var rad = angle * (Math.PI / 180); //deg to rad
                var x = cx + Math.cos(rad) * radius;
                var y = cy + Math.sin(rad) * radius;
                d += " L " + x + " " + y;
            }
            return d;
        };
        var svg = '<svg xmlns="http://www.w3.org/2000/svg">\n                     <path d="' + _DoArc(45, 160) + '" class="lure-arc1" fill="none" stroke="#449b22" stroke-width="5"></path>\n                     <path d="' + _DoArc(40, 130) + '" class="lure-arc2" fill="none" stroke="#61c8de" stroke-width="5"></path>\n                     <path d="' + _DoArc(35, 100) + '" class="lure-arc3" fill="none" stroke="#761c19" stroke-width="5"></path>\n                     <path d="' + _DoArc(30, 70) + '"  class="lure-arc4" fill="none" stroke="#333333" stroke-width="5"></path>\n                   </svg>';
        this.Target.appendChild(this.Content);
        this.Content.innerHTML = svg;
        this.Timeout = null;
        //this.Target.style.position = pos;
    }

    _createClass(LureLoading, [{
        key: 'Show',
        value: function Show() {
            var $this = this;
            this.Content.style.display = '';
            clearTimeout(this.TimeoutHide);
            this.Timeout = setTimeout(function () {
                $this.Content.style.display = 'block';
            }, 70);
        }
    }, {
        key: 'Hide',
        value: function Hide() {
            var $this = this;
            clearTimeout(this.Timeout);
            this.TimeoutHide = setTimeout(function () {
                $this.Content.style.display = 'none';
            }, 250); //hide may be called in same time as the show()
        }
    }]);

    return LureLoading;
}();

;

module.exports = LureLoading;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvYWRpbmcuanMiXSwibmFtZXMiOlsiTHVyZVNlbGVjdCIsInJlcXVpcmUiLCJDcmVhdGVFbGVtZW50RnJvbVN0cmluZyIsIkx1cmVMb2FkaW5nIiwiVGFyZ2V0IiwiU2F2ZU9yaWdpbmFsU3R5bGVQb3NpdGlvbiIsIkJhY2tncm91bmRDb2xvciIsInN0eWxlIiwicG9zaXRpb24iLCJDb250ZW50IiwiYmFja2dyb3VuZENvbG9yIiwiY3giLCJjeSIsIl9Eb0FyYyIsInJhZGl1cyIsIm1heEFuZ2xlIiwiZCIsImFuZ2xlIiwicmFkIiwiTWF0aCIsIlBJIiwieCIsImNvcyIsInkiLCJzaW4iLCJzdmciLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsIlRpbWVvdXQiLCIkdGhpcyIsImRpc3BsYXkiLCJjbGVhclRpbWVvdXQiLCJUaW1lb3V0SGlkZSIsInNldFRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxhQUFhQyxRQUFRLCtCQUFSLENBQWpCO0FBQ0EsSUFBSUMsMEJBQTBCRCxRQUFRLGdEQUFSLENBQTlCOztJQUNNRSxXO0FBQ0YsMkJBTUM7QUFBQSx1RkFETyxFQUNQO0FBQUEsK0JBSk9DLE1BSVA7QUFBQSxZQUpPQSxNQUlQLCtCQUpnQixNQUloQjtBQUFBLHlDQUhPQyx5QkFHUDtBQUFBLFlBSE9BLHlCQUdQLHlDQUhtQyxLQUduQztBQUFBLHdDQUZPQyxlQUVQO0FBQUEsWUFGT0EsZUFFUCx3Q0FGeUIsSUFFekI7O0FBQUE7O0FBQ0csYUFBS0YsTUFBTCxHQUFjSixXQUFXSSxNQUFYLENBQWQ7QUFDQTtBQUNBLGFBQUtBLE1BQUwsQ0FBWUcsS0FBWixDQUFrQkMsUUFBbEIsR0FBNkIsVUFBN0I7QUFDQSxhQUFLQyxPQUFMLEdBQWVQLGlGQUFmO0FBQ0EsWUFBSUksb0JBQW9CLElBQXhCLEVBQTZCO0FBQ3pCLGlCQUFLRyxPQUFMLENBQWFGLEtBQWIsQ0FBbUJHLGVBQW5CLEdBQXFDSixlQUFyQztBQUNIO0FBQ0QsWUFBSUssS0FBSyxFQUFULENBUkgsQ0FRZ0I7QUFDYixZQUFJQyxLQUFLLEVBQVQ7QUFDQSxZQUFJQyxTQUFTLFNBQVRBLE1BQVMsQ0FBU0MsTUFBVCxFQUFpQkMsUUFBakIsRUFBMEI7QUFDbkMsZ0JBQUlDLElBQUksU0FBUUwsS0FBS0csTUFBYixJQUF1QixHQUF2QixHQUE2QkYsRUFBckM7QUFDQSxpQkFBSyxJQUFJSyxRQUFRLENBQWpCLEVBQW9CQSxRQUFRRixRQUE1QixFQUFzQ0UsT0FBdEMsRUFDQTtBQUNJLG9CQUFJQyxNQUFNRCxTQUFTRSxLQUFLQyxFQUFMLEdBQVUsR0FBbkIsQ0FBVixDQURKLENBQ3dDO0FBQ3BDLG9CQUFJQyxJQUFJVixLQUFLUSxLQUFLRyxHQUFMLENBQVNKLEdBQVQsSUFBZ0JKLE1BQTdCO0FBQ0Esb0JBQUlTLElBQUlYLEtBQUtPLEtBQUtLLEdBQUwsQ0FBU04sR0FBVCxJQUFnQkosTUFBN0I7QUFDQUUscUJBQUssUUFBTUssQ0FBTixHQUFVLEdBQVYsR0FBZ0JFLENBQXJCO0FBQ0g7QUFDRCxtQkFBT1AsQ0FBUDtBQUNILFNBVkQ7QUFXQSxZQUFJUyxtRkFDb0JaLE9BQU8sRUFBUCxFQUFXLEdBQVgsQ0FEcEIsaUhBRW9CQSxPQUFPLEVBQVAsRUFBVyxHQUFYLENBRnBCLGlIQUdvQkEsT0FBTyxFQUFQLEVBQVcsR0FBWCxDQUhwQixpSEFJb0JBLE9BQU8sRUFBUCxFQUFXLEVBQVgsQ0FKcEIsMEdBQUo7QUFNQSxhQUFLVCxNQUFMLENBQVlzQixXQUFaLENBQXdCLEtBQUtqQixPQUE3QjtBQUNBLGFBQUtBLE9BQUwsQ0FBYWtCLFNBQWIsR0FBeUJGLEdBQXpCO0FBQ0EsYUFBS0csT0FBTCxHQUFlLElBQWY7QUFDQTtBQUNIOzs7OytCQUNLO0FBQ0YsZ0JBQUlDLFFBQVEsSUFBWjtBQUNBLGlCQUFLcEIsT0FBTCxDQUFhRixLQUFiLENBQW1CdUIsT0FBbkIsR0FBNkIsRUFBN0I7QUFDQUMseUJBQWEsS0FBS0MsV0FBbEI7QUFDQSxpQkFBS0osT0FBTCxHQUFlSyxXQUFXLFlBQVU7QUFDaENKLHNCQUFNcEIsT0FBTixDQUFjRixLQUFkLENBQW9CdUIsT0FBcEIsR0FBOEIsT0FBOUI7QUFDSCxhQUZjLEVBRVosRUFGWSxDQUFmO0FBR0g7OzsrQkFDSztBQUNGLGdCQUFJRCxRQUFRLElBQVo7QUFDQUUseUJBQWEsS0FBS0gsT0FBbEI7QUFDQSxpQkFBS0ksV0FBTCxHQUFtQkMsV0FBVyxZQUFVO0FBQ3BDSixzQkFBTXBCLE9BQU4sQ0FBY0YsS0FBZCxDQUFvQnVCLE9BQXBCLEdBQThCLE1BQTlCO0FBQ0gsYUFGa0IsRUFFaEIsR0FGZ0IsQ0FBbkIsQ0FIRSxDQUtPO0FBQ1o7Ozs7OztBQUNKOztBQUtESSxPQUFPQyxPQUFQLEdBQWlCaEMsV0FBakIiLCJmaWxlIjoiTG9hZGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBMdXJlU2VsZWN0ID0gcmVxdWlyZSgnLi8uLi8uLi9saWJyYXJ5L0RPTS9zZWxlY3QuanMnKTtcclxubGV0IENyZWF0ZUVsZW1lbnRGcm9tU3RyaW5nID0gcmVxdWlyZSgnLi8uLi8uLi9saWJyYXJ5L0RPTS9DcmVhdGVFbGVtZW50RnJvbVN0cmluZy5qcycpO1xyXG5jbGFzcyBMdXJlTG9hZGluZ3tcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGFyZ2V0ID0gJ2JvZHknLFxyXG4gICAgICAgICAgICBTYXZlT3JpZ2luYWxTdHlsZVBvc2l0aW9uID0gZmFsc2UsXHJcbiAgICAgICAgICAgIEJhY2tncm91bmRDb2xvciA9IG51bGwsXHJcbiAgICAgICAgfSA9IHt9XHJcbiAgICApe1xyXG4gICAgICAgIHRoaXMuVGFyZ2V0ID0gTHVyZVNlbGVjdChUYXJnZXQpO1xyXG4gICAgICAgIC8vY29uc3QgcG9zID0gdGhpcy5UYXJnZXQuc3R5bGUucG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5UYXJnZXQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgIHRoaXMuQ29udGVudCA9IENyZWF0ZUVsZW1lbnRGcm9tU3RyaW5nKGA8ZGl2IGNsYXNzPVwiYWpheC1sb2FkaW5nXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lXCI+PC9kaXY+YCk7XHJcbiAgICAgICAgaWYgKEJhY2tncm91bmRDb2xvciAhPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBCYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjeCA9IDYwOyAvL2RpYW1ldGVyXHJcbiAgICAgICAgbGV0IGN5ID0gNjA7XHJcbiAgICAgICAgbGV0IF9Eb0FyYyA9IGZ1bmN0aW9uKHJhZGl1cywgbWF4QW5nbGUpe1xyXG4gICAgICAgICAgICBsZXQgZCA9IFwiIE0gXCIrIChjeCArIHJhZGl1cykgKyBcIiBcIiArIGN5O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhbmdsZSA9IDA7IGFuZ2xlIDwgbWF4QW5nbGU7IGFuZ2xlKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCByYWQgPSBhbmdsZSAqIChNYXRoLlBJIC8gMTgwKTsgIC8vZGVnIHRvIHJhZFxyXG4gICAgICAgICAgICAgICAgbGV0IHggPSBjeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXM7XHJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IGN5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcclxuICAgICAgICAgICAgICAgIGQgKz0gXCIgTCBcIit4ICsgXCIgXCIgKyB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IHN2ZyA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIiR7X0RvQXJjKDQ1LCAxNjApfVwiIGNsYXNzPVwibHVyZS1hcmMxXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjNDQ5YjIyXCIgc3Ryb2tlLXdpZHRoPVwiNVwiPjwvcGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIiR7X0RvQXJjKDQwLCAxMzApfVwiIGNsYXNzPVwibHVyZS1hcmMyXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjNjFjOGRlXCIgc3Ryb2tlLXdpZHRoPVwiNVwiPjwvcGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIiR7X0RvQXJjKDM1LCAxMDApfVwiIGNsYXNzPVwibHVyZS1hcmMzXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjNzYxYzE5XCIgc3Ryb2tlLXdpZHRoPVwiNVwiPjwvcGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIiR7X0RvQXJjKDMwLCA3MCl9XCIgIGNsYXNzPVwibHVyZS1hcmM0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjMzMzMzMzXCIgc3Ryb2tlLXdpZHRoPVwiNVwiPjwvcGF0aD5cclxuICAgICAgICAgICAgICAgICAgIDwvc3ZnPmA7XHJcbiAgICAgICAgdGhpcy5UYXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5Db250ZW50KTtcclxuICAgICAgICB0aGlzLkNvbnRlbnQuaW5uZXJIVE1MID0gc3ZnO1xyXG4gICAgICAgIHRoaXMuVGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgLy90aGlzLlRhcmdldC5zdHlsZS5wb3NpdGlvbiA9IHBvcztcclxuICAgIH1cclxuICAgIFNob3coKXtcclxuICAgICAgICBsZXQgJHRoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuVGltZW91dEhpZGUpO1xyXG4gICAgICAgIHRoaXMuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJHRoaXMuQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB9LCA3MCk7XHJcbiAgICB9XHJcbiAgICBIaWRlKCl7XHJcbiAgICAgICAgbGV0ICR0aGlzID0gdGhpcztcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5UaW1lb3V0KTtcclxuICAgICAgICB0aGlzLlRpbWVvdXRIaWRlID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkdGhpcy5Db250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSwgMjUwKTsgLy9oaWRlIG1heSBiZSBjYWxsZWQgaW4gc2FtZSB0aW1lIGFzIHRoZSBzaG93KClcclxuICAgIH1cclxufTtcclxuXHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTHVyZUxvYWRpbmc7Il19
},{"./../../library/DOM/CreateElementFromString.js":11,"./../../library/DOM/select.js":16}],46:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Type = {
    Number: 'number',
    Float: 'number',
    Int: 'int',
    UInt: 'uint',
    Bool: 'boolean',
    String: 'string',
    Text: 'text', //rich text
    Function: 'function',
    Date: 'date',
    List: 'list',
    Array: 'list',
    NodeList: 'list',
    Object: 'object'
};
var LureDate = require('./../Date/Date.js');

var PropTypes = {
    /**
     *
     * @param obj
     * @returns {*}
     * @constructor
     */
    GetType: function GetType(obj) {
        if (Lure.isNumeric(obj)) return 'number';
        if (obj instanceof Date || obj instanceof LureDate) return 'date';
        if (obj instanceof Function) return 'function';
        if (obj instanceof Array || obj instanceof NodeList) return 'array';
        if (obj instanceof Node) return 'node';
        if (obj instanceof Object) return 'object';
        if (obj === null) return null;
        return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
    },
    Check: function Check(PropTypes, Obj) {
        //debugger;
        for (var prop in PropTypes) {
            // debugger;
            if (PropTypes.hasOwnProperty(prop)) Lure.PropTypes.CheckProp(Obj, PropTypes[prop], prop);
        }
    },
    CheckProp: function CheckProp(Obj, type, prop) {
        Lure.SetProperty(Obj, prop, Lure.PropTypes.TryParse(type, Lure.GetProperty(Obj, prop), prop));
    },
    TryParse: function TryParse(PropType, Val, prop) {
        var n = void 0;
        switch (PropType) {
            case Type.Number:
                n = parseFloat(Val);
                if (Number.isNaN(n) || !Lure.isNumeric(Val)) {
                    //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not a Number`));
                    console.warn('[Lure.PropTypes] ' + prop + ' ' + Val + ' is not a Number');
                    n = 0;
                }
                return n;
            case Type.Int:
                n = parseInt(Val);
                if (Number.isNaN(n) || !Lure.isNumeric(Val)) {
                    //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not Int`));
                    console.warn('[Lure.PropTypes] ' + prop + ' ' + Val + ' is not Int');
                    n = 0;
                }
                return n;
            case Type.UInt:
                n = parseInt(Val);
                if (Number.isNaN(n) || n < 0 || !Lure.isNumeric(Val)) {
                    //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not UInt`));
                    console.warn('[Lure.PropTypes] ' + prop + ' ' + Val + ' is not UInt');
                    n = 0;
                }
                return n;
            case Type.Bool:
                if (Val === 'true') Val = true;
                if (Val === 'false') Val = false;
                if (Val !== true && Val !== false) {
                    console.warn('[Lure.PropTypes] ' + prop + ' ' + Val + ' is not Bool');
                    Val = false;
                }
                return Val;
            case Type.Date:
                return Lure.Date(Val).Date;
        }
        return Val;
    }
};

module.exports = PropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./../Date/Date.js":42}],47:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotifierCount = 0;

var LurePushNotifier = function LurePushNotifier() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$Target = _ref.Target,
        Target = _ref$Target === undefined ? document.body : _ref$Target,
        _ref$Duration = _ref.Duration,
        Duration = _ref$Duration === undefined ? 500 : _ref$Duration,
        _ref$Timeout = _ref.Timeout,
        Timeout = _ref$Timeout === undefined ? 5000 : _ref$Timeout,
        _ref$Style = _ref.Style,
        Style = _ref$Style === undefined ? {} : _ref$Style,
        _ref$Show = _ref.Show,
        Show = _ref$Show === undefined ? null : _ref$Show,
        _ref$Hide = _ref.Hide,
        Hide = _ref$Hide === undefined ? null : _ref$Hide,
        _ref$isNewInstance = _ref.isNewInstance,
        isNewInstance = _ref$isNewInstance === undefined ? false : _ref$isNewInstance;

    _classCallCheck(this, LurePushNotifier);

    NotifierCount++;

    this.Options = {
        Style: {
            padding: Style.padding ? Style.padding : '10px 20px',
            marginTop: Style.marginTop ? Style.marginTop : "5px",
            borderRadius: Style.borderRadius ? Style.borderRadius : "0px",
            backgroundColor: Style.backgroundColor ? Style.backgroundColor : '#d00',
            color: Style.color ? Style.color : "#fff"
        }
    };
    var Block = void 0;
    if (!isNewInstance) {
        Block = Lure.Select('#lure-customlog-1');
    }
    if (isNewInstance || Block === null) {
        Block = document.createElement('div');
        Block.id = "lure-customlog-" + NotifierCount;
        Block.style.position = "fixed";
        Block.style.right = "5px";
        Block.style.bottom = "5px";
        Block.style.zIndex = "100";
    }

    /*function Show(div) {
     div.style.opacity = '1';
     }
     function Hide(div) {
     div.style.opacity = '0';
     }*/
    Target.appendChild(Block);

    /* API */
    this.AddLine = function (text) {
        var div = document.createElement('div');
        div.innerHTML = text;
        for (var style in this.Options.Style) {
            div.style[style] = this.Options.Style[style];
        }
        div.style.position = 'relative';
        div.style.opacity = '0';
        div.style.transition = Duration + "ms ease-in";
        var LifeLine = document.createElement('div');
        LifeLine.style.height = '5px';
        LifeLine.style.width = '100%';
        LifeLine.style.backgroundColor = 'rgba(0,0,0,0.4)';
        LifeLine.style.position = 'absolute';
        LifeLine.style.bottom = '0';
        LifeLine.style.left = '0';
        LifeLine.style.transition = Timeout - 50 + "ms linear";
        div.appendChild(LifeLine);
        ///
        Block.appendChild(div);
        div.style.opacity = '1';
        setTimeout(function () {
            LifeLine.style.width = '0';
        }, 50);
        div.LureTimeout = setTimeout(function () {
            div.style.opacity = '0';
            setTimeout(function () {
                div.remove();
            }, Duration);
        }, Timeout);
    };
};

module.exports = LurePushNotifier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1c2gtbm90aWZpZXIuanMiXSwibmFtZXMiOlsiTm90aWZpZXJDb3VudCIsIkx1cmVQdXNoTm90aWZpZXIiLCJUYXJnZXQiLCJkb2N1bWVudCIsImJvZHkiLCJEdXJhdGlvbiIsIlRpbWVvdXQiLCJTdHlsZSIsIlNob3ciLCJIaWRlIiwiaXNOZXdJbnN0YW5jZSIsIk9wdGlvbnMiLCJwYWRkaW5nIiwibWFyZ2luVG9wIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJCbG9jayIsIkx1cmUiLCJTZWxlY3QiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJzdHlsZSIsInBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJ6SW5kZXgiLCJhcHBlbmRDaGlsZCIsIkFkZExpbmUiLCJ0ZXh0IiwiZGl2IiwiaW5uZXJIVE1MIiwib3BhY2l0eSIsInRyYW5zaXRpb24iLCJMaWZlTGluZSIsImhlaWdodCIsIndpZHRoIiwibGVmdCIsInNldFRpbWVvdXQiLCJMdXJlVGltZW91dCIsInJlbW92ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxnQkFBZ0IsQ0FBcEI7O0lBQ01DLGdCLEdBQ0YsNEJBUWlCO0FBQUEsbUZBQUgsRUFBRztBQUFBLDJCQVBEQyxNQU9DO0FBQUEsUUFQREEsTUFPQywrQkFQUUMsU0FBU0MsSUFPakI7QUFBQSw2QkFOREMsUUFNQztBQUFBLFFBTkRBLFFBTUMsaUNBTlUsR0FNVjtBQUFBLDRCQUxEQyxPQUtDO0FBQUEsUUFMREEsT0FLQyxnQ0FMVSxJQUtWO0FBQUEsMEJBSkRDLEtBSUM7QUFBQSxRQUpEQSxLQUlDLDhCQUpVLEVBSVY7QUFBQSx5QkFIREMsSUFHQztBQUFBLFFBSERBLElBR0MsNkJBSFUsSUFHVjtBQUFBLHlCQUZEQyxJQUVDO0FBQUEsUUFGREEsSUFFQyw2QkFGVSxJQUVWO0FBQUEsa0NBRERDLGFBQ0M7QUFBQSxRQUREQSxhQUNDLHNDQURlLEtBQ2Y7O0FBQUE7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QyxPQUxlLENBQWxCO0FBTUgsS0EvQkQ7QUFnQ0gsQzs7QUFLTG1DLE9BQU9DLE9BQVAsR0FBaUJ6QyxnQkFBakIiLCJmaWxlIjoicHVzaC1ub3RpZmllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBOb3RpZmllckNvdW50ID0gMDtcclxuY2xhc3MgTHVyZVB1c2hOb3RpZmllciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgICAgICAgICAgICAgVGFyZ2V0ID0gZG9jdW1lbnQuYm9keSxcclxuICAgICAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBUaW1lb3V0ICA9IDUwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgU3R5bGUgICAgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICBTaG93ICAgICA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgSGlkZSAgICAgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTmV3SW5zdGFuY2UgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfT17fSl7XHJcbiAgICAgICAgTm90aWZpZXJDb3VudCsrO1xyXG5cclxuICAgICAgICB0aGlzLk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIFN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAgICAgICAgICAgU3R5bGUucGFkZGluZyAgICAgICAgID8gU3R5bGUucGFkZGluZyAgICAgICAgIDogJzEwcHggMjBweCcsXHJcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICAgICAgICAgU3R5bGUubWFyZ2luVG9wICAgICAgID8gU3R5bGUubWFyZ2luVG9wICAgICAgIDogXCI1cHhcIixcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogICAgICBTdHlsZS5ib3JkZXJSYWRpdXMgICAgPyBTdHlsZS5ib3JkZXJSYWRpdXMgICAgOiBcIjBweFwiLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAgIFN0eWxlLmJhY2tncm91bmRDb2xvciA/IFN0eWxlLmJhY2tncm91bmRDb2xvciA6ICcjZDAwJyxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAgICAgICAgICAgICBTdHlsZS5jb2xvciAgICAgICAgICAgPyBTdHlsZS5jb2xvciAgICAgICAgICAgOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBCbG9jaztcclxuICAgICAgICBpZiAoIWlzTmV3SW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBCbG9jayA9IEx1cmUuU2VsZWN0KCcjbHVyZS1jdXN0b21sb2ctMScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNOZXdJbnN0YW5jZSB8fCBCbG9jayA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgIEJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIEJsb2NrLmlkID0gYGx1cmUtY3VzdG9tbG9nLSR7Tm90aWZpZXJDb3VudH1gO1xyXG4gICAgICAgICAgICBCbG9jay5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcclxuICAgICAgICAgICAgQmxvY2suc3R5bGUucmlnaHQgICAgPSBcIjVweFwiO1xyXG4gICAgICAgICAgICBCbG9jay5zdHlsZS5ib3R0b20gICA9IFwiNXB4XCI7XHJcbiAgICAgICAgICAgIEJsb2NrLnN0eWxlLnpJbmRleCAgID0gXCIxMDBcIjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKmZ1bmN0aW9uIFNob3coZGl2KSB7XHJcbiAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGZ1bmN0aW9uIEhpZGUoZGl2KSB7XHJcbiAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICB9Ki9cclxuICAgICAgICBUYXJnZXQuYXBwZW5kQ2hpbGQoQmxvY2spO1xyXG5cclxuICAgICAgICAvKiBBUEkgKi9cclxuICAgICAgICB0aGlzLkFkZExpbmUgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gdGV4dDtcclxuICAgICAgICAgICAgZm9yIChsZXQgc3R5bGUgaW4gdGhpcy5PcHRpb25zLlN0eWxlKXtcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZVtzdHlsZV0gPSB0aGlzLk9wdGlvbnMuU3R5bGVbc3R5bGVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICBkaXYuc3R5bGUudHJhbnNpdGlvbiA9IGAke0R1cmF0aW9ufW1zIGVhc2UtaW5gO1xyXG4gICAgICAgICAgICBjb25zdCBMaWZlTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBMaWZlTGluZS5zdHlsZS5oZWlnaHQgPSAnNXB4JztcclxuICAgICAgICAgICAgTGlmZUxpbmUuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIExpZmVMaW5lLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuNCknO1xyXG4gICAgICAgICAgICBMaWZlTGluZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIExpZmVMaW5lLnN0eWxlLmJvdHRvbSA9ICcwJztcclxuICAgICAgICAgICAgTGlmZUxpbmUuc3R5bGUubGVmdCA9ICcwJztcclxuICAgICAgICAgICAgTGlmZUxpbmUuc3R5bGUudHJhbnNpdGlvbiA9IGAke1RpbWVvdXQtNTB9bXMgbGluZWFyYDtcclxuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKExpZmVMaW5lKTtcclxuICAgICAgICAgICAgLy8vXHJcbiAgICAgICAgICAgIEJsb2NrLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIExpZmVMaW5lLnN0eWxlLndpZHRoID0gJzAnO1xyXG5cclxuICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICBkaXYuTHVyZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpdi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0sIER1cmF0aW9uKVxyXG4gICAgICAgICAgICB9LCBUaW1lb3V0KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEx1cmVQdXNoTm90aWZpZXI7Il19
},{}],48:[function(require,module,exports){
'use strict';

/**
 * @namespace module
 */
var PushNotifier = require('./push-notifier.js');

var LSys = {
    Error: function Error(Text, err) {
        LSys.ShowError(Text);
        console.error(Text, err ? err : '');
    },
    Warn: function Warn(Text) {
        LSys.ShowWarn(Text);
        console.warn(Text);
    },
    Success: function Success(Text) {
        LSys.ShowSuccess(Text);
    },
    Notice: function Notice(Text, TextLog) {
        LSys.ShowNotice(Text);
        if (TextLog) console.log(TextLog);
    },

    ShowError: function ShowError(text) {
        if (!LSys._ShowError) LSys._ShowError = new PushNotifier();
        LSys._ShowError.AddLine(text);
    },
    ShowWarn: function ShowWarn(text) {
        if (!LSys._ShowWarn) LSys._ShowWarn = new PushNotifier({
            Style: {
                backgroundColor: "darkorange"
            }
        });
        LSys._ShowWarn.AddLine(text);
    },

    ShowSuccess: function ShowSuccess(text) {
        if (!LSys._ShowSuccess) LSys._ShowSuccess = new PushNotifier({
            Style: {
                backgroundColor: "#45c971",
                color: '#fff'
            }
        });
        LSys._ShowSuccess.AddLine(text);
    },
    ShowNotice: function ShowNotice(text) {
        if (!LSys._ShowNotice) LSys._ShowNotice = new PushNotifier({
            Style: {
                backgroundColor: "#00598e",
                color: '#FFF'
            }
        });
        LSys._ShowNotice.AddLine(text);
    }
};

module.exports = LSys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5c3RlbS5qcyJdLCJuYW1lcyI6WyJQdXNoTm90aWZpZXIiLCJyZXF1aXJlIiwiTFN5cyIsIkVycm9yIiwiVGV4dCIsImVyciIsIlNob3dFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsIldhcm4iLCJTaG93V2FybiIsIndhcm4iLCJTdWNjZXNzIiwiU2hvd1N1Y2Nlc3MiLCJOb3RpY2UiLCJUZXh0TG9nIiwiU2hvd05vdGljZSIsImxvZyIsInRleHQiLCJfU2hvd0Vycm9yIiwiQWRkTGluZSIsIl9TaG93V2FybiIsIlN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiX1Nob3dTdWNjZXNzIiwiY29sb3IiLCJfU2hvd05vdGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7OztBQUdBLElBQUlBLGVBQWVDLFFBQVEsb0JBQVIsQ0FBbkI7O0FBRUEsSUFBSUMsT0FBTztBQUNQQyxTQURPLGlCQUNEQyxJQURDLEVBQ0tDLEdBREwsRUFDUztBQUNaSCxhQUFLSSxTQUFMLENBQWVGLElBQWY7QUFDQUcsZ0JBQVFDLEtBQVIsQ0FBY0osSUFBZCxFQUFvQkMsTUFBS0EsR0FBTCxHQUFTLEVBQTdCO0FBQ0gsS0FKTTtBQUtQSSxRQUxPLGdCQUtGTCxJQUxFLEVBS0c7QUFDTkYsYUFBS1EsUUFBTCxDQUFjTixJQUFkO0FBQ0FHLGdCQUFRSSxJQUFSLENBQWFQLElBQWI7QUFDSCxLQVJNO0FBU1BRLFdBVE8sbUJBU0NSLElBVEQsRUFTTTtBQUNURixhQUFLVyxXQUFMLENBQWlCVCxJQUFqQjtBQUNILEtBWE07QUFZUFUsVUFaTyxrQkFZQVYsSUFaQSxFQVlNVyxPQVpOLEVBWWM7QUFDakJiLGFBQUtjLFVBQUwsQ0FBZ0JaLElBQWhCO0FBQ0EsWUFBSVcsT0FBSixFQUNJUixRQUFRVSxHQUFSLENBQVlGLE9BQVo7QUFDUCxLQWhCTTs7QUFpQlBULGVBQVcsbUJBQVVZLElBQVYsRUFBZ0I7QUFDdkIsWUFBSSxDQUFDaEIsS0FBS2lCLFVBQVYsRUFDSWpCLEtBQUtpQixVQUFMLEdBQWtCLElBQUluQixZQUFKLEVBQWxCO0FBQ0pFLGFBQUtpQixVQUFMLENBQWdCQyxPQUFoQixDQUF3QkYsSUFBeEI7QUFDSCxLQXJCTTtBQXNCUFIsY0FBVSxrQkFBVVEsSUFBVixFQUFnQjtBQUN0QixZQUFJLENBQUNoQixLQUFLbUIsU0FBVixFQUNJbkIsS0FBS21CLFNBQUwsR0FBaUIsSUFBSXJCLFlBQUosQ0FBaUI7QUFDOUJzQixtQkFBTztBQUNIQyxpQ0FBaUI7QUFEZDtBQUR1QixTQUFqQixDQUFqQjtBQUtKckIsYUFBS21CLFNBQUwsQ0FBZUQsT0FBZixDQUF1QkYsSUFBdkI7QUFDSCxLQTlCTTs7QUFnQ1BMLGlCQUFhLHFCQUFVSyxJQUFWLEVBQWdCO0FBQ3pCLFlBQUksQ0FBQ2hCLEtBQUtzQixZQUFWLEVBQ0l0QixLQUFLc0IsWUFBTCxHQUFvQixJQUFJeEIsWUFBSixDQUFpQjtBQUNqQ3NCLG1CQUFPO0FBQ0hDLGlDQUFpQixTQURkO0FBRUhFLHVCQUFPO0FBRko7QUFEMEIsU0FBakIsQ0FBcEI7QUFNSnZCLGFBQUtzQixZQUFMLENBQWtCSixPQUFsQixDQUEwQkYsSUFBMUI7QUFDSCxLQXpDTTtBQTBDUEYsZ0JBQVksb0JBQVVFLElBQVYsRUFBZ0I7QUFDeEIsWUFBSSxDQUFDaEIsS0FBS3dCLFdBQVYsRUFDSXhCLEtBQUt3QixXQUFMLEdBQW1CLElBQUkxQixZQUFKLENBQWlCO0FBQ2hDc0IsbUJBQU87QUFDSEMsaUNBQWlCLFNBRGQ7QUFFSEUsdUJBQU87QUFGSjtBQUR5QixTQUFqQixDQUFuQjtBQU1KdkIsYUFBS3dCLFdBQUwsQ0FBaUJOLE9BQWpCLENBQXlCRixJQUF6QjtBQUNIO0FBbkRNLENBQVg7O0FBc0RBUyxPQUFPQyxPQUFQLEdBQWlCMUIsSUFBakIiLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lc3BhY2UgbW9kdWxlXHJcbiAqL1xyXG5sZXQgUHVzaE5vdGlmaWVyID0gcmVxdWlyZSgnLi9wdXNoLW5vdGlmaWVyLmpzJyk7XHJcblxyXG5sZXQgTFN5cyA9IHtcclxuICAgIEVycm9yKFRleHQsIGVycil7XHJcbiAgICAgICAgTFN5cy5TaG93RXJyb3IoVGV4dCk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihUZXh0LCBlcnI/IGVycjonJyk7XHJcbiAgICB9LFxyXG4gICAgV2FybihUZXh0KXtcclxuICAgICAgICBMU3lzLlNob3dXYXJuKFRleHQpO1xyXG4gICAgICAgIGNvbnNvbGUud2FybihUZXh0KTtcclxuICAgIH0sXHJcbiAgICBTdWNjZXNzKFRleHQpe1xyXG4gICAgICAgIExTeXMuU2hvd1N1Y2Nlc3MoVGV4dCk7XHJcbiAgICB9LFxyXG4gICAgTm90aWNlKFRleHQsIFRleHRMb2cpe1xyXG4gICAgICAgIExTeXMuU2hvd05vdGljZShUZXh0KTtcclxuICAgICAgICBpZiAoVGV4dExvZylcclxuICAgICAgICAgICAgY29uc29sZS5sb2coVGV4dExvZyk7XHJcbiAgICB9LFxyXG4gICAgU2hvd0Vycm9yOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIGlmICghTFN5cy5fU2hvd0Vycm9yKVxyXG4gICAgICAgICAgICBMU3lzLl9TaG93RXJyb3IgPSBuZXcgUHVzaE5vdGlmaWVyKCk7XHJcbiAgICAgICAgTFN5cy5fU2hvd0Vycm9yLkFkZExpbmUodGV4dCk7XHJcbiAgICB9LFxyXG4gICAgU2hvd1dhcm46IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgaWYgKCFMU3lzLl9TaG93V2FybilcclxuICAgICAgICAgICAgTFN5cy5fU2hvd1dhcm4gPSBuZXcgUHVzaE5vdGlmaWVyKHtcclxuICAgICAgICAgICAgICAgIFN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImRhcmtvcmFuZ2VcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBMU3lzLl9TaG93V2Fybi5BZGRMaW5lKHRleHQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBTaG93U3VjY2VzczogZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBpZiAoIUxTeXMuX1Nob3dTdWNjZXNzKVxyXG4gICAgICAgICAgICBMU3lzLl9TaG93U3VjY2VzcyA9IG5ldyBQdXNoTm90aWZpZXIoe1xyXG4gICAgICAgICAgICAgICAgU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzQ1Yzk3MVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgTFN5cy5fU2hvd1N1Y2Nlc3MuQWRkTGluZSh0ZXh0KTtcclxuICAgIH0sXHJcbiAgICBTaG93Tm90aWNlOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIGlmICghTFN5cy5fU2hvd05vdGljZSlcclxuICAgICAgICAgICAgTFN5cy5fU2hvd05vdGljZSA9IG5ldyBQdXNoTm90aWZpZXIoe1xyXG4gICAgICAgICAgICAgICAgU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzAwNTk4ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI0ZGRidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgTFN5cy5fU2hvd05vdGljZS5BZGRMaW5lKHRleHQpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMU3lzOyJdfQ==
},{"./push-notifier.js":47}],49:[function(require,module,exports){
'use strict';

module.exports = {
    CSSButtonBusy: 'l-busy'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ1NTQnV0dG9uQnVzeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxtQkFBZTtBQURGLENBQWpCIiwiZmlsZSI6ImNvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgQ1NTQnV0dG9uQnVzeTogJ2wtYnVzeSdcclxufTsiXX0=
},{}],50:[function(require,module,exports){
'use strict';

module.exports = {
    en: {
        Lang: {
            Change: 'Change',
            Remove: 'Remove',
            GetMore: 'Get more',
            GetAll: 'Get all',
            Refresh: 'Refresh',
            YouHaveNoPermission: 'You have no permission',
            Ok: 'Ok',
            Cancel: 'Cancel'
        },
        DateFormat: 'MM.DD.YYYY',
        DateFormatFull: 'MM.DD.YYYY HH:mm:ss',
        MonthNames: ["January", "February", "March", "April", "May", "June", "Jule", "August", "September", "October", "November", "December"],
        MonthNamesBanded: ["January", "February", "March", "April", "May", "June", "Jule", "August", "September", "October", "November", "December"],
        MonthNamesShort: ["jan.", "feb.", "mar.", "apr.", "may", "jun.", "jul.", "aug.", "sep.", "oct.", "nov.", "dec."],
        WeekDays: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        WeekDaysShort: ["mo", "tu", "we", "th", "fr", "sa", "su"]
    },
    ru: {
        Lang: {
            Change: 'Изменить',
            Remove: 'Удалить',
            GetMore: 'Загрузить еще',
            GetAll: 'Загрузить все',
            Refresh: 'Обновить',
            YouHaveNoPermission: 'Недостаточно прав',
            Ok: 'Ок',
            Cancel: 'Отмена'
        },
        DateFormat: 'DD.MM.YYYY',
        DateFormatFull: 'DD.MM.YYYY HH:mm:ss',
        MonthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        MonthNamesBanded: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"],
        MonthNamesShort: ["янв.", "фев.", "мар.", "апр.", "май", "июн.", "июл.", "авг.", "сен.", "окт.", "ноя.", "дек."],
        WeekDays: ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"],
        WeekDaysShort: ["пн", "вт", "ср", "чт", "пт", "сб", "вс"]
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN1bHR1cmUtaW5mby5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZW4iLCJMYW5nIiwiQ2hhbmdlIiwiUmVtb3ZlIiwiR2V0TW9yZSIsIkdldEFsbCIsIlJlZnJlc2giLCJZb3VIYXZlTm9QZXJtaXNzaW9uIiwiT2siLCJDYW5jZWwiLCJEYXRlRm9ybWF0IiwiRGF0ZUZvcm1hdEZ1bGwiLCJNb250aE5hbWVzIiwiTW9udGhOYW1lc0JhbmRlZCIsIk1vbnRoTmFtZXNTaG9ydCIsIldlZWtEYXlzIiwiV2Vla0RheXNTaG9ydCIsInJ1Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JDLFFBQUk7QUFDQUMsY0FBTTtBQUNGQyxvQkFBUSxRQUROO0FBRUZDLG9CQUFRLFFBRk47QUFHRkMscUJBQVMsVUFIUDtBQUlGQyxvQkFBUSxTQUpOO0FBS0ZDLHFCQUFTLFNBTFA7QUFNRkMsaUNBQXFCLHdCQU5uQjtBQU9GQyxnQkFBSSxJQVBGO0FBUUZDLG9CQUFRO0FBUk4sU0FETjtBQVdBQyxvQkFBWSxZQVhaO0FBWUFDLHdCQUFnQixxQkFaaEI7QUFhQUMsb0JBQVksQ0FBQyxTQUFELEVBQVksVUFBWixFQUF3QixPQUF4QixFQUFpQyxPQUFqQyxFQUEwQyxLQUExQyxFQUFpRCxNQUFqRCxFQUF5RCxNQUF6RCxFQUFpRSxRQUFqRSxFQUEyRSxXQUEzRSxFQUF3RixTQUF4RixFQUFtRyxVQUFuRyxFQUErRyxVQUEvRyxDQWJaO0FBY0FDLDBCQUFrQixDQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLEVBQTBDLEtBQTFDLEVBQWlELE1BQWpELEVBQXlELE1BQXpELEVBQWlFLFFBQWpFLEVBQTJFLFdBQTNFLEVBQXdGLFNBQXhGLEVBQW1HLFVBQW5HLEVBQStHLFVBQS9HLENBZGxCO0FBZUFDLHlCQUFpQixDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE1BQWpCLEVBQXlCLE1BQXpCLEVBQWlDLEtBQWpDLEVBQXdDLE1BQXhDLEVBQWdELE1BQWhELEVBQXdELE1BQXhELEVBQWdFLE1BQWhFLEVBQXdFLE1BQXhFLEVBQWdGLE1BQWhGLEVBQXdGLE1BQXhGLENBZmpCO0FBZ0JBQyxrQkFBVSxDQUFDLFFBQUQsRUFBVyxTQUFYLEVBQXNCLFdBQXRCLEVBQW1DLFVBQW5DLEVBQStDLFFBQS9DLEVBQXlELFVBQXpELEVBQXFFLFFBQXJFLENBaEJWO0FBaUJBQyx1QkFBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQztBQWpCZixLQURTO0FBb0JiQyxRQUFJO0FBQ0FoQixjQUFNO0FBQ0ZDLG9CQUFRLFVBRE47QUFFRkMsb0JBQVEsU0FGTjtBQUdGQyxxQkFBUyxlQUhQO0FBSUZDLG9CQUFRLGVBSk47QUFLRkMscUJBQVMsVUFMUDtBQU1GQyxpQ0FBcUIsbUJBTm5CO0FBT0ZDLGdCQUFJLElBUEY7QUFRRkMsb0JBQVE7QUFSTixTQUROO0FBV0FDLG9CQUFZLFlBWFo7QUFZQUMsd0JBQWdCLHFCQVpoQjtBQWFBQyxvQkFBWSxDQUFDLFFBQUQsRUFBVyxTQUFYLEVBQXNCLE1BQXRCLEVBQThCLFFBQTlCLEVBQXdDLEtBQXhDLEVBQStDLE1BQS9DLEVBQXVELE1BQXZELEVBQStELFFBQS9ELEVBQXlFLFVBQXpFLEVBQXFGLFNBQXJGLEVBQWdHLFFBQWhHLEVBQTBHLFNBQTFHLENBYlo7QUFjQUMsMEJBQWtCLENBQUMsUUFBRCxFQUFXLFNBQVgsRUFBc0IsT0FBdEIsRUFBK0IsUUFBL0IsRUFBeUMsS0FBekMsRUFBZ0QsTUFBaEQsRUFBd0QsTUFBeEQsRUFBZ0UsU0FBaEUsRUFBMkUsVUFBM0UsRUFBdUYsU0FBdkYsRUFBa0csUUFBbEcsRUFBNEcsU0FBNUcsQ0FkbEI7QUFlQUMseUJBQWlCLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsTUFBakIsRUFBeUIsTUFBekIsRUFBaUMsS0FBakMsRUFBd0MsTUFBeEMsRUFBZ0QsTUFBaEQsRUFBd0QsTUFBeEQsRUFBZ0UsTUFBaEUsRUFBd0UsTUFBeEUsRUFBZ0YsTUFBaEYsRUFBd0YsTUFBeEYsQ0FmakI7QUFnQkFDLGtCQUFVLENBQUMsYUFBRCxFQUFnQixTQUFoQixFQUEyQixPQUEzQixFQUFvQyxTQUFwQyxFQUErQyxTQUEvQyxFQUEwRCxTQUExRCxFQUFxRSxhQUFyRSxDQWhCVjtBQWlCQUMsdUJBQWUsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUMsSUFBckM7QUFqQmY7QUFwQlMsQ0FBakIiLCJmaWxlIjoiY3VsdHVyZS1pbmZvLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBlbjoge1xyXG4gICAgICAgIExhbmc6IHtcclxuICAgICAgICAgICAgQ2hhbmdlOiAnQ2hhbmdlJyxcclxuICAgICAgICAgICAgUmVtb3ZlOiAnUmVtb3ZlJyxcclxuICAgICAgICAgICAgR2V0TW9yZTogJ0dldCBtb3JlJyxcclxuICAgICAgICAgICAgR2V0QWxsOiAnR2V0IGFsbCcsXHJcbiAgICAgICAgICAgIFJlZnJlc2g6ICdSZWZyZXNoJyxcclxuICAgICAgICAgICAgWW91SGF2ZU5vUGVybWlzc2lvbjogJ1lvdSBoYXZlIG5vIHBlcm1pc3Npb24nLFxyXG4gICAgICAgICAgICBPazogJ09rJyxcclxuICAgICAgICAgICAgQ2FuY2VsOiAnQ2FuY2VsJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIERhdGVGb3JtYXQ6ICdNTS5ERC5ZWVlZJyxcclxuICAgICAgICBEYXRlRm9ybWF0RnVsbDogJ01NLkRELllZWVkgSEg6bW06c3MnLFxyXG4gICAgICAgIE1vbnRoTmFtZXM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVsZVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxyXG4gICAgICAgIE1vbnRoTmFtZXNCYW5kZWQ6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVsZVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxyXG4gICAgICAgIE1vbnRoTmFtZXNTaG9ydDogW1wiamFuLlwiLCBcImZlYi5cIiwgXCJtYXIuXCIsIFwiYXByLlwiLCBcIm1heVwiLCBcImp1bi5cIiwgXCJqdWwuXCIsIFwiYXVnLlwiLCBcInNlcC5cIiwgXCJvY3QuXCIsIFwibm92LlwiLCBcImRlYy5cIl0sXHJcbiAgICAgICAgV2Vla0RheXM6IFtcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIsIFwiU3VuZGF5XCJdLFxyXG4gICAgICAgIFdlZWtEYXlzU2hvcnQ6IFtcIm1vXCIsIFwidHVcIiwgXCJ3ZVwiLCBcInRoXCIsIFwiZnJcIiwgXCJzYVwiLCBcInN1XCJdLFxyXG4gICAgfSxcclxuICAgIHJ1OiB7XHJcbiAgICAgICAgTGFuZzoge1xyXG4gICAgICAgICAgICBDaGFuZ2U6ICfQmNC30LzQtdC90LjRgtGMJyxcclxuICAgICAgICAgICAgUmVtb3ZlOiAn0KPQtNCw0LvQuNGC0YwnLFxyXG4gICAgICAgICAgICBHZXRNb3JlOiAn0JfQsNCz0YDRg9C30LjRgtGMINC10YnQtScsXHJcbiAgICAgICAgICAgIEdldEFsbDogJ9CX0LDQs9GA0YPQt9C40YLRjCDQstGB0LUnLFxyXG4gICAgICAgICAgICBSZWZyZXNoOiAn0J7QsdC90L7QstC40YLRjCcsXHJcbiAgICAgICAgICAgIFlvdUhhdmVOb1Blcm1pc3Npb246ICfQndC10LTQvtGB0YLQsNGC0L7Rh9C90L4g0L/RgNCw0LInLFxyXG4gICAgICAgICAgICBPazogJ9Ce0LonLFxyXG4gICAgICAgICAgICBDYW5jZWw6ICfQntGC0LzQtdC90LAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRGF0ZUZvcm1hdDogJ0RELk1NLllZWVknLFxyXG4gICAgICAgIERhdGVGb3JtYXRGdWxsOiAnREQuTU0uWVlZWSBISDptbTpzcycsXHJcbiAgICAgICAgTW9udGhOYW1lczogW1wi0K/QvdCy0LDRgNGMXCIsIFwi0KTQtdCy0YDQsNC70YxcIiwgXCLQnNCw0YDRglwiLCBcItCQ0L/RgNC10LvRjFwiLCBcItCc0LDQuVwiLCBcItCY0Y7QvdGMXCIsIFwi0JjRjtC70YxcIiwgXCLQkNCy0LPRg9GB0YJcIiwgXCLQodC10L3RgtGP0LHRgNGMXCIsIFwi0J7QutGC0Y/QsdGA0YxcIiwgXCLQndC+0Y/QsdGA0YxcIiwgXCLQlNC10LrQsNCx0YDRjFwiXSxcclxuICAgICAgICBNb250aE5hbWVzQmFuZGVkOiBbXCLRj9C90LLQsNGA0Y9cIiwgXCLRhNC10LLRgNCw0LvRj1wiLCBcItC80LDRgNGC0LBcIiwgXCLQsNC/0YDQtdC70Y9cIiwgXCLQvNCw0Y9cIiwgXCLQuNGO0L3Rj1wiLCBcItC40Y7Qu9GPXCIsIFwi0LDQstCz0YPRgdGC0LBcIiwgXCLRgdC10L3RgtGP0LHRgNGPXCIsIFwi0L7QutGC0Y/QsdGA0Y9cIiwgXCLQvdC+0Y/QsdGA0Y9cIiwgXCLQtNC10LrQsNCx0YDRj1wiXSxcclxuICAgICAgICBNb250aE5hbWVzU2hvcnQ6IFtcItGP0L3Qsi5cIiwgXCLRhNC10LIuXCIsIFwi0LzQsNGALlwiLCBcItCw0L/RgC5cIiwgXCLQvNCw0LlcIiwgXCLQuNGO0L0uXCIsIFwi0LjRjtC7LlwiLCBcItCw0LLQsy5cIiwgXCLRgdC10L0uXCIsIFwi0L7QutGCLlwiLCBcItC90L7Rjy5cIiwgXCLQtNC10LouXCJdLFxyXG4gICAgICAgIFdlZWtEYXlzOiBbXCLQn9C+0L3QtdC00LXQu9GM0L3QuNC6XCIsIFwi0JLRgtC+0YDQvdC40LpcIiwgXCLQodGA0LXQtNCwXCIsIFwi0KfQtdGC0LLQtdGA0LNcIiwgXCLQn9GP0YLQvdC40YbQsFwiLCBcItCh0YPQsdCx0L7RgtCwXCIsIFwi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiXSxcclxuICAgICAgICBXZWVrRGF5c1Nob3J0OiBbXCLQv9C9XCIsIFwi0LLRglwiLCBcItGB0YBcIiwgXCLRh9GCXCIsIFwi0L/RglwiLCBcItGB0LFcIiwgXCLQstGBXCJdLFxyXG4gICAgfVxyXG59OyJdfQ==
},{}],51:[function(require,module,exports){
'use strict';

var Locale = 'ru';
var LureSystem = require('../modules/system/system.js');

var Settings = {
    /**
     *
     * @returns {string}
     */
    get Locale() {
        return Locale;
    },
    set Locale(loc) {
        if (Lure.CultureInfo[loc]) {
            Lure.Culture = Lure.CultureInfo[loc];
            Locale = loc;
        } else {
            LureSystem.ShowError('[SetLocale] Error. Locale "' + loc + '" is unknown');
        }
    },

    Common: require('./common/common.js'),

    Compiler: {
        Undefined: '???'
    },
    Confirm: {
        Wrapper: 'l-dialog-wrapper-transparent'
    },
    Content: {
        //AutoInit: false,
        CSSBlur: 'l-blur',
        CSSDialog: 'l-dialog',
        CSSDialogWrapper: 'l-dialog-wrapper',
        //Override: false,
        Animation: {
            Show: '',
            Hide: ''
        },
        Dialog: {
            Animation: {
                Show: 'l-animation_dialog-show',
                Hide: 'l-animation_dialog-hide'
            },
            Blur: false,
            Wrapper: true
        },
        Permission: {
            Attribute: 'data-permission',
            DefaultAction: 'hide',
            Users: [],
            Roles: [],
            Write: [],
            Action: function Action() {}, //()=>{Lure.System.ShowWarn(Lure.Culture.Lang.YouHaveNoPermission)},

            Rules: {
                DefaultSample: {
                    Users: [],
                    Roles: [],
                    Write: [],
                    ActionWrite: null,
                    Action: 'hide' //DefaultAction
                }
            },
            Actions: {
                hide: function hide(element) {
                    element.style.display = 'none';
                },
                show: function show(element) {
                    element.style.display = '';
                },
                remove: function remove(element) {
                    element.remove();
                }
            }
        }
    },
    Dialog: {
        Blur: 'l-blur',
        BlurTarget: '.body',
        Wrapper: 'l-dialog-wrapper'
    }

};

module.exports = Settings;
/*

class NishtackClass {
    m(){}

    constructor(){

    }
}
//***

let DefaultSettings = {};



let ssss = new NishtackClass();
ssss.Settings.position = -1;


Settings.NishtackClass = DefaultSettings;



//* custom *
Settings.NishtackClass.position = 124;
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHRpbmdzLmpzIl0sIm5hbWVzIjpbIkxvY2FsZSIsIkx1cmVTeXN0ZW0iLCJyZXF1aXJlIiwiU2V0dGluZ3MiLCJsb2MiLCJMdXJlIiwiQ3VsdHVyZUluZm8iLCJDdWx0dXJlIiwiU2hvd0Vycm9yIiwiQ29tbW9uIiwiQ29tcGlsZXIiLCJVbmRlZmluZWQiLCJDb25maXJtIiwiV3JhcHBlciIsIkNvbnRlbnQiLCJDU1NCbHVyIiwiQ1NTRGlhbG9nIiwiQ1NTRGlhbG9nV3JhcHBlciIsIkFuaW1hdGlvbiIsIlNob3ciLCJIaWRlIiwiRGlhbG9nIiwiQmx1ciIsIlBlcm1pc3Npb24iLCJBdHRyaWJ1dGUiLCJEZWZhdWx0QWN0aW9uIiwiVXNlcnMiLCJSb2xlcyIsIldyaXRlIiwiQWN0aW9uIiwiUnVsZXMiLCJEZWZhdWx0U2FtcGxlIiwiQWN0aW9uV3JpdGUiLCJBY3Rpb25zIiwiaGlkZSIsImVsZW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJzaG93IiwicmVtb3ZlIiwiQmx1clRhcmdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsU0FBUyxJQUFiO0FBQ0EsSUFBSUMsYUFBYUMsUUFBUSw2QkFBUixDQUFqQjs7QUFLQSxJQUFJQyxXQUFXO0FBQ1g7Ozs7QUFJQSxRQUFJSCxNQUFKLEdBQVk7QUFDUixlQUFPQSxNQUFQO0FBQ0gsS0FQVTtBQVFYLFFBQUlBLE1BQUosQ0FBV0ksR0FBWCxFQUFlO0FBQ1gsWUFBSUMsS0FBS0MsV0FBTCxDQUFpQkYsR0FBakIsQ0FBSixFQUNBO0FBQ0lDLGlCQUFLRSxPQUFMLEdBQWVGLEtBQUtDLFdBQUwsQ0FBaUJGLEdBQWpCLENBQWY7QUFDQUoscUJBQVNJLEdBQVQ7QUFDSCxTQUpELE1BTUE7QUFDSUgsdUJBQVdPLFNBQVgsaUNBQW1ESixHQUFuRDtBQUNIO0FBQ0osS0FsQlU7O0FBb0JYSyxZQUFRUCxRQUFRLG9CQUFSLENBcEJHOztBQXVCWFEsY0FBVTtBQUNOQyxtQkFBVztBQURMLEtBdkJDO0FBMEJYQyxhQUFTO0FBQ0xDLGlCQUFTO0FBREosS0ExQkU7QUE2QlhDLGFBQVM7QUFDTDtBQUNBQyxpQkFBVyxRQUZOO0FBR0xDLG1CQUFXLFVBSE47QUFJTEMsMEJBQWtCLGtCQUpiO0FBS0w7QUFDQUMsbUJBQVc7QUFDUEMsa0JBQU0sRUFEQztBQUVQQyxrQkFBTTtBQUZDLFNBTk47QUFVTEMsZ0JBQVE7QUFDSkgsdUJBQVc7QUFDUEMsc0JBQU0seUJBREM7QUFFUEMsc0JBQU07QUFGQyxhQURQO0FBS0pFLGtCQUFNLEtBTEY7QUFNSlQscUJBQVM7QUFOTCxTQVZIO0FBa0JMVSxvQkFBWTtBQUNSQyx1QkFBVyxpQkFESDtBQUVSQywyQkFBZSxNQUZQO0FBR1JDLG1CQUFPLEVBSEM7QUFJUkMsbUJBQU8sRUFKQztBQUtSQyxtQkFBTyxFQUxDO0FBTVJDLG9CQUFRLGtCQUFJLENBQUUsQ0FOTixFQU1ROztBQUVoQkMsbUJBQU87QUFDSEMsK0JBQWU7QUFDWEwsMkJBQU8sRUFESTtBQUVYQywyQkFBTyxFQUZJO0FBR1hDLDJCQUFPLEVBSEk7QUFJWEksaUNBQWEsSUFKRjtBQUtYSCw0QkFBUSxNQUxHLENBS0s7QUFMTDtBQURaLGFBUkM7QUFpQlJJLHFCQUFTO0FBQ0xDLHNCQUFNLGNBQUNDLE9BQUQsRUFBVztBQUNiQSw0QkFBUUMsS0FBUixDQUFjQyxPQUFkLEdBQXdCLE1BQXhCO0FBQ0gsaUJBSEk7QUFJTEMsc0JBQU0sY0FBQ0gsT0FBRCxFQUFXO0FBQ2JBLDRCQUFRQyxLQUFSLENBQWNDLE9BQWQsR0FBd0IsRUFBeEI7QUFDSCxpQkFOSTtBQU9MRSx3QkFBUSxnQkFBQ0osT0FBRCxFQUFXO0FBQ2ZBLDRCQUFRSSxNQUFSO0FBQ0g7QUFUSTtBQWpCRDtBQWxCUCxLQTdCRTtBQTZFWGxCLFlBQVE7QUFDSkMsY0FBTSxRQURGO0FBRUprQixvQkFBWSxPQUZSO0FBR0ozQixpQkFBUztBQUhMOztBQTdFRyxDQUFmOztBQXVGQTRCLE9BQU9DLE9BQVAsR0FBaUJ2QyxRQUFqQjtBQUNBIiwiZmlsZSI6InNldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IExvY2FsZSA9ICdydSc7XHJcbmxldCBMdXJlU3lzdGVtID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9zeXN0ZW0vc3lzdGVtLmpzJyk7XHJcblxyXG5cclxuXHJcblxyXG5sZXQgU2V0dGluZ3MgPSB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgTG9jYWxlKCl7XHJcbiAgICAgICAgcmV0dXJuIExvY2FsZTtcclxuICAgIH0sXHJcbiAgICBzZXQgTG9jYWxlKGxvYyl7XHJcbiAgICAgICAgaWYgKEx1cmUuQ3VsdHVyZUluZm9bbG9jXSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEx1cmUuQ3VsdHVyZSA9IEx1cmUuQ3VsdHVyZUluZm9bbG9jXTtcclxuICAgICAgICAgICAgTG9jYWxlID0gbG9jO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMdXJlU3lzdGVtLlNob3dFcnJvcihgW1NldExvY2FsZV0gRXJyb3IuIExvY2FsZSBcIiR7bG9jfVwiIGlzIHVua25vd25gKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgQ29tbW9uOiByZXF1aXJlKCcuL2NvbW1vbi9jb21tb24uanMnKSxcclxuXHJcblxyXG4gICAgQ29tcGlsZXI6IHtcclxuICAgICAgICBVbmRlZmluZWQ6ICc/Pz8nLFxyXG4gICAgfSxcclxuICAgIENvbmZpcm06IHtcclxuICAgICAgICBXcmFwcGVyOiAnbC1kaWFsb2ctd3JhcHBlci10cmFuc3BhcmVudCdcclxuICAgIH0sXHJcbiAgICBDb250ZW50OiB7XHJcbiAgICAgICAgLy9BdXRvSW5pdDogZmFsc2UsXHJcbiAgICAgICAgQ1NTQmx1cjogICAnbC1ibHVyJyxcclxuICAgICAgICBDU1NEaWFsb2c6ICdsLWRpYWxvZycsXHJcbiAgICAgICAgQ1NTRGlhbG9nV3JhcHBlcjogJ2wtZGlhbG9nLXdyYXBwZXInLFxyXG4gICAgICAgIC8vT3ZlcnJpZGU6IGZhbHNlLFxyXG4gICAgICAgIEFuaW1hdGlvbjoge1xyXG4gICAgICAgICAgICBTaG93OiAnJyxcclxuICAgICAgICAgICAgSGlkZTogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBEaWFsb2c6IHtcclxuICAgICAgICAgICAgQW5pbWF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBTaG93OiAnbC1hbmltYXRpb25fZGlhbG9nLXNob3cnLFxyXG4gICAgICAgICAgICAgICAgSGlkZTogJ2wtYW5pbWF0aW9uX2RpYWxvZy1oaWRlJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBCbHVyOiBmYWxzZSxcclxuICAgICAgICAgICAgV3JhcHBlcjogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIFBlcm1pc3Npb246IHtcclxuICAgICAgICAgICAgQXR0cmlidXRlOiAnZGF0YS1wZXJtaXNzaW9uJyxcclxuICAgICAgICAgICAgRGVmYXVsdEFjdGlvbjogJ2hpZGUnLFxyXG4gICAgICAgICAgICBVc2VyczogW10sXHJcbiAgICAgICAgICAgIFJvbGVzOiBbXSxcclxuICAgICAgICAgICAgV3JpdGU6IFtdLFxyXG4gICAgICAgICAgICBBY3Rpb246ICgpPT57fSwgLy8oKT0+e0x1cmUuU3lzdGVtLlNob3dXYXJuKEx1cmUuQ3VsdHVyZS5MYW5nLllvdUhhdmVOb1Blcm1pc3Npb24pfSxcclxuXHJcbiAgICAgICAgICAgIFJ1bGVzOiB7XHJcbiAgICAgICAgICAgICAgICBEZWZhdWx0U2FtcGxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgVXNlcnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIFJvbGVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBXcml0ZTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgQWN0aW9uV3JpdGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgQWN0aW9uOiAnaGlkZScsIC8vRGVmYXVsdEFjdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBBY3Rpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBoaWRlOiAoZWxlbWVudCk9PntcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaG93OiAoZWxlbWVudCk9PntcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZTogKGVsZW1lbnQpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIERpYWxvZzoge1xyXG4gICAgICAgIEJsdXI6ICdsLWJsdXInLFxyXG4gICAgICAgIEJsdXJUYXJnZXQ6ICcuYm9keScsXHJcbiAgICAgICAgV3JhcHBlcjogJ2wtZGlhbG9nLXdyYXBwZXInXHJcbiAgICB9LFxyXG5cclxufTtcclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZXR0aW5ncztcclxuLypcclxuXHJcbmNsYXNzIE5pc2h0YWNrQ2xhc3Mge1xyXG4gICAgbSgpe31cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG5cclxuICAgIH1cclxufVxyXG4vLyoqKlxyXG5cclxubGV0IERlZmF1bHRTZXR0aW5ncyA9IHt9O1xyXG5cclxuXHJcblxyXG5sZXQgc3NzcyA9IG5ldyBOaXNodGFja0NsYXNzKCk7XHJcbnNzc3MuU2V0dGluZ3MucG9zaXRpb24gPSAtMTtcclxuXHJcblxyXG5TZXR0aW5ncy5OaXNodGFja0NsYXNzID0gRGVmYXVsdFNldHRpbmdzO1xyXG5cclxuXHJcblxyXG4vLyogY3VzdG9tICpcclxuU2V0dGluZ3MuTmlzaHRhY2tDbGFzcy5wb3NpdGlvbiA9IDEyNDtcclxuKi8iXX0=
},{"../modules/system/system.js":48,"./common/common.js":49}]},{},[8])