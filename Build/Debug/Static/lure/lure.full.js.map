{"version":3,"sources":["lure.core.js","lure.core.application.js","lure.core.editable.js","lure.core.compiler.js","lure.core.controller.proto.js","lure.core.controller.templator.js","lure.core.library.js","lure.periodpicker.js","lure.content.js","lure.content.route.js","chart.initializer.js","chart.base.js","chart.graph.js","chart.draw.js","chart.js"],"names":[],"mappingsxjuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtsjjngtzajlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"lure.full.js","sourcesContent":["//\r\n// Lure Framework v0.29.7 [27.12.2017]\r\n//\r\n\r\n/* Date Format */\r\nDate.prototype.Format = function (format, isBandMonthNames) {\r\n   // console.warn('Deprecation warning.', 'This method will be killed on release. Use Lure.Date().Format');\r\n    return Lure.Date.Format(this, format, isBandMonthNames);\r\n};\r\n\r\n\r\n/* Micro LINQ */\r\n/**\r\n *\r\n * @param delegate\r\n * @returns {Array}\r\n */\r\nArray.prototype.Select = function (delegate) {\r\n    let a = [];\r\n    for (let i = 0; i < this.length; i++){\r\n        if (typeof delegate === 'string')\r\n            a.push((this[i][delegate]));\r\n        else\r\n            a.push(delegate(this[i], i));\r\n    }\r\n    return a;\r\n};\r\n/**\r\n *\r\n * @param delegateKey\r\n * @param delegateValue\r\n * @returns {{}}\r\n */\r\nArray.prototype.ToDictionary = function (delegateKey, delegateValue) {\r\n    let dict = {};\r\n    for (let i = 0; i < this.length; i++){\r\n        dict[delegateKey(this[i], i)] = delegateValue(this[i], i);\r\n    }\r\n    return dict;\r\n};\r\n/**\r\n *\r\n * @param delegate\r\n * @returns {Array}\r\n */\r\nArray.prototype.Where = function (delegate) {\r\n    let a = [];\r\n    for (let i = 0; i < this.length; i++){\r\n        if (delegate(this[i], i))\r\n            a.push(this[i]);\r\n    }\r\n    return a;\r\n};\r\n/**\r\n *\r\n * @param Default\r\n * @returns {*}\r\n */\r\nArray.prototype.FirstOrDefault = function (Default) {\r\n    for (let i = 0; i < this.length; i++){\r\n        if (this[i] !== null && typeof this[i] !== 'undefined' )\r\n            return this[i];\r\n    }\r\n    return typeof Default === 'undefined' ?  null : Default;\r\n};\r\nArray.prototype.First = function () {\r\n    return this[0];\r\n};\r\nArray.prototype.Last = function () {\r\n    return this[this.length-1];\r\n};\r\nArray.prototype.ToList = function () {\r\n    let a = [];\r\n    for (let i = 0; i < this.length; i++){\r\n        a.push(this[i]);\r\n    }\r\n    return a;\r\n};\r\nArray.prototype.Sort = function (delegate,...args) {\r\n    for (let i = 0; i < args.length; i++){\r\n\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nArray.prototype.GroupBy = function(key) {\r\n    let xx =  this.reduce(function(rv, x) {\r\n        (rv[x[key]] = rv[x[key]] || []).push(x);\r\n        return rv;\r\n    }, {});\r\n    let g = [];\r\n    for (let k in xx){\r\n        if (xx.hasOwnProperty(k) ){\r\n            xx[k].Key = k;\r\n            g.push(xx[k]);\r\n        }\r\n    }\r\n    return g;\r\n};\r\n\r\n\r\nNodeList.prototype.Select = Array.prototype.Select;\r\nNodeList.prototype.Where = Array.prototype.Where;\r\nNodeList.prototype.ToDictionary = Array.prototype.ToDictionary;\r\nNodeList.prototype.ToList = Array.prototype.ToList;\r\n\r\nHTMLCollection.prototype.Select = Array.prototype.Select;\r\nHTMLCollection.prototype.Where = Array.prototype.Where;\r\nHTMLCollection.prototype.ToDictionary = Array.prototype.ToDictionary;\r\nHTMLCollection.prototype.ToList = Array.prototype.ToList;\r\n\r\n\r\n//</utils>\r\n\r\n\r\n\r\n\r\nconst Lure = (function(){\r\n    class LureClass {\r\n        get Version(){\r\n            return 'v2.1.17'\r\n        }\r\n        constructor() {\r\n            this.Plugin = {\r\n                Regis5ter: function (PluginName, object, PluginEndPoint, RegistratorDelegate = function(){}) {\r\n                    if (typeof this[PluginName] !== 'undefined' && PluginName === 'Register'){\r\n                        return this.System.ShowError(`[Lure] Plugin name \"${PluginName}\" is not allowed.`);\r\n                    }\r\n                    this.Plugin[PluginName] = object;\r\n                    if (PluginEndPoint)\r\n                        this[PluginName] = this.Plugin[PluginName][PluginEndPoint];\r\n                    else\r\n                        this[PluginName] = this.Plugin[PluginName];\r\n                    RegistratorDelegate.call(this);\r\n                }.bind(this)\r\n            };\r\n            this.System = {\r\n                Error(Text, err){\r\n                    Lure.System.ShowError(Text);\r\n                    console.error(err? err:Text);\r\n                },\r\n                Warn(Text){\r\n                    Lure.System.ShowWarn(Text);\r\n                    console.warn(Text);\r\n                },\r\n                Success(Text){\r\n                    Lure.System.ShowSuccess(Text);\r\n                },\r\n                Notice(Text, TextLog){\r\n                    Lure.System.ShowNotice(Text);\r\n                    if (TextLog)\r\n                        console.log(TextLog);\r\n                },\r\n                ShowError: function (text) {\r\n                    if (!Lure.System._ShowError)\r\n                        Lure.System._ShowError = new Lure.CustomLog();\r\n                    Lure.System._ShowError.AddLine(text);\r\n                },\r\n                ShowWarn: function (text) {\r\n                    if (!Lure.System._ShowWarn)\r\n                        Lure.System._ShowWarn = new Lure.CustomLog({\r\n                            Style: {\r\n                                backgroundColor: \"darkorange\"\r\n                            }\r\n                        });\r\n                    Lure.System._ShowWarn.AddLine(text);\r\n                },\r\n\r\n                ShowSuccess: function (text) {\r\n                    if (!Lure.System._ShowSuccess)\r\n                        Lure.System._ShowSuccess = new Lure.CustomLog({\r\n                            Style: {\r\n                                backgroundColor: \"#45c971\",\r\n                                color: '#fff'\r\n                            }\r\n                        });\r\n                    Lure.System._ShowSuccess.AddLine(text);\r\n                },\r\n                ShowNotice: function (text) {\r\n                    if (!Lure.System._ShowNotice)\r\n                        Lure.System._ShowNotice = new Lure.CustomLog({\r\n                            Style: {\r\n                                backgroundColor: \"#00598e\",\r\n                                color: '#FFF'\r\n                            }\r\n                        });\r\n                    Lure.System._ShowNotice.AddLine(text);\r\n                }\r\n            };\r\n            this.Diagnostics = {\r\n                /** @namespace window.performance */\r\n                Perf: class LurePerformance{\r\n                    /**\r\n                     *\r\n                     * @param Name\r\n                     * @returns {*}\r\n                     * @constructor\r\n                     */\r\n                    Elapsed(Name = 'Perf') {\r\n                        if (!this.Enabled)\r\n                            return 0;\r\n                        this.Stepped = window.performance.now();        //istantly save\r\n                        let v = (this.Stepped - this.Started).toFixed(2);\r\n                        console.info(`[${Name}]: ${ v }ms`);\r\n                        \r\n                        return v;\r\n                    }\r\n\r\n                    /**\r\n                     *\r\n                     * @param Name\r\n                     * @returns {number}\r\n                     * @constructor\r\n                     */\r\n                    Perf(Name = 'Perf', isDraw=true) {\r\n                        let step = window.performance.now();\r\n                        if (!this.Enabled)\r\n                            return 0;\r\n                        let SpaceCount = 40-Name.length;\r\n                        let v = (step - this.Stepped).toFixed(4);\r\n                        if (isDraw)\r\n                            console.info(`%c[${Name}]:${' '.repeat(SpaceCount>0? SpaceCount: 1)} ${v}ms`, 'color: #3583a7');\r\n\r\n                        this.Stepped = window.performance.now();\r\n                        return v;\r\n                    }\r\n\r\n                    /**\r\n                     *\r\n                     * @returns {number}\r\n                     * @constructor\r\n                     */\r\n                    Reset() {\r\n                        this.Started = performance.now();\r\n                        this.Stepped = this.Started;\r\n                        return 0;\r\n                    }\r\n\r\n                    /**\r\n                     *\r\n                     * @param {boolean} Enabled\r\n                     */\r\n                    constructor(Enabled = true){\r\n                        this.Started = performance.now();\r\n                        this.Stepped = this.Started;\r\n                        this.Enabled = Enabled;\r\n                    }\r\n                }\r\n            };\r\n\r\n            \r\n\r\n            /* Controllers (Template builders) */\r\n            this.Controller = {\r\n                TreeBuilder: class TreeBuilder{\r\n                    constructor(\r\n                        {\r\n                            Target = null,                          //{string, HTMLElement}\r\n                            Data = [],\r\n                            ListElement = null,\r\n                            Drop = false,                       //{bool}   - horisontal menu with drop down subtrees;\r\n                            SubSelector = null,                 //{string} - cssselector of element, where put branches\r\n                            SubSelectorHandler = function(){},  //{function} - click handle on SubSelector Element (hide/show branch for exaple)\r\n\r\n                            BeforeBuild = function(){},\r\n                            AfterBuild = function(){},\r\n\r\n                            Owner = null               //Lure.Content, which owns this Controller\r\n                        }\r\n                    )\r\n                    {\r\n                        //### DEFINES\r\n                        this.isController = true;\r\n                        this.Content = Lure.Select(Target);\r\n                        this.Target = this.Content;\r\n                        this.Owner = Owner;\r\n                        this._Data = Data;\r\n                        this.SubSelector = SubSelector;\r\n                        this.SubSelectorHandler = SubSelectorHandler.bind(this.Owner? this.Owner : this);\r\n                        this.BeforeBuild = BeforeBuild.bind(this.Owner? this.Owner : this);\r\n                        this.AfterBuild = AfterBuild.bind(this.Owner? this.Owner : this);\r\n                        let SubTreeClass = Drop ? 'mtb-sub_tree dropable':'mtb-sub_tree';\r\n                        let Lvl = 0;\r\n                        let Branch = ListElement === null ? this.Content.innerHTML : ListElement;\r\n                        if (this.SubSelector === null){\r\n                            this.SubSelector = '.mtb-sub_tree';\r\n                            Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\r\n                                entag = `<div class=\"${SubTreeClass}\"></div>${entag}`;\r\n                                return html+entag\r\n                            })\r\n                        }\r\n                        this.LineBuilder = Lure.Compile(Branch, true);\r\n                        let $this = this;\r\n\r\n                        let Index = 0;          //unque serial number of branch\r\n\r\n                        let BuildElement = function(obj, key, indexJ) {\r\n                            Index++;\r\n                            let extra = {\r\n                                $lvl: Lvl,\r\n                                $key: key,\r\n                                $index: Index,\r\n                                $j: indexJ\r\n                            };\r\n                            let line = Lure.CreateElementFromString($this.LineBuilder.call($this.Owner, obj, extra));\r\n                            line.classList.add('mtb-branch');\r\n                            for (let key in obj)\r\n                            {\r\n                                if (!obj.hasOwnProperty(key))\r\n                                    continue;\r\n\r\n                                let ObjItem = obj[key];\r\n                                if (Array.isArray(ObjItem))\r\n                                {\r\n                                    Lvl++;\r\n                                    for (let i = 0; i < ObjItem.length; i++)\r\n                                    {\r\n                                        if ($this.SubSelector === null)\r\n                                        {\r\n                                            line.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            line.classList.add('mtb-has_tree');\r\n                                            if (Drop)\r\n                                                line.classList.add('dropable');\r\n                                            let sub = line.querySelector($this.SubSelector);\r\n                                            sub.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                        }\r\n                                    }\r\n                                    Lvl--;\r\n                                }\r\n                            }\r\n                            return line;\r\n                        };\r\n                        let Build = function () {\r\n                            $this.BeforeBuild();\r\n                            if (Array.isArray($this._Data))\r\n                            {\r\n                                $this.Content.innerHTML = '';\r\n                                Lvl++;\r\n                                for (let j = 0; j < $this._Data.length; j++)\r\n                                    $this.Content.appendChild(  BuildElement($this._Data[j], \"root\", 0) );\r\n                                Lvl--;\r\n                            }\r\n                            else{\r\n                                $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\r\n                            }\r\n                            Lvl = 0;\r\n                            Index = 0;\r\n                            $this.AfterBuild();\r\n\r\n                        };\r\n\r\n                        Build(this._Data);\r\n\r\n                        //### METHODS\r\n                        this.Refresh = function (data=$this._Data) {\r\n                            $this._Data = data;\r\n                            Build();\r\n                        }\r\n\r\n                    }\r\n                    get Data(){\r\n                        return this._Data;\r\n                    }\r\n                    set Data(data){\r\n                        this._Data = data;\r\n                    }\r\n                },\r\n            };\r\n\r\n\r\n            \r\n            ///\r\n            this.Settings = {\r\n                _Locale: 'ru',\r\n                /**\r\n                 *\r\n                 * @returns {string}\r\n                 * @constructor\r\n                 */\r\n                get Locale(){\r\n                    return this._Locale;\r\n                },\r\n                set Locale(loc){\r\n                    if (Lure.CultureInfo[loc])\r\n                    {\r\n                        Lure.Culture = Lure.CultureInfo[loc];\r\n                        this._Locale = loc;\r\n                    }\r\n                    else\r\n                    {\r\n                        Lure.System.ShowError(`[SetLocale] Error. Locale \"${loc}\" is unknown`)\r\n                    }\r\n                },\r\n                LocaleSort: 'en',\r\n                \r\n                Controller: {\r\n                    Common:{\r\n                        Undefined: '???'\r\n                    },\r\n                    Templator: {\r\n                        Pagination:{\r\n                            PageSize:  -1,\r\n                            DataLength:-1,\r\n                            DataCount: -1,\r\n                            PageGet: null,\r\n                            isGetAllButton:  true,\r\n                            isGetAllCount:   true,\r\n                            isGetMoreButton: true,\r\n                            isGetMoreCount:  true,\r\n                            isRefreshButton: true\r\n                        },\r\n                        isDataClone: false,\r\n                        isEmptyVisible: true,\r\n                    }\r\n                },\r\n\r\n                Dialog: {\r\n                    Blur: 'l-blur',\r\n                    BlurTarget: '.body',\r\n                    Wrapper: 'l-dialog-wrapper'\r\n                },\r\n\r\n                Confirm: {\r\n                    Wrapper: 'l-dialog-wrapper-transparent'\r\n                },\r\n\r\n                Common: {\r\n                    CSSButtonBusy: 'l-busy'\r\n                }\r\n            };\r\n            this.CultureInfo = {\r\n                en: {\r\n                    Lang: {\r\n                        Change: 'Change',\r\n                        Remove: 'Remove',\r\n                        GetMore: 'Get more',\r\n                        GetAll: 'Get all',\r\n                        Refresh: 'Refresh',\r\n                        YouHaveNoPermission: 'You have no permission',\r\n                        Ok: 'Ok',\r\n                        Cancel: 'Cancel',\r\n                    },\r\n                    DateFormat: 'MM.DD.YYYY',\r\n                    DateFormatFull: 'MM.DD.YYYY HH:mm:ss',\r\n                    MonthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"Jule\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n                    MonthNamesBanded: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"Jule\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n                    MonthNamesShort: [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"],\r\n                    WeekDays: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\r\n                    WeekDaysShort: [\"mo\", \"tu\", \"we\", \"th\", \"fr\", \"sa\", \"su\"],\r\n                },\r\n                ru: {\r\n                    Lang: {\r\n                        Change: 'Изменить',\r\n                        Remove: 'Удалить',\r\n                        GetMore: 'Загрузить еще',\r\n                        GetAll: 'Загрузить все',\r\n                        Refresh: 'Обновить',\r\n                        YouHaveNoPermission: 'Недостаточно прав',\r\n                        Ok: 'Ок',\r\n                        Cancel: 'Отмена',\r\n                    },\r\n                    DateFormat: 'DD.MM.YYYY',\r\n                    DateFormatFull: 'DD.MM.YYYY HH:mm:ss',\r\n                    MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\r\n                    MonthNamesBanded: [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"],\r\n                    MonthNamesShort: [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"],\r\n                    WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\r\n                    WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"],\r\n                }\r\n            };\r\n            //default/current\r\n            this.Culture = {\r\n                Lang: {\r\n                    Change: 'Изменить',\r\n                    Remove: 'Удалить',\r\n\r\n                },\r\n                DateFormat: 'DD.MM.YYYY',\r\n                DateFormatFull: 'DD.MM.YYYY HH:mm:ss',\r\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\r\n                MonthNamesBanded: [\"Января\", \"Февраля\", \"Марта\", \"Апреля\", \"Мая\", \"Июня\", \"Июля\", \"Августа\", \"Сентября\", \"Октября\", \"Ноября\", \"Декабря\"],\r\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\r\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\r\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"],\r\n            };\r\n            this.ContentList = {\r\n                _Root: [],\r\n                _Typed: []\r\n            };\r\n\r\n            /////\r\n            this._Dialog = {\r\n                List: [],\r\n                Add(DOMElement){\r\n                    if (Lure._Dialog.List.indexOf(DOMElement) < 0)\r\n                        Lure._Dialog.List.push(DOMElement);\r\n                },\r\n                Remove(DOMElement){\r\n                    //Lure.Route.Back();\r\n                    let i = Lure._Dialog.List.indexOf(DOMElement);\r\n                    if (i > -1){\r\n                        Lure._Dialog.List.splice(i, 1);\r\n                    }\r\n                },\r\n                get zIndex(){\r\n                    if (Lure._Dialog.List.length < 1)\r\n                        return 10;\r\n                    return Lure._Dialog.List\r\n                            .Select(x=>parseInt(window.getComputedStyle(x).zIndex))\r\n                            .sort((a,b)=>a<b)\r\n                            .First()\r\n                }\r\n            };\r\n            this._DialogCount = 0;\r\n            this._ConfirmCount = 0;\r\n\r\n\r\n            //TODO get full\r\n            this.PropTypes = {\r\n                /**\r\n                 *\r\n                 * @param obj\r\n                 * @returns {*}\r\n                 * @constructor\r\n                 */\r\n                GetType(obj){\r\n                    return Lure.GetType(obj)\r\n                },\r\n                Check(PropTypes, Obj){\r\n                    //debugger;\r\n                    for (let prop in PropTypes){\r\n                        // debugger;\r\n                        Lure.PropTypes.CheckProp(Obj, PropTypes[prop], prop);\r\n                    }\r\n                },\r\n                CheckProp(Obj, type, prop){\r\n                    Lure.SetProperty(Obj, prop, Lure.PropTypes.TryParse(type, Lure.GetProperty(Obj, prop), prop));\r\n                },\r\n                TryParse(PropType, Val, prop){\r\n                    let n;\r\n                    switch (PropType){\r\n                        case Lure.PropTypes.Number:\r\n                            n = parseFloat(Val);\r\n                            if (Number.isNaN(n) || !Lure.isNumeric(Val))\r\n                            {\r\n                                //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not a Number`));\r\n                                console.warn(`[Lure.PropTypes] ${prop} ${Val} is not a Number`);\r\n                                n = 0;\r\n                            }\r\n                            return n;\r\n                        case Lure.PropTypes.Int:\r\n                            n = parseInt(Val);\r\n                            if (Number.isNaN(n)|| !Lure.isNumeric(Val))\r\n                            {\r\n                                //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not Int`));\r\n                                console.warn(`[Lure.PropTypes] ${prop} ${Val} is not Int`);\r\n                                n = 0;\r\n                            }\r\n                            return n;\r\n                        case Lure.PropTypes.UInt:\r\n                            n = parseInt(Val);\r\n                            if (Number.isNaN(n) || n < 0 || !Lure.isNumeric(Val))\r\n                            {\r\n                                //console.warn(new TypeError(`[Lure.PropTypes] ${prop} ${Val} is not UInt`));\r\n                                console.warn(`[Lure.PropTypes] ${prop} ${Val} is not UInt`);\r\n                                n = 0;\r\n                            }\r\n                            return n;\r\n                        case Lure.PropTypes.Bool:\r\n                            if (Val === 'true' || Val === 'True')\r\n                                Val = true;\r\n                            if (Val === 'false' || Val === 'False')\r\n                                Val = false;\r\n                            if (Val !== true && Val !== false){\r\n                                console.warn(`[Lure.PropTypes] ${prop} ${Val} is not Bool`);\r\n                                Val = false;\r\n                            }\r\n                            return Val;\r\n                        case Lure.PropTypes.Date:\r\n                            return Lure.Date(Val).Date;\r\n                    }\r\n                    return Val;\r\n                },\r\n                Number:  'number',\r\n                Float:   'number',\r\n                Int:     'int',\r\n                UInt:    'uint',\r\n                Bool:    'boolean',\r\n                String:  'string',\r\n                Text:    'text',    //rich text\r\n                Function:'function',\r\n                Date:    'date',\r\n                List:    'list',\r\n                Array:   'list',\r\n                NodeList:'list',\r\n                Object:  'object',\r\n            };\r\n\r\n\r\n\r\n\r\n\r\n            this.Array = {\r\n                Remove: (array, delegate)=>{\r\n                    for (let i = array.length - 1; i >= 0; --i) {\r\n                        if (delegate(array[i], i)) {\r\n                            array.splice(i,1);\r\n                        }\r\n                    }\r\n                    return array;\r\n                }\r\n            };\r\n            this.Object = {\r\n                Clone: function (Object) {\r\n                    return JSON.parse(JSON.stringify(Object));  //TODO to optimize cloning\r\n                },\r\n                Copy: function (ObjectCopyFrom, ObjectCopyTo) {\r\n                    for (let p in ObjectCopyFrom){\r\n                        if (ObjectCopyFrom.hasOwnProperty(p)){\r\n                            ObjectCopyTo[p] = ObjectCopyFrom[p];\r\n                        }\r\n                    }\r\n                    return Object;\r\n                },\r\n                /**\r\n                 *\r\n                 * @param Obj\r\n                 * @param Prop\r\n                 * @returns {*}\r\n                 */\r\n                GetProperty(Obj, Prop) {\r\n                    if (Prop === '')\r\n                        return Obj;\r\n                    let Way = Prop.replace(/\\[([^\\]]+)\\]/g, '.$1');\r\n                    Way = Way.substring(0,1) === '.'? Way.substring(1):Way;\r\n                    Way = Way.split('.');\r\n                    let i = 0;\r\n                    let Dest = Obj;\r\n                    for (i; i < Way.length-1; i++){\r\n                        Dest = Dest[Way[i]];\r\n                    }\r\n                    if (Dest === void 0 || Dest === null){\r\n                        console.warn(`[Lure.Object.GetProperty] Property '${Prop}' is unreachable`, Obj, );\r\n                        return null;\r\n                    }\r\n                    return Dest[Way[i]];\r\n                },\r\n                SetProperty(Obj, Prop, Value) {\r\n                    if (Prop === ''){\r\n                        Obj = Value;\r\n                        return Obj;\r\n                    }\r\n                    let Way = Prop.replace(/\\[([^\\]]+)\\]/g, '.$1');\r\n                    Way = Way.substring(0,1) === '.'? Way.substring(1):Way;\r\n                    Way = Way.split('.');\r\n                    let i = 0;\r\n                    let Dest = Obj;\r\n                    for (i; i < Way.length-1; i++){\r\n                        Dest = Dest[Way[i]];\r\n                    }\r\n                    Dest[Way[i]] = Value;\r\n                    return Obj;\r\n                },\r\n                isEmpty(obj, isStrict = false){\r\n                    if (isStrict && typeof obj !== 'object')\r\n                        return false;\r\n                    return !(obj && Object.keys(obj).length>0);\r\n                }\r\n            };\r\n            this.Blob = {\r\n                SaveAs: function (Blob, FileName) {\r\n                    let a = document.createElement(\"a\");\r\n                    document.body.appendChild(a);\r\n                    a.style = \"display: none\";\r\n                    a.href = window.URL.createObjectURL(Blob);\r\n                    a.download = FileName;\r\n                    a.click();\r\n                    window.URL.revokeObjectURL(a.href);\r\n                },\r\n                /**\r\n                 *\r\n                 * @param Blob\r\n                 * @returns {Promise<string>}\r\n                 */\r\n                ToBase64: function (Blob) {\r\n                    return new Promise( (res, rej)=>{\r\n                        const reader = new FileReader();\r\n                        reader.readAsDataURL(Blob);\r\n                        reader.onloadend = function() {\r\n                            res(reader.result);\r\n                        };\r\n                        reader.onerror = rej;\r\n                    })\r\n                }\r\n            };\r\n            \r\n            this.DOM = {\r\n                ShowWithAnimation: function (HTMLElement, CSSAnimation) {\r\n                    let Duration = Lure.GetDurationAnimation(CSSAnimation, HTMLElement);\r\n                    HTMLElement.style.display = '';\r\n                    HTMLElement.classList.add(CSSAnimation);\r\n                    setTimeout(function () {\r\n                        HTMLElement.classList.remove(CSSAnimation);\r\n                    }, Duration)\r\n                },\r\n                HideWithAnimation: function (HTMLElement, CSSAnimation) {\r\n                    let Duration = Lure.GetDurationAnimation(CSSAnimation, HTMLElement);\r\n                    HTMLElement.classList.add(CSSAnimation);\r\n                    setTimeout(function () {\r\n                        HTMLElement.style.display = 'none';\r\n                        HTMLElement.classList.remove(CSSAnimation);\r\n                    }, Duration)\r\n                },\r\n                GetLineID: function (HTMLElement) {\r\n                    return parseInt(HTMLElement.dataset['line']);\r\n                },\r\n                \r\n                \r\n                Print: function (HTMLElement, CSSPrint=\"\") {\r\n                    let MyWindow = window.open('', 'PRINT');//, 'height=800,width=1000');\r\n                    let styles = '';\r\n                    for (let i = 0; i < document.styleSheets.length; i++){\r\n                        if(document.styleSheets[i].href){\r\n                            let rules;\r\n                            if (document.styleSheets[i].rules){\r\n                                rules = document.styleSheets[i].rules; //chrome\r\n                            }\r\n                            else if (document.styleSheets[i].cssRules){\r\n                                rules = document.styleSheets[i].cssRules; //firefox\r\n                            }\r\n                            if (!rules){\r\n                                continue;\r\n                            }\r\n                            for (let j = 0; j < rules.length; j++){\r\n                                if (rules[j].cssText.indexOf(\"@\") < 0) //skip other @media, @key-frames\r\n                                    styles += rules[j].cssText;\r\n                            }\r\n                        }\r\n                    }\r\n                    styles = `@media print{\r\n                        ${styles}\r\n                        .button-print{display:none!important}\r\n                        ${CSSPrint}\r\n                    }\r\n                    @media screen{\r\n                        ${styles}\r\n                        .button-print{display:none!important}\r\n                        ${CSSPrint}\r\n                    }`;\r\n                    //console.log('styles', styles);\r\n                    MyWindow.document.write('<html><head><title>' + document.title  + '</title>');\r\n\r\n                    MyWindow.document.write(`<style>${styles}</style>`);\r\n                    MyWindow.document.write('</head><body>');\r\n                    MyWindow.document.write(HTMLElement.innerHTML);\r\n                    MyWindow.document.write('</body></html>');\r\n\r\n                    MyWindow.document.close(); // necessary for IE >= 10\r\n                    MyWindow.focus(); // necessary for IE >= 10*/\r\n\r\n                    MyWindow.print();\r\n                    MyWindow.close();\r\n                },\r\n\r\n                Swap: function(Element1, Element2){\r\n                    const t = Element1.parentNode.insertBefore(document.createTextNode(''), Element1);\r\n                    Element2.parentNode.insertBefore(Element1, Element2);\r\n                    t.parentNode.insertBefore(Element2, t);\r\n                    t.parentNode.removeChild(t);\r\n                },\r\n\r\n\r\n\r\n\r\n            };\r\n            this.String = {\r\n                _KeyBD: {\r\n                    En:[\r\n                        'q','w','e','r','t','y','u','i','o','p','[',']',\r\n                        'a','s','d','f','g','h','j','k','l',';','\\'',\r\n                        'z','x','c','v','b','n','m',',','.','/',\r\n\r\n                        'Q','W','E','R','T','Y','U','I','O','P','{','}',\r\n                        'A','S','D','F','G','H','J','K','L',':','\"','|',\r\n                        'Z','X','C','V','B','N','M','<','>','?'\r\n                    ],\r\n                    Ru:[\r\n                        'й','ц','у','к','е','н','г','ш','щ','з','х','ъ',\r\n                        'ф','ы','в','а','п','р','о','л','д','ж','э',\r\n                        'я','ч','с','м','и','т','ь','б','ю','.',\r\n\r\n                        'Й','Ц','У','К','Е','Н','Г','Ш','Щ','З','Х','Ъ',\r\n                        'Ф','Ы','В','А','П','Р','О','Л','Д','Ж','Э', '/',\r\n                        'Я','Ч','С','М','И','Т','Ь','Б','Ю',','\r\n                    ]\r\n                },\r\n                /**\r\n                 *\r\n                 * @param string\r\n                 * @returns {string}\r\n                 */\r\n                Capitalize(string){\r\n                    return string.charAt(0).toUpperCase() + string.slice(1);\r\n                },\r\n                /**\r\n                 *\r\n                 * @param string\r\n                 * @param isHTML\r\n                 * @returns {*}\r\n                 */\r\n                QuoteScreen(string, isHTML=false){\r\n                    if (typeof string !== 'string')\r\n                        return string;\r\n                    if (isHTML)\r\n                        return string.replace(/\"/g, '&quot;');\r\n                    else\r\n                        return string.replace(/\"/g, '\\\"');\r\n                },\r\n                ReplaceAsync(string, regExp, callback) {\r\n                    string = String(string);\r\n                    let parts = [],\r\n                        i = 0;\r\n                    if (Object.prototype.toString.call(regExp) === \"[object RegExp]\") {\r\n                        if (regExp.global)\r\n                            regExp.lastIndex = i;\r\n                        let m;\r\n                        while (m = regExp.exec(string)) {\r\n                            let args = m.concat([m.index, m.input]);\r\n                            parts.push(string.slice(i, m.index), callback.apply(null, args));\r\n                            i = regExp.lastIndex;\r\n                            if (!regExp.global)\r\n                                break; // for non-global regexes only take the first match\r\n                            if (m[0].length === 0)\r\n                                regExp.lastIndex++;\r\n                        }\r\n                    } else {\r\n                        regExp = String(regExp);\r\n                        i = string.indexOf(regExp);\r\n                        parts.push(string.slice(0, i), callback.apply(null, [regExp, i, string]));\r\n                        i += regExp.length;\r\n                    }\r\n                    parts.push(string.slice(i));\r\n                    return Promise.all(parts).then(function(strings) {\r\n                        return strings.join(\"\");\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 *\r\n                 * @param {string} string\r\n                 * @param {string} LangFrom\r\n                 * @param {string} LangTo\r\n                 * @returns {string}\r\n                 */\r\n                KeyboardSwitch(string, LangFrom='Ru', LangTo='En'){\r\n                    LangFrom = Lure.String.Capitalize(LangFrom);\r\n                    LangTo   = Lure.String.Capitalize(LangTo);\r\n                    let x = '';\r\n                    for (let i = 0; i < string.length; i++){\r\n                        let Index = Lure.String._KeyBD[LangFrom].indexOf(string[i]);\r\n                        x += Index >=0 ? Lure.String._KeyBD[LangTo][Index] : string[i];\r\n                    }\r\n                    return x;\r\n                },\r\n                Random(Length, isRandomCase=false) {\r\n                    let s = '';\r\n                    for (let i = 0; i < Length; i++){\r\n                        let Num = Lure.GetRandom(35, 0);\r\n                        let l = Num.toString(36);\r\n                        if (isRandomCase && Num > 23){\r\n                            l = l.toUpperCase()\r\n                        }\r\n                        s += l;\r\n                    }\r\n                    return s;\r\n                }\r\n            };\r\n            this.Input = {\r\n                /**\r\n                 *\r\n                 * @param input\r\n                 * @returns {{Start: number, End: number}}\r\n                 * @constructor\r\n                 */\r\n                GetCursorPosition: function(input) {\r\n                    let Pos = {\r\n                        Start: -1,\r\n                        End: -1\r\n                    };\r\n                    if (\"selectionStart\" in input && document.activeElement === input) {\r\n                        Pos.Start = input.selectionStart;\r\n                        Pos.End   = input.selectionEnd;\r\n                    }\r\n                    else if (input.createTextRange) {\r\n                        let Selection = document.selection.createRange();\r\n                        if (Selection.parentElement() === input) {\r\n                            let Range = input.createTextRange();\r\n                            Range.moveToBookmark(sel.getBookmark());\r\n                            for (let len = 0; Range.compareEndPoints(\"EndToStart\", Range) > 0; Range.moveEnd(\"character\", -1))\r\n                            {\r\n                                len++;\r\n                            }\r\n                            Range.setEndPoint(\"StartToStart\", input.createTextRange());\r\n                            while(Range.compareEndPoints(\"EndToStart\", rng) > 0){\r\n                                Pos.Start++;\r\n                                Pos.End++;\r\n                                Range.moveEnd(\"character\", -1)\r\n                            }\r\n                        }\r\n                    }\r\n                    return Pos;\r\n                }\r\n            };\r\n            this.Button = {\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement} ButtonElement\r\n                 */\r\n                Lock: function (ButtonElement) {\r\n                    ButtonElement = Lure.Select(ButtonElement);\r\n                    ButtonElement.disabled = true;\r\n                    ButtonElement.classList.add(Lure.Settings.Common.CSSButtonBusy);\r\n                },\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement} ButtonElement\r\n                 */\r\n                Unlock: function (ButtonElement) {\r\n                    ButtonElement = Lure.Select(ButtonElement);\r\n                    ButtonElement.disabled = false;\r\n                    ButtonElement.classList.remove(Lure.Settings.Common.CSSButtonBusy);\r\n                },\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement} ButtonElement\r\n                 */\r\n                Release: function (ButtonElement) {\r\n                    ButtonElement = Lure.Select(ButtonElement);\r\n                    ButtonElement.disabled = false;\r\n                    ButtonElement.classList.remove(Lure.Settings.Common.CSSButtonBusy);\r\n                }\r\n            };\r\n\r\n            this.Cookie = {\r\n                Get: function (name) {\r\n                    let matches = document.cookie.match(new RegExp(\r\n                        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n                    ));\r\n                    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n                },\r\n                Set: function (Name, Value, Options) {\r\n                    Options = Options ? Options : {};\r\n                    if (Options.expires){\r\n                        Options.expires = Lure.Date(Options.expires).Date.toUTCString();\r\n                    }\r\n                    let cookie = `${Name}=${Value}`;\r\n                    Options.path = Options.path !== void 0 ? Options.path : '/';\r\n                    for (let p in Options) {\r\n                        if (Options.hasOwnProperty(p)){\r\n                            cookie += `; ${p} = ${Options[p] !== true ? Options[p]: ''}`;\r\n                            /*let propValue = Options[p];\r\n                            if (propValue !== true) {\r\n                                cookie += \"=\" + propValue;\r\n                            }*/\r\n                        }\r\n                    }\r\n                    document.cookie = cookie;\r\n                },\r\n                Remove: function (Name, Path='/') {\r\n                    Lure.Cookie.Set(Name, '', {\r\n                        expires: new Date(0),\r\n                        path: Path\r\n                    })\r\n                }\r\n            };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            this.User = {\r\n                ID: -1,\r\n                Roles: [],      // ex.: Roles: [2,5,7]\r\n                SubRoles: {},   // ex.: SubRoles: {4:[-1], 8:[123,212,314]}\r\n            };\r\n\r\n\r\n\r\n            //private 'n experimentals\r\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\r\n            this._EventClone = function(e) {\r\n                function ClonedEvent() {}\r\n                let clone=new ClonedEvent();\r\n                for (let p in e) {\r\n                    let d = Object.getOwnPropertyDescriptor(e, p);\r\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\r\n                        Object.defineProperty(clone, p, d);\r\n                    }\r\n                    else {\r\n                        clone[p] = e[p];\r\n                    }\r\n                }\r\n                Object.setPrototypeOf(clone, e);\r\n                return clone;\r\n            };\r\n\r\n\r\n\r\n\r\n            /** API **/\r\n\r\n\r\n            /**\r\n             *\r\n             * @param promise\r\n             * @param handlers\r\n             * @returns {*}\r\n             * @constructor\r\n             */\r\n            this.ApiCall = function (promise, handlers={}) {\r\n                const P = promise;\r\n                P.then(x=>{\r\n                    handlers.Success ? handlers.Success.call(x): null;\r\n                    handlers.Finally ? handlers.Finally.call(x) : null;\r\n                });\r\n                P.catch(x=>{\r\n                    handlers.Catch   ? handlers.Catch.call(x): null;\r\n                    handlers.Finally ? handlers.Finally.call(x) : null;\r\n                });\r\n                return P;\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param promise\r\n             * @param handlers\r\n             * @returns {*}\r\n             * @constructor\r\n             */\r\n            this.Call = function (promise, handlers={}) {\r\n                return promise\r\n                    .then(x=>{\r\n                        handlers.Then ? handlers.Then(x): null;\r\n                        handlers.Finally ?  handlers.Finally(x) : null;\r\n                        return promise;\r\n                    })\r\n                    .catch(x=>{\r\n                        handlers.Catch ? handlers.Catch(x): console.error('[api.call]'+x);\r\n                        handlers.Finally ?  handlers.Finally(x) : null;\r\n                        return promise;\r\n                    });\r\n            };\r\n            /**\r\n             *\r\n             * @param {object} Context   this?\r\n             * @param {object} Arg       event\r\n             * @param {HTMLElement} Target\r\n             * @param {function} before\r\n             * @param {function} after\r\n             * @param {string} CSSBefore\r\n             * @param {string} CSSAnimate\r\n             * @param {number} Duration\r\n             * @param {timeout} Timeout\r\n             * @returns {number|*}\r\n             * @constructor\r\n             */\r\n            this.AsyncToggle = function (Context, Arg, Target, before, after, CSSBefore, CSSAnimate, Duration, Timeout) {\r\n                if (Timeout)\r\n                    clearTimeout(Timeout);\r\n                before.call(Context, Arg);\r\n                if (CSSBefore)\r\n                    Target.classList.remove(CSSBefore);\r\n\r\n                if (CSSBefore === CSSAnimate){\r\n                    //wait for remove css\r\n                    setTimeout(()=>{\r\n                        if (CSSAnimate)\r\n                            Target.classList.add(CSSAnimate);\r\n                        Timeout = setTimeout(() => {\r\n                            after.call(Context, Arg);\r\n                        }, Duration);\r\n                    });\r\n\r\n                    return Timeout;\r\n                }\r\n                if (CSSAnimate)\r\n                    Target.classList.add(CSSAnimate);\r\n                Timeout = setTimeout(() => {\r\n                    after.call(Context, Arg);\r\n                }, Duration);\r\n                return Timeout;\r\n\r\n            };\r\n            /**\r\n             *\r\n             * @param CSSAnimation\r\n             * @param HTMLElement\r\n             * @returns {Object}\r\n             * @constructor\r\n             */\r\n            this.GetDurationAnimation = function(CSSAnimation, HTMLElement=null) {\r\n                let isNull = false;\r\n                if (!HTMLElement){\r\n                    isNull = true;\r\n                    HTMLElement = document.createElement('div');\r\n                    document.body.appendChild(HTMLElement);\r\n                }\r\n                /* Check for CSS animation or transition */\r\n                if (CSSAnimation)\r\n                    HTMLElement.classList.add(CSSAnimation);\r\n\r\n                let Style        = window.getComputedStyle(HTMLElement);\r\n                let Duration     = eval(Style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                let DurationAnim = eval(Style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                if (Duration < DurationAnim)\r\n                    Duration = DurationAnim;\r\n                if (CSSAnimation)\r\n                    HTMLElement.classList.remove(CSSAnimation);\r\n                if (isNull)\r\n                    HTMLElement.remove();\r\n                return Duration;\r\n            };\r\n            this.GetProperty = this.Object.GetProperty;\r\n            this.SetProperty = this.Object.SetProperty;\r\n            // this.GetProperty = (Obj, Prop)=> {\r\n            //     if (Prop === '')\r\n            //         return Obj;\r\n            //     let Way = Prop.replace(/\\[([^\\]]+)\\]/g, '.$1');\r\n            //     Way = Way.substring(0,1) === '.'? Way.substring(1):Way;\r\n            //     Way = Way.split('.');\r\n            //     let i = 0;\r\n            //     let Dest = Obj;\r\n            //     for (i; i < Way.length-1; i++){\r\n            //         Dest = Dest[Way[i]];\r\n            //     }\r\n            //     return Dest[Way[i]];\r\n            // };\r\n            // this.SetProperty = (Obj, Prop, Value)=> {\r\n            //     if (Prop === ''){\r\n            //         Obj = Value;\r\n            //         return Obj;\r\n            //     }\r\n            //     let Way = Prop.replace(/\\[([^\\]]+)\\]/g, '.$1');\r\n            //     Way = Way.substring(0,1) === '.'? Way.substring(1):Way;\r\n            //     Way = Way.split('.');\r\n            //     let i = 0;\r\n            //     let Dest = Obj;\r\n            //     for (i; i < Way.length-1; i++){\r\n            //         Dest = Dest[Way[i]];\r\n            //     }\r\n            //     Dest[Way[i]] = Value;\r\n            //     return Obj;\r\n            // };\r\n            /**\r\n             * @param obj\r\n             * @returns {*}\r\n             */\r\n            this.GetType = (obj)=>{\r\n                if (Lure.isNumeric(obj))\r\n                    return 'number';\r\n                if (obj instanceof Date || obj instanceof Lure._Date)\r\n                    return 'date';\r\n                if (obj instanceof Function)\r\n                    return 'function';\r\n                if (obj instanceof Array || obj instanceof NodeList)\r\n                    return 'array';\r\n                if (obj instanceof Node)\r\n                    return 'node';\r\n                if (obj instanceof Object)\r\n                    return 'object';\r\n                if (obj === null)\r\n                    return null;\r\n                return typeof (obj);\r\n            };\r\n\r\n\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\r\n            this.CreateElementFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                return frag.childNodes.Where(x=>x.nodeName.indexOf('text') < 0).First();\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\r\n            this.CreateElementsFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (frag.childNodes.length > 0)\r\n                {\r\n                    let nodes = [];\r\n                    for (let i = 0; i < frag.childNodes.length; i++)\r\n                        nodes.push(frag.childNodes[i]);\r\n                    return nodes.Where(x=>x.nodeName.indexOf('text') < 0);\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             *\r\n             * @param {object} object\r\n             * @constructor\r\n             */\r\n            this.Clone = function (object) {\r\n                return JSON.parse(JSON.stringify(object));  //TODO to optimize cloning\r\n            };\r\n            /**\r\n             *\r\n             * @param {object} object\r\n             * @constructor\r\n             */\r\n            this.Clone2 = function (object) {\r\n                let Clone = false;\r\n                if (object instanceof Array){\r\n                    Clone = [];\r\n                    for (let i = 0; i < object.length; i++){\r\n                        if (Lure.GetType(object[i]) === 'object' || Lure.GetType(object[i]) === 'array'){\r\n                            Clone[i] = Lure.Clone2(object[i]);\r\n                        }\r\n                        else{\r\n                            Clone[i] = object[i];//JSON.parse(JSON.stringify(object[i]));\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    Clone = {};\r\n                    for (let k in object){\r\n                        if (object.hasOwnProperty(k)){\r\n                            if (Lure.GetType(object[k]) === 'object'|| Lure.GetType(object[k]) === 'array'){\r\n                                Clone[k] = Lure.Clone2(object[k]);\r\n                            }\r\n                            else{\r\n                                Clone[k] = object[k] instanceof Function ? object[k] :JSON.parse(JSON.stringify(object[k]))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return Clone;\r\n            };\r\n            this.CheckDirty = function(Obj1, Obj2, isStrict=true){\r\n                if (!Obj1 || !Obj2)\r\n                    return false;\r\n                let isEqual = true;\r\n                if (Obj1 instanceof Array){\r\n                    if (isStrict && Obj1.length != Obj2.length){\r\n                        return false;\r\n                    }\r\n                    for (let i = 0; i < Obj1.length; i++){\r\n                        if (Obj1[i] instanceof Object){\r\n                            isEqual = Lure.CheckDirty(Obj1[i], Obj2[i], isStrict)\r\n                            if (!isEqual){\r\n                                return false;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (Obj1[i] !== Obj2[i]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                else if (Obj1 instanceof Object){\r\n                    if (isStrict && Object.keys(Obj1).length !== Object.keys(Obj2).length)\r\n                        return false;\r\n                    for (let i in Obj1){\r\n                        if (Obj1[i] instanceof Object){\r\n                            isEqual = Lure.CheckDirty(Obj1[i], Obj2[i], isStrict)\r\n                            if (!isEqual){\r\n                                return false;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (Obj1[i] !== Obj2[i]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    return Obj1 === Obj2\r\n                }\r\n                return isEqual;\r\n            };\r\n            this.CloneNode = function(node){\r\n                let clone = node.cloneNode();\r\n                if (node.childNodes.length>0){\r\n                    for (let i = 0; i < node.childNodes.length; i++){\r\n                        clone.appendChild(Lure.CloneNode(node.childNodes[i]));\r\n                    }\r\n                }\r\n                return clone;\r\n            };\r\n            /**\r\n             *\r\n             * @param {string, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement, null}\r\n             */\r\n            this.Select = function(query, parent = document){\r\n                if (query === '' || query === null)\r\n                    return null;\r\n                if (query instanceof Node && query.parentNode === null)\r\n                    return null;\r\n                return query instanceof Node ? query : parent.querySelector(query)\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             */\r\n            this.SelectAll = function(Selector, parent = document){\r\n                if (typeof Selector === 'undefined')\r\n                    return [];\r\n                if (typeof Selector.tagName !== 'undefined' || Selector === document)\r\n                    return [Selector];\r\n                return parent.querySelectorAll(Selector);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {Lure.Content} thisArg\r\n             * @constructor\r\n             */\r\n            this.AddEventListenerGlobal = function(eventName, selector, handler, parent = document, thisArg){\r\n                parent.addEventListener(eventName, function(e) {\r\n                    let target = e.target;\r\n                    let isIt = false;\r\n                    let event = Lure._EventClone(e);\r\n                    let elems = parent.querySelectorAll(selector);\r\n                    if (elems[0] === target)\r\n                    {\r\n                        event.currentTarget = target;\r\n                        isIt = true;\r\n                    }\r\n                    if (!isIt){\r\n                        for (let i = 0; i < elems.length; i++){\r\n                            if (elems[i].contains(target)){\r\n                                isIt = true;\r\n                                event.currentTarget = target.closest(selector);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (event.target.classList.contains('l-edit-editor')  && eventName === 'click') {\r\n                        e.stopPropagation();\r\n                        //console.log('stopPropagation', event.target);\r\n                        return;\r\n                    }\r\n                    if (isIt){\r\n                        let p = {};\r\n                        let ID = event.currentTarget.dataset['id'];\r\n                        let LineID = event.currentTarget.dataset['line'];\r\n                        if (ID){\r\n                            p.ID = parseInt(ID);\r\n                        }\r\n\r\n                        if (LineID){\r\n                            p.LineID = parseInt(LineID);\r\n                        }\r\n                        else {\r\n                            let TemplatorLine = event.currentTarget.closest('.l-t-line');\r\n                            if (TemplatorLine){\r\n                                p.LineID = parseInt(TemplatorLine.dataset['line']);\r\n                            }\r\n                        }\r\n\r\n                        handler.call(thisArg? thisArg : event.currentTarget, event, p);\r\n                    }\r\n\r\n                });\r\n            };\r\n\r\n            this.DocumentSelectionClear = function () {\r\n                if (window.getSelection) {\r\n                    if (window.getSelection().empty) {  // Chrome\r\n                        window.getSelection().empty();\r\n                    } else if (window.getSelection().removeAllRanges) {  // Firefox\r\n                        window.getSelection().removeAllRanges();\r\n                    }\r\n                } else if (document.selection) {  // IE?\r\n                    document.selection.empty();\r\n                }\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\r\n            this.isVisible = (HTMLElement)=>{\r\n                let isVisible = this._isVisible(HTMLElement);\r\n                if (isVisible){\r\n                    while (HTMLElement.parentElement){\r\n                        if (!this._isVisible(HTMLElement)){\r\n                            return false;\r\n                        }\r\n                        HTMLElement = HTMLElement.parentElement;\r\n                    }\r\n                }\r\n                return isVisible;\r\n                /*\r\n                //check invisible state;\r\n                let isVisibleSelf = function(element){\r\n                    let ContentStyle = window.getComputedStyle(element);\r\n                    if ( (ContentStyle.display === \"none\") || (ContentStyle.opacity === \"0\") || (ContentStyle.visibility === \"hidden\") )\r\n                        return false;\r\n                    //check for null-size\r\n                    if ( (parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\")  && parseInt(ContentStyle.width) === 0)\r\n                        return false;\r\n                    if ( (parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0)\r\n                        return false;\r\n                    return true;\r\n                };\r\n                let isVisibleParent = function (element) {\r\n                    while (element.parentElement){\r\n                        if (!isVisibleSelf(element.parentElement)\r\n                            || (element.tagName.toLowerCase() !== 'body' && !element.parentElement))//not real elem\r\n                        {\r\n                            return false;\r\n                        }\r\n                        element = element.parentElement;\r\n                    }\r\n                    return true;\r\n                };\r\n                if (!isVisibleSelf(HTMLElement))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return isVisibleParent(HTMLElement);\r\n\r\n                return true;*/\r\n            };\r\n            this._isVisible = function (HTMLElement) {\r\n                let Style = window.getComputedStyle(HTMLElement);\r\n\r\n                return Style.display    !== 'none'\r\n                    && Style.visibility !== 'hidden'\r\n                    && parseFloat(Style.opacity) !== 0\r\n                    && parseFloat(Style.height) + parseFloat(Style.minHeight) !== 0\r\n                    && parseFloat(Style.width)  + parseFloat(Style.minWidth)  !== 0\r\n                    && ( HTMLElement.tagName.toLowerCase() === 'body' || (HTMLElement.offsetParent !== null && Style.display !== 'fixed'))\r\n                //jquery\r\n                //return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\r\n            };\r\n\r\n\r\n            this.GetFileText = function (url) {\r\n                return new Promise(function (resolve, reject) {\r\n                    let xhr = new XMLHttpRequest();\r\n                    xhr.onload = function () {\r\n                        resolve( xhr.response);\r\n                    };\r\n                    xhr.onerror = function () {\r\n                        reject(new Error(\r\n                            'XMLHttpRequest Error: '+this.statusText));\r\n                    };\r\n                    if (url.indexOf('..') > -1)\r\n                        url = url.replace('..', document.location.protocol + \"//\" + document.location.host);\r\n                    else {\r\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/')+1) + url;\r\n                    }\r\n                    console.log('Lure.GetFileText', url);\r\n                    xhr.open('GET', url);\r\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\r\n                    xhr.send();\r\n                });\r\n\r\n\r\n            };\r\n            this.GetTextWidth = function(txt, fontname, fontsize){\r\n                if(this.c === undefined){\r\n                    this.c=document.createElement('canvas');\r\n                    this.ctx=this.c.getContext('2d');\r\n                }\r\n                this.ctx.font = fontsize + ' ' + fontname;\r\n                return this.ctx.measureText(txt).width;\r\n            };\r\n            this.GetInlineSize = function(elem, fontSize='1rem'){\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                const sizes = {width:clone.clientWidth,height:clone.clientHeight};\r\n                parent.document.body.removeChild(clone);\r\n                return sizes;\r\n            };\r\n            this.GetInlineSize1 = function(elem, fontSize='12px'){\r\n                let pp = performance.now();\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                let xx = getComputedStyle(clone);\r\n                let ps = performance.now();\r\n                let sizes = {width: Lure.GetTextWidth(elem.innerText, xx.getPropertyValue('font-family'), xx.getPropertyValue(\"font-size\")), height: 12};\r\n                Lure.Perf(ps, '--size');\r\n                parent.document.body.removeChild(clone);\r\n                console.log('sizes', sizes, xx);\r\n                Lure.Perf(pp, '--calxXwidth');\r\n                return sizes;\r\n            };\r\n\r\n            /* Private ID counter */\r\n            let CounterID = 0;\r\n            /**\r\n             *\r\n             * @returns {int}\r\n             */\r\n            this.GetID = ()=>{\r\n                CounterID++;\r\n                return CounterID;\r\n\r\n            };\r\n            /**\r\n             *\r\n             * @returns {int}\r\n             */\r\n            this.GetLastID = ()=>{\r\n                return CounterID;\r\n            };\r\n            this.isNumeric = function(n) {\r\n                return !isNaN(parseFloat(n)) && isFinite(n);\r\n            };\r\n\r\n            this.PrintElement = function (HTMLElement, CSSPrint=\"\") {\r\n                let mywindow = window.open('', 'PRINT');//, 'height=800,width=1000');\r\n                let styles = '';\r\n                for (let i = 0; i < document.styleSheets.length; i++){\r\n                    if(document.styleSheets[i].href){\r\n                        let rules;\r\n                        if (document.styleSheets[i].rules){\r\n                            rules = document.styleSheets[i].rules; //chrome\r\n                        }\r\n                        else if (document.styleSheets[i].cssRules){\r\n                            rules = document.styleSheets[i].cssRules; //firefox\r\n                        }\r\n                        if (!rules){\r\n                            continue;\r\n                        }\r\n                        for (let j = 0; j < rules.length; j++){\r\n                            if (rules[j].cssText.indexOf(\"@\") < 0) //skip other @media, @key-frames\r\n                                styles += rules[j].cssText;\r\n                        }\r\n                    }\r\n                }\r\n                styles = `@media print{\r\n                        ${styles}\r\n                        .button-print{display:none!important}\r\n                        ${CSSPrint}\r\n                    }\r\n                    @media screen{\r\n                        ${styles}\r\n                        .button-print{display:none!important}\r\n                        ${CSSPrint}\r\n                    }`;\r\n                //console.log('styles', styles);\r\n                mywindow.document.write('<html><head><title>' + document.title  + '</title>');\r\n\r\n                mywindow.document.write(`<style>${styles}</style>`);\r\n                mywindow.document.write('</head><body>');\r\n                mywindow.document.write(HTMLElement.innerHTML);\r\n                mywindow.document.write('</body></html>');\r\n\r\n                mywindow.document.close(); // necessary for IE >= 10\r\n                mywindow.focus(); // necessary for IE >= 10*/\r\n\r\n                mywindow.print();\r\n                mywindow.close();\r\n            };\r\n\r\n\r\n            this.Perf = function(perfStart, text='Perf', ConsoleParam=''){\r\n                const x = Math.floor((window.performance.now()-perfStart)*100)/100;\r\n                console.log(\"%c[\" + text + \"]: \" + x + \"ms\",ConsoleParam);\r\n                return x;\r\n            };\r\n\r\n            /**\r\n             * Confirmation dialog\r\n             * @param Caption\r\n             * @param Message\r\n             * @param CaptionColor\r\n             * @param CaptionBackground\r\n             * @param OnAgree\r\n             * @param OnCancel\r\n             * @constructor\r\n             */\r\n            this.Confirm = function(Caption  = \"Achtung\", Message = '', {\r\n                Error = false,\r\n                CaptionColor =  '',\r\n                CaptionBackground = '',\r\n                ButtonAgreeText = Lure.Culture.Lang.Ok,\r\n                ButtonCancelText = Lure.Culture.Lang.Cancel,\r\n                OnAgree = () => {},\r\n                OnCancel = null\r\n            } = {})\r\n            {\r\n                document.activeElement.blur();\r\n                let zIndex = Lure._Dialog.zIndex;\r\n\r\n                let dialog = document.createElement('div');\r\n                dialog.classList.add('lure-confirm');\r\n                if (Lure.Settings.DialogAnimation)\r\n                    dialog.classList.add(Lure.Settings.DialogAnimation);\r\n                //###title\r\n                let title = document.createElement(\"div\");\r\n                title.classList.add('cd-caption');\r\n                title.innerHTML = Caption;\r\n                title.style.color = CaptionColor;\r\n                title.style.background = CaptionBackground;\r\n                dialog.appendChild(title);\r\n                //###message field\r\n                let msg = document.createElement(\"div\");\r\n                msg.classList.add('cd-text');\r\n                msg.innerHTML = Message;\r\n                dialog.appendChild(msg);\r\n                //###buttonfield\r\n                let buttons = document.createElement(\"div\");\r\n                buttons.classList.add(\"cd-buttons\");\r\n                dialog.appendChild(buttons);\r\n                //###button confirm\r\n                let btnOk = document.createElement(\"div\");\r\n                btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\r\n                btnOk.innerHTML = ButtonAgreeText;\r\n                btnOk.onclick = function(){\r\n                    Lure._ConfirmCount--;\r\n                    if (OnAgree !== null && OnAgree !== void 0)\r\n                        OnAgree();\r\n                    if (Lure.Settings.Dialog.Blur && Lure._ConfirmCount < 1 )\r\n                        Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.remove(Lure.Settings.Dialog.Blur);\r\n                    //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\r\n                    Lure._Dialog.Remove(dialog);\r\n                    wrap.remove();\r\n                    dialog.remove();\r\n\r\n                };\r\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\r\n                //###button cancel\r\n                if (OnCancel !== null)\r\n                {\r\n                    let btnCancel = document.createElement(\"div\");\r\n                    btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\r\n                    btnCancel.innerHTML = ButtonCancelText;\r\n                    btnCancel.onclick = function(){\r\n                        Lure._ConfirmCount--;\r\n                        if (OnCancel !== null)\r\n                            OnCancel();\r\n                        if (Lure.Settings.Dialog.Blur  && Lure._ConfirmCount < 1)\r\n                            Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.remove(Lure.Settings.Dialog.Blur);\r\n                        Lure._Dialog.Remove(dialog);\r\n                        wrap.remove();\r\n                        dialog.remove();\r\n                    };\r\n                    dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\r\n                }\r\n                //### Dialog-Wrapper\r\n                let wrap = document.createElement(\"div\");\r\n                wrap.classList.add(Lure.Settings.Dialog.Wrapper);\r\n                if (Lure.Settings.Confirm.Wrapper)\r\n                    wrap.classList.add(Lure.Settings.Confirm.Wrapper);\r\n                wrap.style.zIndex = zIndex + 1;\r\n                dialog.style.zIndex = zIndex + 2;\r\n\r\n                Lure._Dialog.Add(dialog);\r\n                if (Lure.Settings.Confirm.Wrapper)\r\n                    document.body.appendChild(wrap);\r\n                document.body.appendChild(dialog);\r\n                Lure._ConfirmCount++;\r\n                if (Lure.Settings.Dialog.Blur)\r\n                {\r\n                    wrap.style.background = 'none';\r\n                    Lure.Select(Lure.Settings.Dialog.BlurTarget).classList.add(Lure.Settings.Dialog.Blur);\r\n                }\r\n            };\r\n            //Confirmation dialog teamplate just\r\n            this.NoFeature = function(name = \"\"){\r\n                if (name !== \"\")\r\n                    name = \"\\\"\"+name+\"\\\"\";\r\n                Lure.Confirm(\r\n                    \"Error\",\r\n                    \"Sorry, function \"+name+\" is not available yet\"\r\n                )\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param object\r\n             * @param msg\r\n             * @constructor\r\n             */\r\n            this.ErrorHint = function(object, msg) {\r\n                if (!msg)\r\n                    msg = \"Поле не может быть пустым\";\r\n                let div = document.createElement('div');\r\n                div.classList.add('lure-error-hint');\r\n                div.innerHTML = msg;\r\n                object.parentElement.style.position = 'relative';\r\n                object.parentElement.appendChild(div);\r\n                div.style.display = 'block';\r\n                try {\r\n                    div.animate({opacity: [0, 1]}, {duration : 300});\r\n                }\r\n                catch (e){}\r\n\r\n                setTimeout(function(){\r\n\r\n                    try {\r\n                        div.animate({opacity: [1, 0]}, {duration : 300})\r\n                            .onfinish = ()=>{div.style.display = 'none'};\r\n                    }\r\n                    catch (e){\r\n                        div.style.display = 'none';\r\n                    }\r\n                    //TODO CHECK FADEIN FADEOUT\r\n                    setTimeout(function(){\r\n                        if (object.parentElement)\r\n                            object.parentElement.style.position = '';\r\n                        div.remove();\r\n                    }, 500)\r\n                }, 2000)\r\n            };\r\n            /**\r\n             *\r\n             * @param {number} number\r\n             * @param {number} divider\r\n             * @param {string} mode\r\n             * @returns {number}\r\n             */\r\n            this.RoundBy = function(number, divider, mode='ceil'){ //mode: ceil, floor, round\r\n                let b = number % divider;\r\n                if (b === 0)\r\n                    return number;\r\n                if (mode === 'ceil')\r\n                    return number - b + divider;\r\n                else if (mode === 'floor')\r\n                    return number - b;\r\n                return number - b +  (b/divider < 0.5 ? 0: divider);\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param number\r\n             * @returns {number}\r\n             * @constructor\r\n             */\r\n            this.GetNumberOrder = function(number){\r\n                //debugger;\r\n                let b = number.toString().split('.');\r\n                if (parseInt(b[0]) !== 0){\r\n                    b = b[0].length;\r\n                    return b-1;\r\n                }else{\r\n                    let p = b[1]?b[1].match(/[^0]/):null;\r\n                    p = p? p.index+1:1;\r\n                    return -p;\r\n                }\r\n            };\r\n            this.GetRandom = (max=100, min=0)=>{\r\n                return Math.round(Math.random()*(max-min)+min)\r\n            };\r\n\r\n            this.SaveBlob = this.Blob.SaveAs;\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n    }\r\n    return new LureClass();\r\n})();\r\n//#DEFAULTS\r\nLure.Settings.Locale     = navigator.language.substring(0,2);\r\nLure.Settings.LocaleSort = Lure.Settings.Locale;\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n    Lure.DOM.ScrollBarWidth = (()=>{\r\n                    let outer = document.createElement(\"div\");\r\n                    outer.style.visibility = \"hidden\";\r\n                    outer.style.width = \"100px\";\r\n                    document.body.appendChild(outer);\r\n                    let widthNoScroll = outer.offsetWidth;\r\n                    // force scrollbars\r\n                    outer.style.overflow = \"scroll\";\r\n                    // add innerdiv\r\n                    let inner = document.createElement(\"div\");\r\n                    inner.style.width = \"100%\";\r\n                    outer.appendChild(inner);\r\n                    let widthWithScroll = inner.offsetWidth;\r\n                    // remove divs\r\n                    outer.parentNode.removeChild(outer);\r\n                    return widthNoScroll - widthWithScroll;\r\n                })();\r\n\r\n});\r\n\r\n\r\n\r\n\r\nLure.__Linq = class IEnumerable{\r\n    Where(delegate){\r\n        this._Delegates.push({d:delegate, t: 0});\r\n        return this;\r\n    }\r\n    Select(delegate){\r\n        this._Delegates.push({d:delegate, t: 1});\r\n        return this;\r\n    }\r\n    FirstOrDefault(def=null){\r\n        for (let i = 0; i < this._Arr.length; i++){\r\n            let drop = false;\r\n            let e = this._Arr[i];\r\n            for (let j = 0; j < this._Delegates.length; j++){\r\n                let del = this._Delegates[j];\r\n                if (del.t === 0 && !del.d(e, i) ){\r\n                    drop = true;\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    e = this._Delegates[j].d(e, i);\r\n                }\r\n            }\r\n            if (!drop) {\r\n                return e;\r\n            }\r\n        }\r\n        return def;\r\n    }\r\n    ToList(){\r\n        let a = new Array(this._Arr.length);\r\n        let currix=0;\r\n        for (let i = 0; i < this._Arr.length; i++){\r\n            let drop = false;\r\n            let e = this._Arr[i];\r\n            for (let j = 0; j < this._Delegates.length; j++){\r\n                let del = this._Delegates[j];\r\n                if (del.t === 0 && !del.d(e, i) ){\r\n                    drop = true;\r\n                    break;\r\n                }\r\n                else\r\n                //if (del.t === 1)\r\n                {\r\n                    e = this._Delegates[j].d(e, i);\r\n                }\r\n            }\r\n            if (!drop) {\r\n                a[currix]=e;\r\n                currix++;\r\n            }\r\n        }\r\n        return a.slice(0,currix);\r\n    }\r\n    constructor(arr){\r\n        this._Arr = arr;\r\n        this._Delegates = [];\r\n    }\r\n};\r\nLure.Linq = function (arr) {\r\n    return new Lure.__Linq(arr);\r\n};\r\n\r\nfunction kuk__Linq() {\r\n    let A = [];\r\n    for (let i = 1 ; i < 1000000; i++){\r\n        A.push({\r\n            ID: i,\r\n            Name: `er${i}geg`,\r\n            Val: i*2\r\n        })\r\n    }\r\n    let p = window.performance.now();\r\n    let x = A\r\n        .Where(x=>x.Val < 1000).Select(x=>x.ID).Where(x=>x % 3 === 0).FirstOrDefault();\r\n    console.log('prto', window.performance.now() - p, x);\r\n    p = window.performance.now();\r\n    let y = Lure.Linq(A)\r\n        .Where(x=>x.Val < 1000).Select(x=>x.ID).Where(x=>x % 3 === 0).FirstOrDefault();\r\n    console.log('linq', window.performance.now() - p, y);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Lure.Application = {\r\n    Entry: null,\r\n    isRun: false,\r\n    Content: [],\r\n    Run(){\r\n        if  (Lure.Application.isRun)\r\n            return Lure.System.ShowWarn('Lure Application is already run');\r\n        const LureRouteIndex = 'LureRoute' + Lure.User.ID;\r\n        if (Lure.Route.Enabled && !document.location.hash && localStorage.getItem(LureRouteIndex)){\r\n            //TODO solve permissionbug\r\n            document.location.hash = localStorage.getItem(LureRouteIndex);\r\n            localStorage.setItem(LureRouteIndex, '');\r\n        }\r\n        Lure.Application.isRun = true;\r\n        for (let i = 0; i < Lure.Application.Content.length; i++){\r\n            if (!Lure.Application.Content[i].Parent)\r\n            {\r\n                if (Lure.Application.Content[i]._Init)\r\n                Lure.Application.Content[i]._Init();\r\n                try{\r\n                    //can be as field in another Content (just as field, not like child) so that _Init() could called also as child\r\n                }\r\n                catch (e){\r\n                    console.error(`Error in \"${Lure.Application.Content[i].Name}\"`,Lure.Application.Content[i],'\\n',e);\r\n                }\r\n            }\r\n        }\r\n        let LureRouteStat = 0;\r\n        try{\r\n            LureRouteStat = Lure.Route.Run();\r\n        }\r\n        catch (e) {\r\n            console.warn('[Lure.Application] RunByRoute error. Wrong route or not enough permission');\r\n        }\r\n        if (Lure.Application.Entry && LureRouteStat < 1){\r\n            Lure.Route._PopState = false; //to push  entry route\r\n            let ct = Lure._Content.List.Where(c=>c.Name === Lure.Application.Entry).FirstOrDefault();\r\n            console.log('Lure.Application.Entry', Lure.Application.Entry, ct);\r\n\r\n            if (ct)\r\n                ct.Show();\r\n        }\r\n        if (Lure.Route.Enabled){\r\n            Lure.Route.Init();\r\n        }\r\n        console.log('[Lure.Application.Run]');\r\n    }\r\n};","/* Editable */\r\n//Lure.isEditableEventsEnabled = false;\r\nLure.Editable = {\r\n    isEnabled: false,\r\n\r\n    ListenEditable:(LureContent, Controller)=>{\r\n        let CType = Controller.Type;\r\n        //console.log(`ListenEditable: ${Controller.ID}`);\r\n        LureContent.AddEventListener('click', `.${Lure.Settings.Editable.ClassEditable} .l-edit[data-controller=\"${Controller.ID}\"]`, function(e){\r\n            if (e.target.classList.contains('l-edit-btn-edit')){\r\n                Lure.Editable.RemoveEdits(LureContent);\r\n                if (e.target.classList.contains(`l-edit-${CType}`))\r\n                    Lure.Editable.AddEdits.call(LureContent, e.target.parentElement.parentElement.parentElement, Controller, CType); // e.target (l-edit-icon) -> l-edit-controls -> l-row -> editable\r\n            }\r\n            else if (e.target.classList.contains('l-edit-btn-save')){\r\n                if (e.target.classList.contains(`l-edit-${CType}`))\r\n                    Lure.Editable.Save.call(LureContent, e.target.parentElement.parentElement.parentElement, Controller)\r\n            }\r\n        });\r\n        LureContent.AddEventListener('dblclick', `.${Lure.Settings.Editable.ClassEditable}[data-controller=\"${Controller.ID}\"]`, function(e){\r\n            if (e.target !== e.currentTarget && !e.target.classList.contains('l-edit-value'))\r\n                return;\r\n            Lure.Editable.RemoveEdits(LureContent);\r\n            if (Lure.Select(`.l-edit-${CType}`, e.currentTarget) !== null)\r\n                Lure.Editable.AddEdits.call(LureContent, e.currentTarget, Controller, CType);\r\n        });\r\n        LureContent.AddEventListener('input', `.${Lure.Settings.Editable.ClassEditable} .l-edit-textbox[data-controller=\"${Controller.ID}\"]`, function (e) {\r\n            //console.log('textbox', e.target, e.currentTarget.classList);\r\n            if (e.currentTarget.classList.contains(`l-edit-${CType}`)){\r\n                let EditElement = e.currentTarget.parentElement.parentElement;\r\n                let LineID   = e.currentTarget.dataset['line'];\r\n                let Property = e.currentTarget.dataset['property'];//Lure.Editable.GetPropertyName(EditElement, Controller);\r\n                Property = Property.replace('$item', '').replace('.$this', '').replace('$this', '');\r\n                //if max or min is exists, then value is numeric\r\n                let val = e.currentTarget.value;\r\n                let max = e.currentTarget.max;\r\n                let min = e.currentTarget.min;\r\n                if (max && parseFloat(max) < val)\r\n                    val = parseFloat(max);\r\n                if (min && parseFloat(min) > val)\r\n                    val = parseFloat(min);\r\n                if (Property === ''){\r\n                    if (Controller.isLineBuilder){\r\n                        Controller._DataPrivateDict[LineID].Data = val;\r\n                    }else{\r\n                        Controller._DataPrivate = val\r\n                    }\r\n                }\r\n                else {\r\n                    Lure.SetProperty(Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data: Controller._DataPrivate, Property, val);\r\n                }\r\n                //if (Controller.PropTypes[Property])\r\n                //    Lure.PropTypes.CheckProp(Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data: Controller._DataPrivate, this.PropTypes[Property], Property);\r\n                //Controller._SetEditProperty(Property, val);\r\n                Lure.Editable.CheckChanges(EditElement, Controller, Property, LineID);\r\n                //console.log('textbox', Property, val);\r\n            }\r\n    \r\n        });\r\n        LureContent.AddEventListener('keyup', `.${Lure.Settings.Editable.ClassEditable}  .l-edit-textbox[data-controller=\"${Controller.ID}\"]`, function (e) {\r\n            if(e.keyCode === 13 && e.target.tagName.toLowerCase() !== 'textarea' && e.target.classList.contains(`l-edit-${CType}`) ) {\r\n                return Lure.Editable.Save.call(LureContent, e.target.parentElement.parentElement, Controller)\r\n            }\r\n        });\r\n        LureContent.AddEventListener('change', `.${Lure.Settings.Editable.ClassEditable}  .l-edit-select[data-controller=\"${Controller.ID}\"]`, function (e) {\r\n            if (e.target.classList.contains(`l-edit-${CType}`)){\r\n                let EditElement = e.currentTarget.parentElement.parentElement;\r\n                let Property = EditElement.dataset['property'];//Lure.Editable.GetPropertyName(EditElement, Controller);\r\n                Property = Property.replace('$item', '').replace('.$this', '').replace('$this', '');\r\n                let LineID   = e.currentTarget.dataset['line'];\r\n\r\n                //console.log('select', Property, e.currentTarget.value);\r\n\r\n\r\n                Lure.SetProperty(Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data: Controller._DataPrivate, Property, e.currentTarget.value);\r\n                if (Controller.PropTypes[Property])\r\n                    Lure.PropTypes.CheckProp(Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data: Controller._DataPrivate, Controller.PropTypes[Property], Property);\r\n                //Controller._SetEditProperty(Property, e.currentTarget.value);\r\n                Lure.Editable.CheckChanges(EditElement, Controller, Property, LineID);\r\n            }\r\n    \r\n        });\r\n    \r\n        /* Removable */\r\n        if (Controller.Type !== 'proto'){\r\n            LureContent.AddEventListener('click', `.${Lure.Settings.Editable.ClassRemovable}  .l-edit-btn-remove:not(.active)[data-controller=\"${Controller.ID}\"]`, function (e) {\r\n                e.currentTarget.classList.add('active');\r\n                const i = e.currentTarget.dataset['line'];\r\n                Lure.Call(Controller.Remove(i), {\r\n                    Finally: ()=>{\r\n                        e.currentTarget.classList.remove('active');\r\n                    }\r\n                })\r\n            });\r\n        }\r\n        /* Editors click skipper*/\r\n        if (!Lure.Editable.isEnabled){\r\n            document.addEventListener('click', function (e) {\r\n                if ( e.target.classList.contains('l-edit') && Lure.SelectAll('.l-edit, .l-edit-editing').length > 0)\r\n                {\r\n                    return;\r\n                }\r\n                Lure.Editable.RemoveEdits();\r\n            });\r\n            Lure.Editable.isEnabled = true;\r\n        }\r\n        //debugger;\r\n        //console.log('e reg event', this);\r\n        LureContent.isListenEditable = true;\r\n    },\r\n    ListenRemovable: function (content) {\r\n\r\n        Lure.AddEventListenerGlobal('click', '.removable-icon', function (e) {\r\n            let LineID = e.currentTarget.closest('.removable').dataset['line'];\r\n            content.Remove(LineID);\r\n        }, content.Content);\r\n    },\r\n    /**\r\n     *\r\n     * @param EditElement\r\n     * @returns {string}\r\n     */\r\n    GetPropertyName(EditElement){\r\n        //property name from DOM line like object[i].PropertyName or object.PropertyName\r\n        let LineID = EditElement.dataset['line'];\r\n        if (LineID>-1){\r\n            return `[${LineID}].`+ EditElement.dataset['property'];\r\n        }\r\n        return EditElement.dataset['property'];\r\n    },\r\n    EditableForceRefresh(Controller){\r\n        let DOMContent = Controller.Content;\r\n        let Query = `.${Lure.Settings.Editable.ClassEditableForce}`;\r\n        if (Controller.Type === 'proto')\r\n            Query = `.${Lure.Settings.Editable.ClassEditableForce}[data-line=\"null\"]`;\r\n        let EditableList = Lure.SelectAll(Query, DOMContent);\r\n        for (let i = 0; i < EditableList.length; i++){\r\n            EditableList[i].classList.remove(Lure.Settings.Editable.ClassChanged);\r\n            Lure.Editable.AddEdits(EditableList[i], Controller, Controller.Type);\r\n        }\r\n    },\r\n    CheckChanges(EditElement, Controller, Property, LineID){\r\n        if (Lure.GetProperty(Controller.isLineBuilder? Controller._DataDict[LineID].Data: Controller._Data, Property) !== Lure.GetProperty(Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data: Controller._DataPrivate, Property))\r\n            EditElement.classList.add('l-edit-changed');\r\n        else\r\n            EditElement.classList.remove('l-edit-changed');\r\n    },\r\n    RemoveWaiting(LureContent){\r\n        let Waiters = Lure.SelectAll(`.${Lure.Settings.Editable.ClassWaiting}`, LureContent ? LureContent.Content : document);\r\n        for (let i = 0; i < Waiters.length; i++){\r\n            Waiters[i].classList.remove(Lure.Settings.Editable.ClassWaiting);\r\n        }\r\n    },\r\n    RemoveEdits(LureContent){\r\n        let Editables = Lure.SelectAll(`.l-edit-editing:not(.l-edit-datepick):not(.${Lure.Settings.Editable.ClassEditableForce})`, LureContent? LureContent.Content : document);\r\n        for (let i = 0; i < Editables.length; i++){\r\n            //debugger;\r\n            Editables[i].innerHTML = Editables[i]._innerHTML;\r\n            Editables[i].classList.remove(Lure.Settings.Editable.ClassEditing);\r\n            Editables[i].classList.remove(Lure.Settings.Editable.ClassChanged);\r\n        }\r\n        //Lure.Editable.RemoveWaiting(LureContent);\r\n    },\r\n    AddEdits(EditableElement, Controller, CType) {\r\n        if (EditableElement.classList.contains('editable-special') )\r\n            return;\r\n        EditableElement.classList.add('l-edit-editing');\r\n        EditableElement._innerHTML = EditableElement.innerHTML;\r\n        let LineID = Controller.isLineBuilder ? parseInt(EditableElement.dataset['line']): 'proto';\r\n        let Property = EditableElement.dataset['property'];\r\n        Property = Property.replace('$item', '').replace('.$this', '').replace('$this', '');\r\n\r\n        let ControllerData        = Controller.isLineBuilder ? Controller._DataDict[LineID].Data        : Controller._Data;\r\n        let ControllerDataPrivate = Controller.isLineBuilder ? Controller._DataPrivateDict[LineID].Data : Controller._DataPrivate;\r\n\r\n        if (Controller.Owner.isContent && (!Controller.Owner.HasPermissionWrite || !Controller.Owner.HasElementWritePermission(EditableElement, ControllerData)) ){\r\n            return;\r\n        }\r\n        let SaveButton = `<div class=\"l-edit l-edit-controls\"><div class=\"l-edit l-edit-icon l-edit-btn-save l-edit-${CType}\" data-controller=\"${Controller.ID}\" data-line=\"${LineID}\"></div></div>`;\r\n\r\n        if (!EditableElement.dataset['object']) //if no selectable data, just text editor it's needed\r\n        {\r\n            let EditType = Controller.PropTypes[Property]; //Controller.PropTypes[Property.replace(/\\[[\\d]+\\]\\./, '')];\r\n            let EditMin  = EditableElement.dataset['min'];\r\n            let EditMax  = EditableElement.dataset['max'];\r\n\r\n            let isRichText = EditType === Lure.PropTypes.Text;\r\n\r\n            EditType = EditType ? EditType : 'text';\r\n            EditType = EditType === Lure.PropTypes.String ? 'text':EditType;\r\n\r\n            if (EditType === Lure.PropTypes.Date){\r\n                if (!EditableElement.LurePeriodPicker){\r\n                    let DatePlace = Lure.Select('.l-edit-value', EditableElement);\r\n                    DatePlace.classList.remove('l-edit');\r\n                    EditableElement.classList.add('l-edit-datepick');\r\n                    EditableElement.classList.add(`l-edit-${CType}`);\r\n                    EditableElement.dataset['controller'] = Controller.ID;\r\n                    if (Controller.isLineBuilder){\r\n                        EditableElement.dataset['line'] = LineID;\r\n                    }\r\n                    EditableElement.dataset['property'] = Property;\r\n                    EditableElement.LurePeriodPicker = new Lure.PeriodPicker({\r\n                        Target: DatePlace,\r\n                        TargetImmutable: true,\r\n                        NoRange: true,\r\n                        Min: EditMin? Lure.Date(EditMin).Date:null,\r\n                        Max: EditMax? Lure.Date(EditMax).Date:null,\r\n                        DateTarget: Lure.GetProperty(ControllerData, Property),\r\n                        OnConfirm: function(){\r\n                            //this here is PeriodPicker context\r\n                            if (LineID === 'proto'){\r\n                                Lure.SetProperty(Controller._DataPrivate, Property, this.Date);\r\n                            }\r\n                            else {\r\n                                let DataItem = Controller.GetPrivateDataItemByLineID(LineID);\r\n                                Lure.SetProperty(DataItem.Data, Property, this.Date);\r\n                            }\r\n\r\n                            Lure.Editable.Save(EditableElement, Controller);\r\n                        }\r\n                    });\r\n                }\r\n                EditableElement.LurePeriodPicker.Min  = EditMin? Lure.Date(EditMin).Date:null;\r\n                EditableElement.LurePeriodPicker.Max  = EditMax? Lure.Date(EditMax).Date:null;\r\n                EditableElement.LurePeriodPicker.Date = Lure.GetProperty(ControllerData, Property);\r\n                return EditableElement.LurePeriodPicker.Show();\r\n            }\r\n            EditMin  = EditMin  ? `min=\"${EditMin}\"`: '';\r\n            EditMax  = EditMax  ? `max=\"${EditMax}\"`: '';\r\n            if  (EditType === 'uint' && (EditMin === '' || EditMin < 0) )\r\n                EditMin = 'min=\"0\"';\r\n\r\n            if (isRichText){\r\n                EditableElement.innerHTML = `<div class=\"l-row l-flex-between l-flexa-center l-flex-100\"><textarea class=\"textbox l-textbox l-edit l-edit-editor l-edit-textbox l-edit-${CType}\" ${EditType? 'data-type=\"'+EditType+'\"': ''} ${EditMin} ${EditMax} data-controller=\"${Controller.ID}\" data-property=\"${Property}\" data-line=\"${LineID}\">${Lure.GetProperty(ControllerData, Property)}</textarea>${SaveButton}</div>`;\r\n\r\n            }else{\r\n                EditableElement.innerHTML = `<div class=\"l-row l-flex-between l-flexa-center l-flex-100\"><input class=\"textbox l-textbox l-edit l-edit-editor l-edit-textbox l-edit-${CType}\" type=\"${EditType.indexOf('int')>-1 ? 'number':EditType}\" ${EditType? 'data-type=\"'+EditType+'\"': ''} ${EditMin} ${EditMax} value=\"${Lure.String.QuoteScreen(Lure.GetProperty(ControllerData, Property), true)}\"  data-controller=\"${Controller.ID}\" data-property=\"${Property}\"  data-line=\"${LineID}\"> ${SaveButton}</div>`;\r\n            }\r\n\r\n            if (Lure.Settings.Editable.AutoFocus)\r\n                Lure.Select('.l-edit-editor', EditableElement).focus();\r\n            if (Lure.Settings.Editable.AutoSelect)\r\n                Lure.Select('.l-edit-editor', EditableElement).select();\r\n        }\r\n        else    //<select>'able data\r\n        {\r\n            let string_Select = `<div class=\"l-row l-flex-between l-flexa-center l-flex-100\"><select class=\"select l-select l-edit l-edit-editor l-edit-select l-edit-${CType}\"  data-controller=\"${Controller.ID}\" data-property=\"${Property}\" data-line=\"${LineID}\">`;\r\n            let SelectData = eval(EditableElement.dataset['object']);\r\n            let PropertyValue = EditableElement.dataset['value'];\r\n            let PropertyShow = EditableElement.dataset['present'];\r\n            for (let i = 0; i < SelectData.length; i++ ){\r\n                let item = SelectData[i];\r\n            if (typeof item === typeof {}){\r\n                    string_Select += `<option class=\"l-edit\" value=\"${Lure.GetProperty(item, PropertyValue)}\" ${(Lure.GetProperty(item, PropertyValue) === Lure.GetProperty(ControllerData, Property))? \"selected\":\"\"} data-controller=\"${Controller.ID}\" data-property=\"${Property}\" data-line=\"${LineID}\">${Lure.GetProperty(item, PropertyShow)}</option>`;\r\n                }\r\n                else{\r\n                    string_Select += `<option class=\"l-edit\" value=\"${item}\" ${(item === Lure.GetProperty(ControllerData, Property))? \"selected\":\"\"} data-controller=\"${Controller.ID}\" data-property=\"${Property}\" data-line=\"${LineID}\">${item}</option>`;\r\n                }\r\n            }\r\n            string_Select += `</select>${SaveButton}</div></div>`;\r\n            EditableElement.innerHTML = string_Select;\r\n\r\n        }\r\n\r\n\r\n    },\r\n    Save(EditableElement, Controller){\r\n        let LineID = Controller.isLineBuilder ? EditableElement.dataset['line']: 'proto';\r\n        let Property = EditableElement.dataset['property'];\r\n        Property = Property.replace('$item', '').replace('.$this', '').replace('$this', '');\r\n        //console.log('Property',`[${LineID}].`,Property);\r\n\r\n        let ItemNew  = Controller.isLineBuilder? Controller._DataPrivateDict[LineID].Data : Controller._DataPrivate;\r\n        let ItemPrev = Controller.isLineBuilder? Controller._DataDict[LineID].Data        : Controller._Data;\r\n        let ValueNew  = Lure.GetProperty(ItemNew, Property);\r\n        let ValuePrev = Lure.GetProperty(ItemPrev, Property);\r\n        /* set editor value */\r\n        const Editor = Lure.Select('.l-edit-editor', EditableElement);\r\n        if (Editor) Editor.value = ValueNew;\r\n\r\n        if (ValueNew === ValuePrev)\r\n            return Lure.Editable.RemoveEdits(Controller.Owner);\r\n\r\n        EditableElement.classList.remove('l-edit-editing');\r\n        EditableElement.classList.remove('l-edit-changed');\r\n        EditableElement.classList.add('l-edit-waiting');\r\n        if (!EditableElement.classList.contains(Lure.Settings.Editable.ClassEditableForce))\r\n        {\r\n            EditableElement.innerHTML = EditableElement._innerHTML;\r\n            Lure.Select('.l-edit-value',EditableElement).innerHTML = Controller.PropFormat[Property] ? Controller.PropFormat[Property](ValueNew, ItemNew) : ValueNew;\r\n        }\r\n        if (Controller.Type === 'proto'){\r\n            return Controller.OnChange(Property, ValueNew, ValuePrev)\r\n                .then(()=>{\r\n                    EditableElement.classList.remove('l-edit-waiting');\r\n                    Controller.SetProperty(Property, Lure.GetProperty(ItemNew, Property), false);\r\n                    //Controller.Refresh();\r\n                    //Lure.Editable.RemoveEdits(Controller.Owner);\r\n                })\r\n                .catch((e)=>{\r\n                    EditableElement.classList.remove('l-edit-waiting');\r\n                    Lure.Select('.l-edit-value',EditableElement).innerHTML = Controller.PropFormat[Property] ? Controller.PropFormat[Property](ValuePrev, ItemPrev) : ValuePrev;\r\n                    console.error(`[Lure.Proto] Save Error. Property: \"${Property}\", Value: \"${ValueNew}\"`, '\\n',Controller, '\\n',e);\r\n                })\r\n        }\r\n        else if (Controller.Type === 'controller'){\r\n            return Controller.LineSave(Controller._DataDict[LineID], Property, ValueNew, LineID)\r\n                .then(()=>{\r\n                    EditableElement.classList.remove('l-edit-waiting');\r\n                    if (Property === ''){\r\n                        Controller._DataDict[LineID].Data = Lure.GetProperty(Controller._DataPrivateDict[LineID].Data, Property)\r\n                    }else{\r\n                        Lure.SetProperty(Controller._DataDict[LineID].Data, Property, Lure.GetProperty(Controller._DataPrivateDict[LineID].Data, Property));\r\n                    }\r\n\r\n                    //Lure.Editable.RemoveEdits(Controller.Owner);\r\n                    Controller.OnChange('save', Controller._DataDict[LineID], Property);\r\n                })\r\n                .catch((e)=>{\r\n                    EditableElement.classList.remove('l-edit-waiting');\r\n                    Lure.Select('.l-edit-value', EditableElement).innerHTML = Controller.PropFormat[Property] ? Controller.PropFormat[Property](ValuePrev) : ValuePrev;\r\n                    console.error(`[Lure.Templator] Save Error. LineID: \"${LineID}\", Property: \"${Property}\", Value: \"${Lure.GetProperty(ItemNew, Property)}\"`, e, '\\n',Controller);\r\n                })\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//DialogBlur: null,                    //{string, jQuery, HTMLElement} - where blur on dialog\r\n//DialogAnimation: 'lure-animation-dialog', //{string} -  css-animation class\r\n//EditableClass:  'editable',\r\n//EditableWaiting:  'editable-waiting',\r\nLure.Settings.Editable = {\r\n    _CSSEditable: 'editable',\r\n    _ClassEditable: 'editable',\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get ClassEditable(){\r\n        return this._ClassEditable;\r\n    },\r\n    set ClassEditable(val){\r\n        this._ClassEditable = val;\r\n        Lure._CompileSmart.RegExp.Editable   = new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(${val})[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>/`);\r\n        Lure._CompileSmart.RegExp.EditRemove = new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(${this._ClassEditable}|${this._ClassRemovable})[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>`, 'g');\r\n    },\r\n    _ClassRemovable: 'removable',\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get ClassRemovable(){\r\n        return this._ClassRemovable;\r\n    },\r\n    set ClassRemovable(val){\r\n        this._ClassRemovable = val;\r\n        Lure._CompileSmart.RegExp.Editable   = new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(${val})[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>/`);\r\n        Lure._CompileSmart.RegExp.EditRemove = new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(${this._ClassEditable}|${this._ClassRemovable})[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>`, 'g');\r\n    },\r\n    ClassEditableForce: 'editable-force',\r\n    CSSEditableForce: 'editable-force',\r\n\r\n    CSSEditing: 'l-edit-editing',\r\n    CSSChanged: 'l-edit-changed',\r\n    CSSWaiting: 'l-edit-waiting',\r\n\r\n    ClassEditing: 'l-edit-editing',\r\n    ClassChanged: 'l-edit-changed',\r\n    ClassWaiting: 'l-edit-waiting',\r\n\r\n\r\n    AutoSelect: true,\r\n    AutoFocus: true,\r\n};","/* make refresher template fields only*/\r\nLure._CompileSmart = {\r\n    RegexpOperator: new RegExp(`{{#(each|if|endeach|endif)[^}]*}}`, 'i'),\r\n    RegExp:{\r\n        SpaceKiller:    new RegExp(`<\\\\/[\\\\w-]+>[^\\\\s]*(\\\\s{2,}[^\\\\S]*)<`, 'g'),\r\n        _Parser:        new RegExp(`<[\\\\s\\\\S]*?>([\\\\s\\\\S]*)<[\\\\s\\\\S]*>`),\r\n        DataLine:       new RegExp(`<[\\\\w ]+ [\\\\s\\\\S]*?({{#data-line}})[\\\\s\\\\S]*?>`, 'gi'),\r\n        LineID:         new RegExp(`{{#LineID}}`, 'gi'),\r\n\r\n        If:             new RegExp(`{{#if\\\\s+([^}]+)}}([\\\\s\\\\S]*?){{#endif}}`, 'gi'),\r\n        IfInline:       new RegExp(`{{#if[\\\\s]*(\\\\([\\\\s\\\\S]+?\\\\)[\\\\s\\\\S]*?:[\\\\s\\\\S]*?)}}`, 'gi'),//new RegExp(`{{#if([\\\\s\\\\S]*?\\\\?[\\\\s\\\\S]*?:[\\\\s\\\\S]*?)}}`, 'gi'),\r\n        IfInlineSelect: new RegExp(`{{#if([\\\\s\\\\S]*?)\\\\?[\\\\s\\\\S]*?}}`, 'gi'),//new RegExp(`{{#if([\\\\s\\\\S]*?\\\\?[\\\\s\\\\S]*?:[\\\\s\\\\S]*?)}}`, 'gi'),\r\n        Each:           new RegExp(`{{#each\\\\s+([^}]+)}}`,'gi'),\r\n        \r\n        EditRemove:     new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*(editable|removable)[\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*['\"][^>]*>([^<]*)<[^>]+>`, 'g'),//new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(editable|removable)[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>`, 'g'),\r\n        Editable:       new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*(editable)[\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*['\"][^>]*>([^<]*)<[^>]+>`),//new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(editable)[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>`),\r\n        Removable:      new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*(removable)[\\\\w\\\\d\\\\s-#{()}.='\":?\\\\\\\\>]*['\"][^>]*>([^<]*)<[^>]+>`),//new RegExp(`<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(removable)[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>`),\r\n        EditableInEach: new RegExp(`{{#each\\\\s+([^}]+)}}[\\\\s\\\\S]*<[^>]+class=['\"][\\\\w\\\\d\\\\s-{}]*(editable|removable)[\\\\w\\\\d\\\\s-{}]*['\"][^>]*>([^<]*)<[^>]+>[\\\\s\\\\S]*{{#endeach}}`, 'g'),\r\n         \r\n        Expression:     new RegExp(`{{([^#}]+)}}`, 'g'),\r\n    },\r\n    \r\n    CompilePart: {\r\n        /* Editable & Removable*/\r\n        //helper preCompileEditable\r\n        /**\r\n         *\r\n         * @param match\r\n         * @param editable\r\n         * @param content\r\n         * @param ParentProp\r\n         * @param Controller\r\n         * @returns {*}\r\n         */\r\n        PlaceEditable(match, editable, content, ParentProp, Controller) {\r\n            if (match.indexOf('data-property=')> -1)\r\n                return match;\r\n\r\n            let DataController = Controller ? `data-controller=\"${Controller.ID}\"`: '';\r\n            let matchingEditable  = (Lure._CompileSmart.RegExp.Editable).exec(match);\r\n            let matchingRemovable = (Lure._CompileSmart.RegExp.Removable).exec(match);\r\n            const rem  = matchingRemovable !== null ? `<div class=\"l-edit l-edit-icon l-edit-${Controller.Type} l-edit-btn-remove\" ${DataController} data-line=\"{{__LineID}}\" title=\"${Lure.Culture.Lang.Remove}\"></div>` : '';\r\n            const edt  = matchingEditable  !== null ? `<div class=\"l-edit l-edit-icon l-edit-${Controller.Type} l-edit-btn-edit\"   ${DataController} data-line=\"{{__LineID}}\" title=\"${Lure.Culture.Lang.Change}\"></div>` : '';\r\n            match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                return a.replace(b, ` data-line={{__LineID}} data-property=\"${ParentProp? ParentProp+'[{{j}}].':''}${content.replace('{{','').replace('}}','')}\" ${DataController}>`);\r\n            });\r\n            Controller.isEditable  = matchingEditable  ? true: Controller.isEditable;\r\n            Controller.isRemovable = matchingRemovable ? true: Controller.isRemovable;\r\n            //if (content.indexOf('Status')>-1) debugger;\r\n            return match.replace(new RegExp(`>[^<]*(${content.replace(/\\$/g, \"\\\\$\")})[^>]*</`), function(m, ctn){\r\n                return m.replace(ctn, `<div class=\"l-edit-container l-row l-flex-between l-flexa-center l-flex-100\"><div class=\"l-edit l-edit-value\" data-line=\"{{__LineID}}\" ${DataController}>${content}</div><div class=\"l-edit l-edit-controls\">${edt}${rem}</div></div>`)\r\n            });\r\n        },\r\n        // helper preCompileEditable\r\n        MakeEditable(s, ParentProp, Controller) {\r\n            return s.replace(Lure._CompileSmart.RegExp.EditRemove, function (match, editable, content) {\r\n                return Lure._CompileSmart.CompilePart.PlaceEditable(match, editable, content, ParentProp, Controller)\r\n            });\r\n        },\r\n        // Check ListItem Editable\r\n        Editable(s, Controller){\r\n            //if (Controller && Controller.ID === 165) debugger;\r\n            //check for Editable in #each\r\n            s = s.replace(Lure._CompileSmart.RegExp.EditableInEach, function (match, editable, content) {\r\n                let ParentProp = match.match(/{{#each\\s+([^}]+)}}/)[1];\r\n                return Lure._CompileSmart.CompilePart.MakeEditable(match, ParentProp, Controller);\r\n            });\r\n            s = Lure._CompileSmart.CompilePart.MakeEditable(s, false, Controller);\r\n            return s;\r\n        },\r\n        /* #if (big) */\r\n\r\n        If(s, Controller) {\r\n            return s.replace(/#IF/g, '#if')\r\n                    .replace(/#ENDIF/g, '#endif')\r\n                    .replace(Lure._CompileSmart.RegExp.If, function (bkt, condition, expression ) {\r\n                        condition = condition\r\n                            .replace(/&gt;/g,  \">\")\r\n                            .replace(/&lt;/g,  \"<\")\r\n                            .replace(/#less/gi, \"<\")\r\n                            .replace(/#more/gi, \">\")\r\n                            .replace(/&amp;/g, \"&\")\r\n                            .replace(/\\\\'/g,   '\"')\r\n                            .replace(/#or/gi,  \" || \")\r\n                            .replace(/#and/gi, \" && \");\r\n                    return `\\`+\r\n/* OUTER \"IF\" */\r\n(function($this){\r\nif (${(Lure._CompileSmart.CompilePart.Prepare(condition, Controller))}) {\r\n    return \\`${expression}\\`;\r\n}\r\nreturn '';\r\n}).call(this, $this)+\\``;\r\n                });\r\n        },\r\n\r\n        /* #if (inline) */\r\n        IfInline(s){\r\n            s = s.replace(Lure._CompileSmart.RegExp.IfInline, function (s, condition) {\r\n                condition = condition\r\n                    .replace(/&gt;/g,  \">\")\r\n                    .replace(/&lt;/g,  \"<\")\r\n                    .replace(/#less/gi, \"<\")\r\n                    .replace(/#more/gi, \">\")\r\n                    .replace(/&amp;/g, \"&\")\r\n                    //.replace(/\\|/g,    '\"')\r\n                    .replace(/\\\\'/g,   '\"')\r\n                    .replace(/#or/gi,  \" || \")\r\n                    .replace(/#and/gi, \" && \");\r\n                return `\\`+\r\n/* LOCAL \"IF\" */\r\n(function(){\r\n    return (${condition}); \r\n    return '';}).call(this)+\\``;\r\n            });\r\n            return s;\r\n        },\r\n\r\n        Each(s, Controller){\r\n            let spaces = \"    \";\r\n            let EachList = s.match(Lure._CompileSmart.RegExp.Each);\r\n            let lvl = 0;\r\n            if (EachList !== null){\r\n                for (let i = EachList.length-1; i >= 0; i--){\r\n                    let current = EachList[i];\r\n                    let isInnerEach = false;\r\n                    lvl++;\r\n                    let StartPoint = s.indexOf(current);\r\n                    let EndPoint   = s.indexOf(\"{{#endeach}}\", StartPoint);\r\n\r\n                    let prevStarts = s.slice(0, StartPoint).match(Lure._CompileSmart.RegExp.Each);\r\n                    prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                    let prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\r\n                    prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n                    if ( (prevStarts > prevEnds ))\r\n                    {\r\n                        isInnerEach = true;\r\n                        lvl = 0;\r\n                    }\r\n                    ////\r\n                    let string_Each = s.slice(StartPoint, EndPoint+12);\r\n                    let expression  = string_Each.slice(current.length, string_Each.length-12);\r\n                    let ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function(a,name){\r\n                        return name;\r\n                    });\r\n                    ObjectName = Lure._CompileSmart.CompilePart.CheckProperty(ObjectName, Controller);\r\n                    //the each template\r\n                    let eachComplied = '`+' +\r\n                        spaces.repeat(lvl)+'/* EACH */(function(inner, $parent){                                                                   \\r\\n' +\r\n                        spaces.repeat(lvl)+'    if (!inner || inner === \"'+Lure.Settings.Controller.Common.Undefined+'\" || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' +\r\n                        spaces.repeat(lvl)+'        return \"\";                                                                                     \\r\\n' +\r\n                        spaces.repeat(lvl)+'    let string_result= \"\";                                                                             \\r\\n' +\r\n                        spaces.repeat(lvl)+'    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' +\r\n                        spaces.repeat(lvl)+'        let $this = inner[j];                                                                          \\r\\n' +\r\n                        spaces.repeat(lvl)+'        let o = inner[j];                                                                              \\r\\n' +\r\n                        spaces.repeat(lvl)+'        string_result = string_result + \\`'+Lure._CompileSmart.CompilePart.Prepare(expression, Controller) + '\\`; \\r\\n' +\r\n                        spaces.repeat(lvl)+'    }                                                                                                  \\r\\n' +\r\n                        spaces.repeat(lvl)+'    return string_result;                                                                              \\r\\n' +\r\n                        spaces.repeat(lvl)+'}).call(this,'+ObjectName+', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\r\n                    s = s.replace(string_Each, eachComplied)\r\n\r\n                }\r\n            }\r\n            return s;\r\n        },\r\n\r\n\r\n        /* Common Parsing */\r\n        CheckProperty(ObjectName, Controller) {\r\n            //ok check if it's expression\r\n            //ObjectName = ObjectName.replace(/&gt;/g, '>').replace(/&lt;/g, '<');\r\n            function checking(c) {\r\n                let s = c;//.replace(/\\s/g, \"\");\r\n                //open bracket\r\n                let OpenBracket  = '';\r\n                let CloseBracket = '';\r\n                let Anti = ''; // IsEnabled - !IsEnabled\r\n                if (s.match(/^\\(([^(]*)$/) !== null){\r\n                    s=s.substring(1);\r\n                    OpenBracket = \"(\";\r\n                }\r\n                if ( /^([^)]*)\\)$/.test(s)){\r\n                    s=s.substring(0, s.length-1);\r\n                    CloseBracket = \")\";\r\n                }\r\n                if (s.trim().indexOf(\"!\") === 0){\r\n                    Anti = '!';\r\n                    s = s.replace('!', '');\r\n                }\r\n                // if (Controller.ID === 33 && s.indexOf('!IsEnabled') > -1)\r\n                //     ;//debugger;\r\n                //if (c.indexOf('QuanReturn')> -1)\r\n                //    debugger;\r\n                //if(s.indexOf('this.') > -1) debugger;\r\n                let containsSpecialObject = (s.indexOf('$item')> -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1 ) ;\r\n                let containsSpecialObjectTreeBuiler = (s.indexOf('$index')> -1 || s.indexOf('$j')> -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1 || s.trim().indexOf('this.') === 0 ) ;\r\n                let isSpecialSymbol = (s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1|| s.indexOf(\"<\") > -1);\r\n                let isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\r\n                let isIteratorOrLineID = s === \"i\" || s === \"j\" || s === '__LineID';\r\n                let isNumber = !isNaN(s);\r\n                if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIteratorOrLineID || isNumber || isString ||isSpecialSymbol){\r\n                    if (s.indexOf('$g.') > -1){ //if global object\r\n                        return OpenBracket+Anti+s.replace('$g.', '');\r\n                    }\r\n                    return c;\r\n                }\r\n                //if (c.indexOf('DateOperation228')>-1) debugger;\r\n                //if (!!Controller && Controller.Owner.Name === 'RepairCurrent') debugger;\r\n\r\n                if (!!Controller && Controller.PropFormat && Controller.PropFormat[s]  /* && false */){\r\n                    //return OpenBracket +Anti+`this.${Lure.String.Capitalize(Controller.Type)}.PropFormat[\"${s}\"].call(this, o.${s}, $this)`+CloseBracket;\r\n                    return OpenBracket +Anti+`__Controller.PropFormat[\"${s}\"].call(this, o.${s}, $this)`+CloseBracket;\r\n                }\r\n\r\n                return (OpenBracket+`((typeof o.${s} !== 'undefined')? ${Anti}o.${s}:\"${Lure.Settings.Controller.Common.Undefined}\")`+CloseBracket);\r\n                //return (OpenBracket+\"o.\"+s);\r\n            }\r\n            ObjectName = ObjectName.replace(/[^\\-+\\/%*]+/g, function (c) {\r\n                let parent = c.match(/&/g);\r\n                if (parent !== null){\r\n                    for (let i = 0; i < parent.length; i++){\r\n                        if (i < parent.length-1)\r\n                            c = c.replace('&', \"$parent\");\r\n                        else\r\n                            c = c.replace('&', \"$parent.$this\");\r\n                    }\r\n                    return c;\r\n                }\r\n                else {\r\n                    return checking(c);\r\n                }\r\n            });\r\n            ObjectName = ObjectName.replace(/\\\\'/g,\"'\");\r\n            ObjectName = \"(\"+ObjectName+\")\"; //fucking concatenation shell\r\n            return ObjectName;\r\n        },\r\n        CheckPropertyE(ObjectName, Controller) {\r\n            let Special = ['this', '$item', '$this', '$parent', '$g', '__LineID', 'i' ,'j', //'$global',\r\n                '$index', '$j', '$key', '$lvl'];                //TreeBuilder's\r\n            let Func = 0;                   //function count(level) like f(g(p(x,y))) - 3\r\n            let Word = '';                  //property or number or const string\r\n            let Splitters = '+-*/^<>?:|&%= ,';\r\n            let Quotes = '`\"\\'';\r\n            let isString = false;\r\n            let isFunc   = false;\r\n\r\n            let Result = '';\r\n            function isParam(word) {\r\n                return word.trim().length>0                        //not empty\r\n                    && Special.indexOf(word.split('.')[0]) < 0  //if not special word\r\n                    && !Lure.isNumeric(word)                    //not a number\r\n                //&& \"()\".indexOf(word.trim()) < 0            //kurwa?\r\n                //&& !isString\r\n            }\r\n            function FinishWord(Ch) {\r\n                if (!isString){\r\n                    if (isParam(Word)){ //is param\r\n                        //debugger;\r\n                        if (!!Controller && Controller.PropFormat && Controller.PropFormat[Word])\r\n                            Word = `this.${Lure.String.Capitalize(Controller.Type)}.PropFormat[\"${Word}\"].call(this, o.${Word}, $this)`;\r\n                        else\r\n                            Word = `((typeof o.${Word}!==typeof void 0)?o.${Word}:\"${Lure.Settings.Controller.Common.Undefined}\")`;\r\n                    }\r\n                    Result += Word;\r\n                    Word = '';\r\n                    if (Ch !== ' ')\r\n                        Result += Ch;\r\n                }else{\r\n                    Word +=Ch;\r\n                    Result += Word;\r\n                    Word = '';\r\n                    isString = false\r\n                }\r\n            }\r\n            for (let i = 0; i < ObjectName.length; i++){\r\n                let Ch = ObjectName.charAt(i);\r\n                //string check\r\n                if (Quotes.indexOf(Ch) > 0){\r\n                    if (isString){\r\n                        if (Ch === Word.charAt(0) && (i>0 && ObjectName.charAt(i-1) !== '\\\\')){\r\n                            FinishWord(Ch);\r\n                            continue;\r\n                        }\r\n                        else if (Ch === Word.charAt(0) && (i>0 && ObjectName.charAt(i-1) === '\\\\')){\r\n                            Word = Word.substring(0, Word.length-1);\r\n                            Word += Word.charAt(0);\r\n                            continue;\r\n                        }\r\n                    }else{\r\n                        isString = true;\r\n                        Word += Ch;\r\n                        continue;\r\n                    }\r\n                }\r\n                //if sting quote opened before\r\n                if (isString){\r\n                    Word += Ch;\r\n                    continue;\r\n                }\r\n                if (Splitters.indexOf(Ch) < 0){   //if not splitter character\r\n                    /*bracket test: function caller or just brackets*/\r\n                    if (Ch === '(' && !isString){\r\n                        if (i > 0 && Splitters.indexOf(ObjectName.charAt(i-1)) < 0){\r\n                            isFunc = true;\r\n                            Func++;\r\n                            FinishWord(Ch);\r\n                        }\r\n                        else{\r\n                            Result += Ch;\r\n                        }\r\n                    }\r\n                    else if (Ch === ')' && !isString){\r\n                        if (Func>0){\r\n                            Func--;\r\n                        }\r\n                        FinishWord(Ch);\r\n                    }\r\n                    else {\r\n                        Word += Ch;\r\n                    }\r\n                }\r\n                else{\r\n                    FinishWord(Ch);\r\n                }\r\n            }\r\n            //last word commit\r\n            FinishWord('');\r\n            return Result;\r\n        },\r\n        Prepare(c, Controller){\r\n            //c = Lure._CompileSmart.CompilePart.IfInline(c, Controller);\r\n            return c.replace(Lure._CompileSmart.RegExp.Expression, function(bkt, expression){\r\n                return '${'+Lure._CompileSmart.CompilePart.CheckProperty(expression,Controller)+'}';\r\n            })\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {string}\r\n         */\r\n        FnString(){\r\n            return `if (!p)\r\n    p = {};\r\nvar i = p.i ? p.i : 0;\r\nvar j = p.j ? p.j : 0;\r\nvar length = p.length;\r\nvar __LineID = typeof p.LineID !== 'undefined' ? p.LineID : null;\r\nvar __Controller = p.Controller;\r\nvar $this = o;\r\nvar $item = o;\r\nvar $num = i+1;\r\nvar $denum = length-i;\r\n//TreeBuilder's\r\nvar $index = p.$index;\r\nvar $key = p.$key;\r\nvar $lvl = p.$lvl;\r\nvar $j   = p.$j;\r\nvar string_Result = \"\";\r\nif (o === undefined || (!p.RenderAnyway && Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \r\n    return '';\r\nreturn \\``\r\n        },\r\n    },\r\n    Compile(DomString, Controller){\r\n        //let ControllerID = Controller.ID;\r\n        let fns = Lure._CompileSmart.CompilePart.FnString();\r\n\r\n        DomString = DomString.replace(Lure._CompileSmart.RegExp.LineID, '{{__LineID}}');\r\n        DomString = DomString.replace(Lure._CompileSmart.RegExp.DataLine, (m, dataline)=>{\r\n            return m.replace(dataline, 'data-line=\"{{__LineID}}\"');\r\n        });\r\n\r\n\r\n        DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{2,}/g, ' ');\r\n\r\n        //shell '\r\n        DomString = DomString.replace(/'/g, \"\\\\'\");\r\n        //DomString = DomString.replace(/&gt;/g, '>').replace(/&lt;/g, '<');\r\n        DomString = DomString.replace(Lure._CompileSmart.IfInlineSelect, function(match, b){\r\n            return match.replace(b, '&lt;');\r\n        });\r\n\r\n        DomString = Lure._CompileSmart.CompilePart.Editable(DomString, Controller);\r\n        DomString = Lure._CompileSmart.CompilePart.IfInline(DomString, Controller);\r\n        DomString = Lure._CompileSmart.CompilePart.If(DomString, Controller);\r\n        DomString = Lure._CompileSmart.CompilePart.Each(DomString, Controller);\r\n\r\n        DomString = Lure._CompileSmart.CompilePart.Prepare(DomString, Controller);\r\n\r\n        \r\n        fns += DomString +'`;';\r\n        fns = fns\r\n                .replace(/`/g, `'`)\r\n                .replace(/\\${([^}]*)}/g, function(match, val){\r\n                    return `'+${val}+'`\r\n                });\r\n\r\n        let function_f;\r\n        try {\r\n            function_f = new Function('o', 'p', fns);\r\n            function_f({},{});\r\n        }\r\n        catch (e){\r\n            console.info(fns);\r\n            console.error(e);\r\n        }\r\n        //console.log('Compiled:');\r\n        //console.log(f);\r\n        return function_f;\r\n    },\r\n\r\n    GetContentElements(HTMLContent){\r\n        let x = Lure.SelectAll('*:not(g):not(path):not(clipPath):not(text):not(br)', HTMLContent)\r\n            .Where(()=>true); //trick for get normal array\r\n        x.push(HTMLContent);\r\n        return x;\r\n    },\r\n\r\n    /**\r\n     * @returns {string}\r\n     **/\r\n    TagScreen(DOMString){\r\n        return DOMString.replace(/</g,'lt;').replace(/>/g,'gt;')\r\n    },\r\n\r\n    /**\r\n     * @returns {string}\r\n     **/\r\n    TagUnscreen(DOMString){\r\n        return DOMString.replace(/lt;/g,'<').replace(/gt;/g,'>')\r\n    },\r\n    TableScreen(DOMString){\r\n        return DOMString.replace(/<\\/?(tr|td|th|thead|tbody|table)[^>]*>/gi, (tag, tagName)=>{\r\n            return tag.replace(tagName, `l-${tagName}`)\r\n        })\r\n    },\r\n    TableUnscreen(DOMString){\r\n        return DOMString.replace(/<\\/?(l-tr|l-td|l-th|l-thead|l-tbody|l-table)[^>]*>/gi, (tag, tagName)=>{\r\n            return tag.replace('l-','');\r\n        })\r\n    },\r\n    FilterEachIf(s){\r\n        let EachList = [];\r\n        let IfList = [];\r\n        let each = Lure._CompileSmart.RegExp.Each.exec(s);\r\n        let aif =  Lure._CompileSmart.RegExp.If.exec(s);\r\n        while(each !== null){\r\n            EachList.push(each);\r\n            each = Lure._CompileSmart.RegExp.Each.exec(s);\r\n        }\r\n        while(aif !== null){\r\n            IfList.push(aif);\r\n            aif = Lure._CompileSmart.RegExp.If.exec(s);\r\n        }\r\n\r\n        //let EachList = s.match(Lure._CompileSmart.RegExp.Each);\r\n        let lvl = 0;\r\n        if (EachList.length > 0){\r\n            for (let i = EachList.length-1; i >= 0; i--){\r\n                let current = EachList[i];\r\n                let isInnerEach = false;\r\n                //lvl++;\r\n                let StartPoint = current.index;\r\n                let EndPoint   = s.indexOf(\"{{#endeach}}\", StartPoint);\r\n\r\n                let prevStarts = s.slice(0, StartPoint).match(Lure._CompileSmart.RegExp.Each);\r\n                prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                let prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\r\n                prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n\r\n                //console.warn(`i:${i}, lvl:${lvl}`);\r\n                //console.warn(s.slice(StartPoint, EndPoint+12));\r\n\r\n                if ( lvl > 0){\r\n                    let x = lvl;\r\n                    for (let l = 0; l < x; l++){\r\n                        EndPoint   = s.indexOf(\"{{#endeach}}\", EndPoint+12);\r\n                        lvl--;\r\n                    }\r\n                    //console.error(s.slice(StartPoint, EndPoint+12));\r\n                }\r\n\r\n                if ( (prevStarts > prevEnds ))\r\n                {\r\n                    isInnerEach = true;\r\n                    lvl += prevStarts - prevEnds;\r\n                    //lvl++;\r\n                    // TOD CHECK FOR BUG WHEN INNER EACH 17.08.2018.. seems like wokrs properly\r\n                    // upd. no repro\r\n                }\r\n                let string_Each = s.slice(StartPoint, EndPoint+12);\r\n                s = s.replace(string_Each, Lure._CompileSmart.TagScreen(string_Each))\r\n            }\r\n        }\r\n        lvl = 0;\r\n        if (IfList !== null){\r\n            for (let i = IfList.length-1; i >= 0; i--){\r\n                let current = IfList[i];\r\n                let isInnerIf = false;\r\n                let StartPoint = current.index;\r\n                let EndPoint   = s.indexOf(\"{{#endif}}\", StartPoint);\r\n\r\n                let prevStarts = s.slice(0, StartPoint).match(Lure._CompileSmart.RegExp.Each);\r\n                prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                let prevEnds = s.slice(0, StartPoint).match(/{{#endif}}/g);\r\n                prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n\r\n                if ( lvl > 0){\r\n                    let x = lvl;\r\n                    for (let l = 0; l < x; l++){\r\n                        EndPoint   = s.indexOf(\"{{#endif}}\", EndPoint+10);\r\n                        lvl--;\r\n                    }\r\n                }\r\n                if ( prevStarts > prevEnds ) {\r\n                    isInnerIf = true;\r\n                    lvl += prevStarts - prevEnds;\r\n                }\r\n                let string_If = s.slice(StartPoint, EndPoint+10);\r\n                s = s.replace(string_If, Lure._CompileSmart.TagScreen(string_If))\r\n            }\r\n        }\r\n        return s;\r\n    },\r\n    FilterOpetators(DOMString){\r\n        let s = DOMString;\r\n\r\n        //return s;\r\n        return s.replace(/{{#(each|if)[\\w\\s.()]*?}}([\\s\\S]*?){{#end(each|if)}}/gi, (match,name,inner)=>{\r\n            return match.replace(inner, Lure._CompileSmart.TagScreen(inner));\r\n        })\r\n    },\r\n    GenField: function(element, Controller){\r\n        let ControllerID = Controller.ID;\r\n        let Attributes = element.attributes;\r\n        let Property = {\r\n            LSElementID: element.attributes['data-lsmarti'].value,\r\n            Attributes: {},\r\n            InnerHTML: null\r\n        };\r\n        let Count = 0;\r\n        for (let i = 0; i < Attributes.length; i++){\r\n            if (Attributes[i].value.indexOf('{{') > -1){\r\n                Property.Attributes[Attributes[i].name] = Lure._CompileSmart.Compile(Attributes[i].value,  Controller);\r\n                Count++;\r\n            }\r\n        }\r\n        let inner = element.innerHTML.replace(/[\\s]*/g,'');\r\n        /*if (inner.indexOf('{{#each') > -1)\r\n            debugger;*/\r\n        \r\n        const isSelf = ( (element.childNodes.length < 1 || element.childNodes.length < 2 && element.childNodes[0] && element.childNodes[0].constructor.name.toLowerCase() === 'text') && inner.indexOf('{{') > -1);      //2 because first childNode is 'text'\r\n        const isConsistsDiff = (inner.substring(0, 7).toLowerCase()  === '{{#each') || (inner.substring(0, 5).toLowerCase() === '{{#if');\r\n\r\n        //if (element.classList.contains('ksks') || element.tagName.toLowerCase() === 'input') debugger;\r\n        //TODO need test\r\n\r\n        if ( isSelf || isConsistsDiff ){\r\n            //<input([\\s]*[\\w\\d]+=(\"|')[^\"]*(\"|'))*[\\s]*(({{[^{}]+}})([\\s]*[\\w\\d]+=(\"|')[^>]*(\"|'))*)>\r\n            /*if (element.classList.contains(Lure.Settings.Editable.ClassRemovable)){\r\n                Controller.isRemovable = true;\r\n            }*/\r\n\r\n           /*\r\n             //TODO find out for wat this code is needed\r\n             //seems like it wraps inpunts and options for rerender it on refresh\r\n           if (inner.indexOf('<input') > -1 || inner.indexOf('<option') > -1)\r\n            {\r\n                console.log('<>input|option   ->', inner);\r\n                //debugger;\r\n                //let ds = (inner.replace(/[\\w\\d]+=(\"|')[^\"]*(\"|')/g, '').indexOf(\"{{\") > -1);\r\n                let inputs = Lure.SelectAll('input, option', element);\r\n                for (let i = 0; i < inputs.length; i++){\r\n                    let NewElem = Lure.CreateElementFromString(`<span></span>`);\r\n                    let Outer = inputs[i].outerHTML;\r\n                    element.insertBefore(NewElem, inputs[i]);\r\n                    inputs[i].remove();\r\n                    //FIXME input add to renderlist\r\n                    Properties.push({\r\n                        HTMLElement: NewElem,\r\n                        Attributes: {},\r\n                        InnerHTML: Lure._CompileSmart.Compile(Outer,  Controller)\r\n                    });\r\n                }\r\n            }\r\n            else */\r\n           if (element.classList.contains(Lure.Settings.Editable.ClassEditable) || element.classList.contains(Lure.Settings.Editable.ClassRemovable) ){\r\n                element = Lure.CreateElementFromString( Lure._CompileSmart.CompilePart.Editable(element.outerHTML, Controller)   );\r\n                Property.InnerHTML = Lure._CompileSmart.Compile(element.innerHTML,  Controller);\r\n            }\r\n           else {\r\n\r\n               let innerHTML = Lure._CompileSmart.TagUnscreen(element.innerHTML);\r\n               element.innerHTML = '';\r\n               Property.InnerHTML = Lure._CompileSmart.Compile(innerHTML,  Controller);\r\n           }\r\n           Count++;\r\n           /*if (isConsistsDiff){\r\n               //let ng = Lure.SelectAll('*', element).ToList();\r\n               //this._NonGrata = this._NonGrata.concat(ng);\r\n               element.innerHTML = '';\r\n           }*/\r\n        }\r\n        return (Count>0) ? Property : null\r\n    },\r\n    GenFields: function(DOMElements, Controller){\r\n        let Properties = [];\r\n        let NonGrata = [];\r\n        for( let i = 0; i < DOMElements.length; i++){\r\n            let x = Lure._CompileSmart.GenField(DOMElements[i], Controller);\r\n            if (x){\r\n                Properties.push(x);\r\n            }\r\n        }\r\n        return Properties;\r\n    },\r\n\r\n    SetUp(DOMString){\r\n        return DOMString.replace(/<[\\w-_]+ ?/g, (tag)=>{\r\n            return `${tag} data-lsmarti=\"${Lure.GetID()}\" `;\r\n        })\r\n    },\r\n};\r\nLure.Compile = function(DomString, Controller){\r\n    return Lure._CompileSmart.Compile(DomString, Controller);\r\n};\r\nLure.CompileSmart = function(DOMString, Controller=null, Lazy=true){\r\n    // if (Controller && Controller.ID === 1801)//992\r\n    //     debugger;\r\n    DOMString = Lure._CompileSmart.FilterEachIf(DOMString);\r\n    DOMString = Lure._CompileSmart.FilterOpetators(DOMString);\r\n    DOMString = Lure._CompileSmart.TableScreen(DOMString);\r\n    DOMString = Lure._CompileSmart.SetUp(DOMString);\r\n    //console.log(Screened);\r\n    \r\n    let DOMElement = Lure.CreateElementFromString(DOMString);\r\n    //console.log('DOMElement', DOMElement);\r\n    //let _Compiled = Lure.Compile(Lure._CompileSmart.TagUnscreen(DOMString), true, Controller);\r\n    //if (DOMString.indexOf('dfdfx')>-1)\r\n    //    debugger;\r\n\r\n\r\n    let _Compiled = Lure._CompileSmart.Compile(\r\n            Lure._CompileSmart.TagUnscreen(DOMString), Controller\r\n        ).bind(Controller.Owner);\r\n\r\n\r\n    let DOMElements = Lure._CompileSmart.GetContentElements(DOMElement);\r\n    let Properties  = Lure._CompileSmart.GenFields(DOMElements, Controller);\r\n    \r\n    const TagName = Controller ? Controller.Target.tagName : 'div';\r\n    let Smart = {\r\n        _Components: Properties,\r\n        _Compiled: _Compiled,\r\n        Template: Lure._CompileSmart.TagUnscreen(DOMString),\r\n        GetContext(LureContent, Element){\r\n            let PropsCloned = [];\r\n            for (let i = 0; i < Properties.length; i++){\r\n                PropsCloned[i] = {\r\n                    LSElementID: Properties[i].LSElementID,\r\n                    InnerHTML: Properties[i].InnerHTML,\r\n                };\r\n                PropsCloned[i].Attributes = {};\r\n                for (let k in Properties[i].Attributes){\r\n                    PropsCloned[i].Attributes[k] = Properties[i].Attributes[k];\r\n                }\r\n            }\r\n            let Ctx = {\r\n                _Components: PropsCloned,\r\n                _TargetElement: Element,\r\n                _LureContent: LureContent,\r\n                \r\n                Refresh(o, p={}){\r\n\r\n                    let Cs = this._Components;\r\n                    for (let i = 0; i<Cs.length;i++){\r\n                        if (!Cs[i].LSElement || !this._TargetElement.contains(Cs[i].LSElement)){\r\n                            Cs[i].LSElement = Lure.Select(`[data-lsmarti=\"${Cs[i].LSElementID}\"]`, this._TargetElement);\r\n                            Cs[i].LSElement = Cs[i].LSElement !== null ? Cs[i].LSElement:this._TargetElement;\r\n\r\n                            //here can be some elements in #if block, and on refresh may be  don't render:\r\n                            Cs[i].LSElement = Cs[i].LSElement.dataset['lsmarti'] === Cs[i].LSElementID ? Cs[i].LSElement : null\r\n                        }\r\n                        if (Cs[i].LSElement){\r\n\r\n                            if (Cs[i].InnerHTML){\r\n                                Cs[i].LSElement.innerHTML = Cs[i].InnerHTML.call(this._LureContent, o,p);\r\n                            }\r\n                            for (let key in Cs[i].Attributes){\r\n                                if (Cs[i].Attributes.hasOwnProperty(key)){\r\n                                    if (key === 'value'){\r\n                                        Cs[i].LSElement.value = Cs[i].Attributes[key].call(this._LureContent, o,p);\r\n                                    }\r\n                                    else if (key === 'checked' || key === 'disabled' || key === 'selected'){\r\n                                        let val = Cs[i].Attributes[key].call(this._LureContent, o,p);\r\n                                        if (Lure.PropTypes.TryParse(Lure.PropTypes.Bool, val) || val.toLowerCase() === 'key')\r\n                                            Cs[i].LSElement[key] = true;\r\n                                        else\r\n                                            Cs[i].LSElement[key] = false;\r\n                                    }\r\n                                    else{\r\n                                        Cs[i].LSElement.setAttribute(key, Cs[i].Attributes[key].call(this._LureContent, o,p) );\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            };\r\n            if (!Controller.isLineBuilder){\r\n                Ctx.FieldAdd = function(DOMElement) {\r\n                    DOMElement.setAttribute('data-lsmarti', Lure.GetID());\r\n                    //if (Lure._CompileSmart.GenField(DOMElement, Controller) === null)\r\n                    //    debugger;\r\n                    let x = Lure._CompileSmart.GenField(DOMElement, Controller);\r\n                    if (x){\r\n                        x.LSElement = DOMElement;\r\n                        this._Components.push(x);\r\n                    }\r\n                    \r\n                };\r\n            }\r\n            return Ctx;\r\n        },\r\n        \r\n        GenElement(o,p={}){\r\n            return Lure.CreateElementFromString(Lure._CompileSmart.TableUnscreen(_Compiled(o,p)), TagName)\r\n        },\r\n        GenLine(o, p={}){\r\n            return Lure._CompileSmart.TableUnscreen(_Compiled(o,p));\r\n        },\r\n        \r\n    };\r\n    return Smart;\r\n\r\n};","Lure.Controller.TemplatorProto = class LProto{\r\n    Refresh(NewData){\r\n        this._Refresh(NewData)\r\n    }\r\n    get Data(){\r\n        return this._Data;\r\n    }\r\n    set Data(d){\r\n        this._DataInit(d);\r\n        //this._DataChanged++;\r\n        //this._Data = this.Settings.DataClone ? Lure.Clone(d) : d;\r\n    }\r\n    SetProperty(Property, Val){\r\n        Lure.SetProperty(this._Data, Property, Val);\r\n        if (this.PropTypes[Property])\r\n            Lure.PropTypes.CheckProp(this._Data, this.PropTypes[Property], Property);\r\n        Lure.SetProperty(this._DataPrivate, Property, Lure.Object.Clone(Lure.GetProperty(this._Data, Property)));\r\n        this._Refresh();\r\n    }\r\n    GetProperty(Property){\r\n        if (!Property){\r\n            return this._Data;\r\n        }\r\n        return Lure.GetProperty(this._Data, Property);\r\n    }\r\n    FieldAdd(element){\r\n        this.Context.FieldAdd(element)\r\n    }\r\n\r\n    get isController(){\r\n        return false;\r\n    }\r\n    constructor({\r\n        Target          = null,\r\n        Content         = null,\r\n        Data            = {},\r\n        DataClone       = false,\r\n        Owner           = null,           //Lure.Content, which owns this Controller\r\n        OnChange        = ()=>{return Promise.resolve(true)},\r\n        BeforeBuild     = ()=>{},\r\n        AfterBuild      = ()=>{},\r\n        PropTypes       = {},\r\n        PropFormat      = {},\r\n\r\n                }={}){\r\n        this.ID = Lure.GetID();\r\n        this.Type = 'proto';\r\n        this.Owner = Owner ? Owner : this;\r\n        this.OnChange = OnChange.bind(this.Owner);\r\n\r\n\r\n        this.Settings = {};\r\n        this.Settings.isDataClone = DataClone;\r\n\r\n        this.isEditable = false;\r\n\r\n        this.Target = Lure.Select(Target, Owner ? Owner.Target : document);\r\n\r\n        \r\n\r\n        this._Data = null;\r\n        this._DataPrivate = null;//Lure.Clone(Data); //data state between change and confirm changes\r\n        \r\n        this._DataInit = (d)=>{\r\n            if (!d)\r\n                return;\r\n            this._Data = this.Settings.isDataClone ? Lure.Clone(d) : d;\r\n            this._DataPrivate = Lure.Clone(this._Data);  //data with unconfirmed changes\r\n            //DataChanged++;\r\n        };\r\n        this.Data = Data;                   //fact real data.\r\n\r\n        //this.PropTypes = GetPropTypes(Data);\r\n        this.PropTypes = PropTypes;\r\n        this.PropFormat = PropFormat;\r\n    \r\n    \r\n        /* Init */\r\n        this._SmartRender = Lure.CompileSmart(Content, this);\r\n        //this.Content = this._SmartRender.GenElement(Data);\r\n        this._Refresh = (newData)=>{\r\n            this.Data = newData;\r\n            Lure.PropTypes.Check(this.PropTypes, this._Data);\r\n           \r\n            BeforeBuild.call(this);\r\n            this.Context.Refresh(this.Data, {LineID: null, Controller: this});\r\n            Lure.Editable.EditableForceRefresh(this);\r\n            let P = this.Owner._PermissionRules;\r\n            if (P)\r\n                P.Check();\r\n            AfterBuild.call(this);\r\n        };\r\n        \r\n        if (this.isEditable){\r\n            Lure.Editable.ListenEditable(this.Owner, this);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Lure.Controller.Templator = class Templator{\r\n    Refresh(NewList){\r\n        return this._Refresh(NewList)\r\n    }\r\n    RefreshOne(Delegate){\r\n        return this._RefreshOne(Delegate);\r\n    }\r\n    get Data(){\r\n        return this._Data.Select(x=>x.Data)\r\n    }\r\n    set Data(NewList){\r\n        this._DataInit(NewList);\r\n    }\r\n    get DataItems(){\r\n        return this._Data;\r\n    }\r\n    Filter(Delegate, isSaveState){\r\n        return this._Filter(Delegate, isSaveState);\r\n    }\r\n    Sort(Delegate, isSaveState){\r\n        return this._Sort(Delegate, isSaveState);\r\n    }\r\n    get Items(){\r\n        return this.Content.children.Where(x=>x.classList.contains(\"l-t-line\"))\r\n    }\r\n    Add(Item, isPrepend){\r\n        return this._Add(Item, isPrepend);\r\n    }\r\n    Edit(Line, Prop, Val){\r\n        return this._Edit(Line, Prop, Val);\r\n    }\r\n    Remove(ItemOrLineID, isLocal){\r\n        return this._Remove(ItemOrLineID, isLocal);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param LineID\r\n     * @param Property\r\n     * @param Val\r\n     * @param isRefresh\r\n     */\r\n    SetProperty(LineID, Property, Val, isRefresh=true){\r\n        LineID = parseInt(LineID);\r\n        let DataItem = this._Data.Where(c=>c.LineID === LineID).FirstOrDefault();\r\n        if (!DataItem)\r\n        {\r\n            return Lure.System.Error(`Can not set property of unknown LineID (${LineID})`);\r\n        }\r\n        Lure.SetProperty(DataItem, Property, Val);\r\n        if (this.PropTypes[Property])\r\n            Lure.PropTypes.CheckProp(DataItem, this.PropTypes[Property], Property);\r\n        if (isRefresh)\r\n            this._Refresh(LineID);\r\n        /*\r\n        Lure.SetProperty(this._Data.Select(c=>c.Data), Property, Val);\r\n        let i = Property.match(/\\[([\\d]+)\\]/)[1];\r\n        let prop = Property.replace(/\\[[\\d]+\\]\\./,'');\r\n        if (this.PropTypes[prop])\r\n            Lure.PropTypes.CheckProp(this._Data, this.PropTypes[prop], Property);\r\n        if (isRefresh)\r\n            this._Refresh(i);*/\r\n    }\r\n    GetProperty(Property){\r\n        return Lure.GetProperty(this._Data.Select(c=>c.Data), Property);\r\n    }\r\n    GetItemByLineID(LineID){\r\n        return this._Data.Where(x=>x.LineID === LineID).Select(x=>x.Data).FirstOrDefault();\r\n    }\r\n    GetDataItemByLineID(LineID){\r\n        LineID = parseInt(LineID);\r\n        return this._Data.Where(x=>x.LineID === LineID).FirstOrDefault();\r\n    }\r\n    GetDataItemByDelegate(Delegate){\r\n        return this._Data.Where(x=>Delegate(x.Data)).FirstOrDefault();\r\n    }\r\n    GetPrivateDataItemByLineID(LineID){\r\n        if (this._DataPrivateDict[LineID] === void 0)\r\n            return null;\r\n        return this._DataPrivateDict[LineID]\r\n    }\r\n\r\n    get isController(){\r\n        return true;\r\n    }\r\n    get isLineBuilder(){\r\n        return true;\r\n    }\r\n    constructor(\r\n        {\r\n            Target       = null,                           //{HTMLElement}\r\n            Data         = [],                             //{object}, {array} - if object Templator would be refresh, if array - rebuild\r\n            DataClone    = false,                          //{bool},  - set true if need undepend on another Content's data\r\n            PropTypes    = {},\r\n            PropFormat   = {},\r\n            ListElement  = \".list_element\",                //{string} - dom string\r\n            ListElementEmpty = null,                       //{string} - render instead ListElement if Data.length === 0\r\n            EmptyMessage = \"\",                             //{string} - ListElement.innerHTML if Data.length === 0 and ListElementEmpty != null\r\n            EmptyVisible = true,                           //{bool} - Templator.Content would be hidden if (Data.length === 0)\r\n\r\n            Pagination = {},\r\n\r\n\r\n            LineSave   = (DataItem)=>{return Promise.resolve(DataItem)},   //calls before commit changes to Data\r\n            LineAdd    = (DataItem)=>{return Promise.resolve(DataItem)},   //calls before commit new item to Data\r\n            LineRemove = (DataItem)=>{return Promise.resolve(DataItem)},   //calls before commit deleting item from Data\r\n\r\n            NoBuild = false,\r\n\r\n            BeforeBuild = function(){},\r\n            AfterBuild = function(){},\r\n            AfterAdd = function(){},\r\n            OnChange = function(){},                       //{function} Calls on Edit, Add, Remove data\r\n            Owner = null,                                  //Lure.Content, which owns this Controller\r\n            Debug = true\r\n\r\n        } = {}) {\r\n        this.ID = Lure.GetID();\r\n        this.Type = 'controller';\r\n        this.isEditable  = false; //if true contains editable elements in line\r\n        this.isRemovable = false; //if true data line is able to be removed\r\n        this._NoBuild = NoBuild;\r\n\r\n\r\n        this.Owner   = Owner ? Owner : this;\r\n        this.Content = Owner ? Owner.Select(Target) : Lure.Select(Target);\r\n        this.Target  = this.Content;\r\n        if (!this.Target){\r\n            throw new Error(`[Lure.Controller] Error. Target is null (${Target}) in \"${Owner? Owner.Name:'null'}\"`);\r\n        }\r\n        this.Target.classList.add('l-t-content');\r\n\r\n        /* Get Settings */\r\n        this.Settings = Lure.Clone(Lure.Settings.Controller.Templator);\r\n\r\n        this.Settings.Pagination.PageSize         = typeof Pagination.PageSize         !== 'undefined' ? Pagination.PageSize         : this.Settings.Pagination.PageSize;\r\n        this.Settings.Pagination.PageGet          = typeof Pagination.PageGet          !== 'undefined' ? Pagination.PageGet          : this.Settings.Pagination.PageGet;\r\n        this.Settings.Pagination.DataCount        = typeof Pagination.DataCount        !== 'undefined' ? Pagination.DataCount        : this.Settings.Pagination.DataCount;\r\n        this.Settings.Pagination.isGetAllButton   = typeof Pagination.isGetAllButton   !== 'undefined' ? Pagination.isGetAllButton   : this.Settings.Pagination.isGetAllButton;\r\n        this.Settings.Pagination.isGetAllCount    = typeof Pagination.isGetAllCount    !== 'undefined' ? Pagination.isGetAllCount    : this.Settings.Pagination.isGetAllCount;\r\n        this.Settings.Pagination.isGetMoreButton  = typeof Pagination.isGetMoreButton  !== 'undefined' ? Pagination.isGetMoreButton  : this.Settings.Pagination.isGetMoreButton;\r\n        this.Settings.Pagination.isGetMoreCount   = typeof Pagination.isGetMoreCount   !== 'undefined' ? Pagination.isGetMoreCount   : this.Settings.Pagination.isGetMoreCount;\r\n        this.Settings.Pagination.isRefreshButton  = typeof Pagination.isRefreshButton  !== 'undefined' ? Pagination.isRefreshButton  : this.Settings.Pagination.isRefreshButton;\r\n\r\n        this.Settings.isDataClone     = DataClone;\r\n        this.Settings.isEmptyVisible  = EmptyVisible ? EmptyVisible : this.Settings.isEmptyVisible;\r\n\r\n\r\n        this.ListElement  = ListElement;\r\n        this.EmptyMessage = EmptyMessage;\r\n       \r\n        \r\n\r\n        /* Server api callers */\r\n        this.LineSave   = LineSave.bind(this.Owner);\r\n        this.LineAdd    = LineAdd.bind(this.Owner);\r\n        this.LineRemove = LineRemove.bind(this.Owner);\r\n        this.OnChange   = OnChange.bind(this.Owner);\r\n        this.AfterAdd   = AfterAdd.bind(this.Owner);\r\n\r\n        this.PropTypes  = PropTypes;\r\n        this.PropFormat = PropFormat;\r\n\r\n        this._Data = null;\r\n\r\n        //this._private = {};\r\n        this.BeforeBuild = BeforeBuild.bind(this.Owner);\r\n        this.AfterBuild  = AfterBuild.bind(this.Owner);\r\n\r\n        this._DataPrivate = null; //Lure.Clone(this.Data);  //data with unconfirmed changes\r\n        this._DataRender  = null; //this.Data.slice(0);     //data filtered/sorted/etc.\r\n\r\n        this._DataItems = null;\r\n\r\n        this._GetCurrentData = ()=>{return this._DataRender};\r\n        \r\n        this._DataInit = (NewList)=>{\r\n            if (!NewList)\r\n                return;\r\n            this._DataSet = this.Settings.isDataClone ? Lure.Clone(NewList) : NewList;\r\n            //this._DataDict = this._Data.ToDictionary((x,i)=>i, x=>x);\r\n            this._Data = this._DataSet.Select((x,i)=>{return {LineID:i, Data:x}});\r\n            this._DataDict = this._Data.ToDictionary((x)=>x.LineID, x=>x);\r\n            this._DataPrivate = Lure.Clone(this._Data);             //data with unconfirmed changes\r\n            this._DataPrivateDict = this._DataPrivate.ToDictionary((x)=>x.LineID, x=>x);\r\n            this._DataRender  = this._Data.slice(0);\r\n        };\r\n        this._DataAppend = (List)=>{\r\n            let LastLineID = this._Data.Last().LineID + 1;\r\n            for (let i = 0; i < List.length; i++){\r\n                let index = this._DataSet.push(this.Settings.isDataClone ? Lure.Clone(List[i]) : List[i]) - 1;\r\n                let LineID = LastLineID + i;\r\n                let DataItem = {\r\n                    LineID: LineID,\r\n                    Data: this._DataSet[index]\r\n                };\r\n                this._Data.push(DataItem);\r\n                this._DataDict[LineID] = DataItem;\r\n                this._DataRender.push(DataItem);\r\n\r\n                this._DataPrivate.push(Lure.Clone({\r\n                    LineID: LineID,\r\n                    Data: Lure.Clone(this._DataSet[index])\r\n                }));\r\n                this._DataPrivateDict[LineID] = this._DataPrivate[index];\r\n            }\r\n        };\r\n        this._DataPrepend = (List)=>{\r\n            let LastLineID = this._Data[0].LineID - 1;\r\n            for (let i = List.length-1; i >= 0; i--){\r\n                this._DataSet.unshift(this.Settings.isDataClone ? Lure.Clone(List[i]) : List[i]);\r\n                let LineID = LastLineID - i;\r\n                let DataItem = {\r\n                    LineID: LineID,\r\n                    Data: this._DataSet[0]\r\n                };\r\n                this._Data.unshift(DataItem);\r\n                this._DataDict[LineID] = DataItem;\r\n                this._DataRender.unshift(DataItem);\r\n\r\n                this._DataPrivate.unshift(Lure.Clone({\r\n                    LineID: LineID,\r\n                    Data: Lure.Clone(this._DataSet[0])\r\n                }));\r\n                this._DataPrivateDict[LineID] = this._DataPrivate[0];\r\n\r\n                \r\n            }            \r\n        };\r\n\r\n\r\n\r\n        this.Data = Data;\r\n\r\n        let PageCursor = 0;                       //last rendered line\r\n        let PageCursorReverse = 0;                //for build with it prepend\r\n\r\n        this.isPageReverseOnce = false;\r\n\r\n        let DataCount  = 0;                       //data portion length\r\n        //let DataLength = Infinity;\r\n        let isLastPage = false;\r\n\r\n        let FilterDelegate  = null;\r\n        let SorterDelegate  = null;\r\n        let SorterInvert = 1;           //-1 for order desc\r\n\r\n\r\n        this._NextPage = ()=>{\r\n            //console.log('_NextPage', PageCursor, this.Settings.Pagination.PageSize, 'len:',this._DataRender.length)\r\n            if (PageCursor >= this._DataRender.length){\r\n                this.Settings.Pagination.PageGet.call(this.Owner, PageCursor, this.Settings.Pagination.PageSize)\r\n                    .then(x=>{\r\n                        if (x.length < this.Settings.Pagination.PageSize || this._Data.length+this.Settings.Pagination.PageSize === this.Settings.Pagination.DataCount)\r\n                            isLastPage = true;\r\n                        //console.log(`cid: ${this.ID} BuildWithIt`);\r\n                        this.Append(x);\r\n                    });\r\n            }\r\n            else{\r\n                if (!this.Settings.Pagination.PageGet && (PageCursor+this.Settings.Pagination.PageSize) >= this._DataRender.length){\r\n                    isLastPage = true;\r\n                }\r\n                Build();\r\n            }\r\n\r\n        };\r\n        this._NextAll  = ()=>{\r\n            isLastPage = true;\r\n            //console.log('sdf',PageCursor, this._DataRender.length);\r\n            if (PageCursor >= this._DataRender.length)\r\n                this.Settings.Pagination.PageGet.call(this.Owner, PageCursor, this.Settings.Pagination.DataCount-PageCursor)\r\n                    .then(x=>{\r\n                        this.Append(x);\r\n                    });\r\n            else{\r\n                Build();\r\n            }\r\n\r\n        };\r\n        this._SetEditProperty = (Property, Val)=>{\r\n            Lure.SetProperty(this._DataPrivate, Property, Val);\r\n            let prop = Property.replace(/\\[[\\d]+\\]\\./,'');\r\n            if (this.PropTypes[prop])\r\n                Lure.PropTypes.CheckProp(this._DataPrivate, this.PropTypes[prop], Property);\r\n        };\r\n        this._GetEditProperty = (Property)=>{\r\n            return Lure.GetProperty(this._DataPrivate, Property);\r\n        };\r\n        this._Filter = (Delegate=FilterDelegate)=>{\r\n            FilterDelegate = Delegate;\r\n            //console.log('_Filter', Delegate, isSaveStates);\r\n            if (typeof Delegate !== 'function'){\r\n                this._DataRender = this._Data.slice(0);\r\n                this.Refresh();\r\n                return;\r\n            }\r\n            this._DataRender = this._Data.Where(c=>Delegate(c.Data));\r\n            this.Refresh();\r\n            if (SorterDelegate)\r\n            {\r\n                SorterInvert = SorterInvert*(-1);\r\n                this._Sort();\r\n            }\r\n\r\n        };\r\n        this._Sort = (Delegate=SorterDelegate)=>{\r\n            SorterInvert = (SorterDelegate === Delegate && SorterInvert>0) ? -1:1;\r\n            SorterDelegate = Delegate;\r\n            if (typeof Delegate !== 'function'){\r\n                if (!FilterDelegate){\r\n                    this._DataRender = this._Data.slice(0);\r\n                    this.Refresh();\r\n                }\r\n                return Promise.resolve(0);\r\n            }\r\n            //debugger;\r\n            this._DataRender.sort((a,b)=>{\r\n                return Delegate(a.Data,b.Data)*SorterInvert;\r\n            });\r\n           /* this._DataPrivate.sort((a,b)=>{\r\n                return Delegate(a.Data,b.Data)*SorterInvert;\r\n            });*/\r\n            PageCursor = 0;\r\n            Build();\r\n            return Promise.resolve(SorterInvert);\r\n        };\r\n\r\n        this._Add = (Item, isPrepend=false)=>{\r\n            Item = this.Settings.DataClone? Lure.Clone(Item) : Item;\r\n            let Empty = Lure.Select('.l-t-empty', this.Content);\r\n            if (Empty !== null){\r\n                Empty.remove();\r\n            }\r\n            let i = isPrepend ? 0 : this._Data.length;\r\n            let LineID = 0;\r\n            if (this._Data.length > 0 && isPrepend){\r\n                LineID = Math.min.apply(null, this._Data.Select(x=>x.LineID)) - 1;\r\n            }\r\n            else if (this._Data.length > 0 && !isPrepend){\r\n                LineID = Math.max.apply(null, this._Data.Select(x=>x.LineID)) + 1;\r\n            }\r\n            let DataItem = {\r\n                LineID:  LineID,\r\n                Data:  Item,\r\n            };\r\n            DataItem.DOM = this._SmartRender.GenElement(Item, {i:i, length: this._Data.length+1, LineID: DataItem.LineID, Controller: this});\r\n            DataItem.DOM.classList.add(Lure.Settings.Editable.ClassWaiting);\r\n            let P = this.Owner._PermissionRules;\r\n            if (P)\r\n                P.CheckLine(DataItem.DOM, DataItem.DOM.Data);\r\n            if (isPrepend && this._DataRender.length>0){\r\n                this.Content.insertBefore(DataItem.DOM, this._DataRender[0].DOM); //this.Content.prepend(Element);\r\n            }\r\n            else{\r\n                this.Content.appendChild(DataItem.DOM);\r\n            }\r\n            return Lure.Call(this.LineAdd(DataItem), {\r\n                Then: ()=>{\r\n                    PageCursor++;\r\n                    DataItem.DOM.classList.remove(Lure.Settings.Editable.ClassWaiting);\r\n                    isPrepend ? this._Data.unshift(DataItem): this._Data.push(DataItem);\r\n                    isPrepend ? this._DataRender.unshift(DataItem): this._DataRender.push(DataItem);\r\n                    isPrepend ? this._DataPrivate.unshift(Lure.Clone(DataItem)): this._DataPrivate.push(Lure.Clone(DataItem));\r\n                    this._DataDict[DataItem.LineID] = DataItem;\r\n                    this._DataPrivateDict[DataItem.LineID] = isPrepend ? this._DataPrivate.First(): this._DataPrivate.Last();\r\n                    if (FilterDelegate)\r\n                        this.Filter();\r\n                    if (SorterDelegate && !FilterDelegate)\r\n                        this._Sort();\r\n                    this.OnChange('add', DataItem);\r\n                },\r\n                Catch: e=>{\r\n                    DataItem.DOM.remove();\r\n                    console.error('[Lure.Templator] Add error item: ', Item, '\\n', e);\r\n                }\r\n            });\r\n            /*let p = this.LineAdd(Item);\r\n            return p.then(()=>{\r\n                DataItem.DOM.classList.remove(Lure.Settings.Editable.ClassWaiting);\r\n\r\n                isPrepend ? this._Data.unshift(DataItem): this._Data.push(DataItem);\r\n                isPrepend ? this._DataRender.unshift(DataItem): this._DataRender.push(DataItem);\r\n                isPrepend ? this._DataPrivate.unshift(Lure.Clone(DataItem)): this._DataPrivate.push(Lure.Clone(DataItem));\r\n                this._DataDict[DataItem.LineID] = DataItem;\r\n                this._DataPrivateDict[DataItem.LineID] = isPrepend ? this._DataPrivate.First(): this._DataPrivate.Last();\r\n                if (FilterDelegate)\r\n                    this.Filter();\r\n                if (SorterDelegate && !FilterDelegate)\r\n                    this._Sort();\r\n                this.OnChange('add', Item);\r\n                return p;\r\n            })\r\n                .catch(x=>{\r\n                    Element.remove();\r\n                    console.error('[Lure.Templator] Add error item: ', Item, '\\n', x);\r\n                    return p;\r\n                });*/\r\n        };\r\n        this._Remove = (Thing, isLocal=false)=>{\r\n            let RemoverType = Lure.GetType(Thing);\r\n            let LineID;\r\n            let DataItem;\r\n            if (Lure.isNumeric(Thing)){\r\n                LineID = parseInt(Thing);\r\n                DataItem = this._Data.Where(c=>c.LineID === LineID).FirstOrDefault();\r\n            }\r\n            else if (RemoverType === 'object') {\r\n                DataItem = this._Data.Where(c => c.Data === Thing).FirstOrDefault();\r\n                if (DataItem === null){\r\n                    return Promise.reject();\r\n                }\r\n                LineID = DataItem.LineID;\r\n                if (LineID === null) {\r\n                    return Promise.reject();\r\n                }\r\n            }\r\n            else if (RemoverType === 'function'){\r\n                DataItem = this._Data.Where(c=>Thing(c.Data)).FirstOrDefault();\r\n                if (DataItem === null){\r\n                    return Promise.reject();\r\n                }\r\n                LineID = DataItem.LineID;\r\n            }\r\n            else{\r\n                return Promise.reject();\r\n            }\r\n            if (DataItem === null)\r\n                return Promise.reject();\r\n            //TODO rendered indexes not changings\r\n\r\n            const DomLine = DataItem.DOM;\r\n            DomLine.classList.add(Lure.Settings.Editable.CSSWaiting);\r\n            if (isLocal){\r\n                DomLine.remove();\r\n                let i  = this._Data.indexOf(DataItem);\r\n                let i2 = this._DataRender.indexOf(DataItem);\r\n                this._Data.splice(i, 1);\r\n                this._DataPrivate.splice(i, 1);\r\n                this._DataRender.splice(i2, 1);\r\n                if (this._Data.length === 0)\r\n                    this.Refresh();\r\n                this.OnChange('remove', LineID);\r\n                return Promise.resolve('local');\r\n            }\r\n            return api.call(this.LineRemove(DataItem, DomLine), {\r\n                Then: ()=>{\r\n                    DomLine.remove();\r\n                    let i  = this._Data.indexOf(DataItem);\r\n                    let i2 = this._DataRender.indexOf(DataItem);\r\n                    this._Data.splice(i, 1);\r\n                    this._DataPrivate.splice(i, 1);\r\n                    this._DataRender.splice(i2, 1);\r\n                    if (this._Data.length === 0)\r\n                        this.Refresh();\r\n                    this.OnChange('remove', LineID);\r\n                },\r\n                Catch: x=>{\r\n                    DomLine.classList.remove(Lure.Settings.Editable.CSSWaiting);\r\n                    if (x && x instanceof Error)\r\n                        console.error(`[Lure.Templator] Remove Error. LineID: ${LineID}`, x);\r\n                    if (x)\r\n                        console.log(`[Lure.Templator] Removing Canceled. LineID: ${LineID}`, x);\r\n                }\r\n            })\r\n        };\r\n        this._Edit = (LineID, Prop, Val)=>{\r\n            let EditableElement = this._DataDict[LineID].DOM;\r\n            EditableElement.classList.add(Lure.Settings.Editable.ClassWaiting);\r\n            return Lure.Call(this.LineSave(this._DataDict[LineID], Prop, Val, LineID), {\r\n                Then: ()=>{\r\n                    Lure.SetProperty(this._DataDict[LineID].Data, Prop, Val);\r\n                    this.OnChange('save', this._DataDict[LineID], Prop);\r\n                },\r\n                Catch: (e)=>{\r\n                    console.error(`[Lure.Templator] Save Error. LineID: \"${LineID}\", Property: \"${Prop}\", Value: \"${Val}\"`+ e, '\\n',this);\r\n                },\r\n                Finally: ()=>{\r\n                    EditableElement.classList.remove(Lure.Settings.Editable.CSSWaiting);\r\n                }\r\n            });\r\n        };\r\n\r\n        \r\n        const Builder = ()=>{   \r\n            /* Clean Refresh */\r\n            if (PageCursor === 0){\r\n                let lines = Lure.SelectAll('.l-t-line, .l-t-empty', this.Content);\r\n                for (let i = 0; i < lines.length; i++)\r\n                    lines[i].remove();\r\n            }\r\n            /* Clean Pagination */\r\n            if (this.Settings.Pagination.PageSize > 0){\r\n                let Pager = Lure.Select('.l-t-pagination', this.Content.parentElement);\r\n                if (Pager)\r\n                    Pager.remove();\r\n            }\r\n            /* Pagination check */\r\n            let NextCount;\r\n            let PageLimit = this._DataRender.length;\r\n            DataCount = this.Settings.Pagination.DataCount > 0 ? this.Settings.Pagination.DataCount : this._DataRender.length;\r\n            if (this.Settings.Pagination.PageSize > 0)\r\n            {\r\n                if (!this.Settings.Pagination.PageGet && PageCursor === DataCount-this.Settings.Pagination.PageSize){\r\n                    isLastPage = true;\r\n                }\r\n                let DOMPaginator = Lure.Select('.l-t-paginator', this.Content);\r\n                if (DOMPaginator !== null)\r\n                    DOMPaginator.remove();\r\n                PageLimit = isLastPage ? DataCount: (PageCursor + this.Settings.Pagination.PageSize);\r\n                if (PageLimit > DataCount)\r\n                    PageLimit = DataCount;\r\n                //if (this._Data.Where(x=>x.Data.Name.indexOf('Tony')> -1))\r\n                //    debugger;\r\n                NextCount = (this.Settings.Pagination.PageGet ? this.Settings.Pagination.DataCount : this._DataRender.length) - PageLimit;\r\n                if (NextCount > this.Settings.Pagination.PageSize || NextCount < 0)\r\n                    NextCount = this.Settings.Pagination.PageSize;\r\n                //console.log(`(1)NextCount:${NextCount},DataCount:${DataCount},PageCursor:${PageCursor},PageLimit:${PageLimit}`);\r\n            }\r\n            /* Data Empty Case */\r\n            if (this._DataRender.length === 0 && this.Settings.isEmptyVisible && this.EmptyMessage !== \"\")\r\n            {\r\n                if (this.Settings.isEmptyVisible && this.EmptyMessage !== \"\"){\r\n                    let tag = this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\r\n                    let Empty = Lure.CreateElementFromString(`<${tag} class=\"l-t-empty\">${this.EmptyMessage}</${tag}>`, this.Content.tagName);\r\n\r\n                    return this.Content.appendChild(Empty);\r\n                }\r\n                if (!this.Settings.isEmptyVisible && this.Owner){\r\n                    this.Owner.Hide();\r\n                }\r\n            }\r\n\r\n            /* Render */\r\n            if (this.isPageReverseOnce && PageCursorReverse > 0){\r\n                for (let i = PageCursorReverse; i >= 0; i--){\r\n                    this._DataRender[i].DOM = this._SmartRender.GenElement(this._DataRender[i].Data, {\r\n                        i:i,\r\n                        length: PageLimit,\r\n                        LineID: this._DataRender[i].LineID,\r\n                        Controller: this,\r\n                    });\r\n                    this._DataRender[i].DOM.setAttribute('data-line', this._DataRender[i].LineID);\r\n                    //this.Content.prepend(this._DataRender[i].DOM);\r\n                    let P = this.Owner._PermissionRules;\r\n                    if (P)\r\n                        P.CheckLine(this._DataRender[i].DOM, this._DataRender[i].Data);\r\n                    this.Content.prepend(this._DataRender[i].DOM);\r\n                    //this.Content.insertBefore(this._DataRender[i].DOM, this._DataRender[PageCursorReverse+1].DOM)\r\n                }\r\n            }\r\n            else{\r\n                for (let i = PageCursor; i < PageLimit; i++){\r\n                    this._DataRender[i].DOM = this._SmartRender.GenElement(this._DataRender[i].Data, {i:i, length: PageLimit, LineID: this._DataRender[i].LineID, Controller: this,});\r\n                    this._DataRender[i].DOM.setAttribute('data-line', this._DataRender[i].LineID);\r\n                    let P = this.Owner._PermissionRules;\r\n                    if (P)\r\n                        P.CheckLine(this._DataRender[i].DOM, this._DataRender[i].Data);\r\n                    this.Content.appendChild(this._DataRender[i].DOM);\r\n                }\r\n            }\r\n            PageCursor = PageLimit;\r\n            if (this.Settings.Pagination.PageSize > 0){\r\n                let isTable = this.Content.tagName.toLowerCase() === 'tbody' || this.Content.tagName.toLowerCase() === 'table' || this.Content.tagName.toLowerCase() === 'thead';\r\n\r\n                let TagName = 'div';\r\n                let ColSpan = '';\r\n                if (isTable){\r\n                    TagName = 'tr';\r\n                    ColSpan = ` colspan=\"${Lure.SelectAll('tr:last-child td', this.Content).length + 1}\"`;\r\n                }\r\n                let Pager = Lure.CreateElementFromString(`<${TagName}${ColSpan} class=\"l-t-pagination\"></${TagName}>`);\r\n                if (this.Data.length < this.Settings.Pagination.PageSize || isLastPage){\r\n                    if (this.Settings.Pagination.isRefreshButton){\r\n                        Pager.innerHTML = `<button class=\"button l-button l-t-refresh\">${Lure.Culture.Lang.Refresh}</button>`;\r\n                    }\r\n                }\r\n                else{\r\n\r\n                    if (this.Settings.Pagination.isGetMoreButton)\r\n                    {\r\n                        let PagMore  = Lure.CreateElementFromString(`<button class=\"button l-button l-t-pagination-getmore\"><span class=\"value\">${Lure.Culture.Lang.GetMore}${this.Settings.Pagination.isGetMoreCount ? ` (${NextCount})`: ''}</span><span class=\"button-loading\"></span></button>`);\r\n                        PagMore.onclick = (e)=>{\r\n                            e.currentTarget.disabled = true;\r\n                            this._NextPage();\r\n                        };\r\n                        Pager.appendChild(PagMore);\r\n                    }\r\n                    //let PagDelim = Lure.CreateElementFromString(`<span class=\"l-t-pagination-delimiter\">/</span>`);\r\n                    let PagAll   = Lure.CreateElementFromString(`<button class=\"button l-button l-t-pagination-getall\"><span class=\"value\">${Lure.Culture.Lang.GetAll}${this.Settings.Pagination.isGetAllCount ? ` (${DataCount - PageCursor})`: ''}</span><span class=\"button-loading\"></span></button>`);\r\n\r\n\r\n                    let isRemoteDataKnownSize = (this.Settings.Pagination.isGetAllButton && (this.Settings.Pagination.DataCount>0 && this.Settings.Pagination.PageGet) );\r\n                    let isLocalData = (this.Settings.Pagination.isGetAllButton && !this.Settings.Pagination.PageGet);\r\n                    if (isLocalData || isRemoteDataKnownSize){\r\n                        PagAll.onclick = (e)=>{\r\n                            e.currentTarget.disabled = true;\r\n                            this._NextAll();\r\n                        };\r\n                        Pager.appendChild(PagAll);\r\n                    }\r\n                }\r\n\r\n                Lure.AddEventListenerGlobal('click', '.l-t-refresh', function () {\r\n                    this.Owner.Refresh();\r\n                }, Pager, this);\r\n\r\n                this.Content.parentElement.appendChild(Pager);\r\n                this.isPageReverseOnce = false;\r\n            }\r\n        };\r\n        let Build;\r\n        if (this.BeforeBuild.constructor.name === 'AsyncFunction'){\r\n            Build = async (type=\"refresh\")=>{\r\n                await this.BeforeBuild(type);\r\n                Builder();\r\n                Lure.Editable.EditableForceRefresh(this);\r\n                if (this._DataRender.length>0)\r\n                    this.AfterBuild(type);\r\n            };\r\n        }\r\n        else{\r\n            Build = (type=\"refresh\")=>{\r\n                this.BeforeBuild(type);\r\n                Builder();\r\n                Lure.Editable.EditableForceRefresh(this);\r\n                if (this._DataRender.length>0)\r\n                    this.AfterBuild(type);\r\n            };\r\n        }\r\n\r\n\r\n        this.Append = (data, isPrepend)=>{\r\n            //if (this.ID === 156) debugger;\r\n            if (data.length === 0){\r\n                // DataCount = this._DataRender.length;\r\n            }\r\n            if (this._Data.length < 1){\r\n                this.Data = data;\r\n                return Build('refresh2');\r\n            }\r\n            if (this.isPageReverseOnce){\r\n                this._DataPrepend(data);\r\n                PageCursorReverse = data.length-1;\r\n                return Build('prepend');\r\n            }\r\n            this._DataAppend(data);\r\n            Build('append');\r\n        };\r\n        this.BuildWithIt = (data, isPrepend)=>{\r\n            this.Append(data, isPrepend)\r\n        };\r\n        this.Redraw = ()=>{\r\n            PageCursor = 0;\r\n            Build();\r\n        };\r\n        this.NextPage = ()=>{\r\n            this._NextPage();\r\n        };\r\n        const RefreshSmart = (DataItem) =>{\r\n            if (!DataItem.Context){\r\n                DataItem.Context = this._SmartRender.GetContext(this.Owner, DataItem.DOM);\r\n            }\r\n            else{\r\n                DataItem.Context._TargetElement = DataItem.DOM;\r\n            }\r\n            //console.log(DataItem.Context._TargetElement);\r\n            DataItem.Context.Refresh(DataItem.Data, {\r\n                i: this._DataRender.indexOf(DataItem),\r\n                length: this._DataRender.length,\r\n                LineID: DataItem.LineID,\r\n                Controller: this,\r\n            });\r\n        };\r\n\r\n        const RefreshByList = (data) =>{\r\n            PageCursor = 0;\r\n            isLastPage = false;\r\n\r\n            if (this.Owner && this.Owner.isContent && this.Owner.Sort && SorterDelegate === null)\r\n            {\r\n                //TODO Make fixed sorting settings property\r\n                this.Owner.Sort._Reset();\r\n            }\r\n            /*if (!Lure.CheckDirty(data, this._DataPrivate.Select(x=>x.Data), false) ){\r\n                this.Data = data;\r\n            }*/\r\n            if (this.Settings.Pagination.PageGet /*&& Lure.isVisible(this.Owner.Content)*/){\r\n                this.Data = [];\r\n                this._NextPage()\r\n            }\r\n            else{\r\n                this.Data = data;\r\n                Build();\r\n                if (SorterDelegate)\r\n                {\r\n                    SorterInvert = SorterInvert*(-1);\r\n                    this._Sort();\r\n                }\r\n            }\r\n        };\r\n        const RefreshByObject = (obj)=>{\r\n            let i = this._DataRender.Select(x=>x.Data).indexOf(obj);\r\n            RefreshSmart(this._DataRender[i]);\r\n            let P = this.Owner._PermissionRules;\r\n            if (P)\r\n                P.CheckLine(this._DataRender[i].DOM, this._DataRender[i].DOM.Data);\r\n        };\r\n        const RefreshByNode = (node)=>{\r\n            let i = this._DataRender.Select(x=>x.DOM).indexOf(node);\r\n            RefreshSmart(this._DataRender[i]);\r\n            /* refresh permissions */\r\n        };\r\n        const RefreshByLineID = (LineID)=>{\r\n            //let LineID = this._Data[i].LineID;\r\n            LineID = parseInt(LineID);\r\n            let DataRendered = this._DataRender.Where(x=>x.LineID === LineID).FirstOrDefault();\r\n            if (DataRendered){\r\n                RefreshSmart(DataRendered);\r\n            }\r\n            let P = this.Owner._PermissionRules;\r\n            if (P)\r\n                P.CheckLine(DataRendered.DOM, DataRendered.Data);\r\n                        \r\n        };\r\n\r\n        const RefreshByDelegate = (Delegate)=>{\r\n            let LineIDs = this._Data.Where(x=>Delegate(x.Data)).Select(x=>x.LineID);\r\n            for (let i = 0; i < LineIDs.length; i++){\r\n                this.Refresh(LineIDs[i]);\r\n            }\r\n        };\r\n        this._Refresh = (data=null)=>{\r\n            let RefreshType = Lure.GetType(data); \r\n            switch (RefreshType){\r\n                case null:\r\n                case 'array':\r\n                    RefreshByList(data);\r\n                    break;\r\n                case 'object':\r\n                    RefreshByObject(data);\r\n                    break;\r\n                case 'node':\r\n                    RefreshByNode(data);\r\n                    break;\r\n                case 'number':\r\n                    RefreshByLineID(data);\r\n                    break;\r\n                case 'function':\r\n                    RefreshByDelegate(data);\r\n                    break;\r\n            }\r\n            return Promise.resolve();\r\n        };\r\n        /*this._RefreshOne = function (delegate) {\r\n            let i;\r\n            if (Lure.isNumeric(delegate)){\r\n                i = delegate;\r\n            }\r\n            else{\r\n                i = this._DataRender.indexOf(delegate);\r\n            }\r\n            if (FilterDelegate){\r\n                i = this._DataRender.indexOf(this._Data[i]);\r\n            }\r\n            let newItem = Lure.CreateElementFromString(this._LineBuilder(this._DataRender[i], i, this._DataRender.length), this.Content.tagName);\r\n            let itemOld = this.Items[i];\r\n            newItem.classList = itemOld.classList;\r\n            this.Items[i].parentNode.replaceChild(newItem, itemOld);\r\n\r\n        };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /* Construct */\r\n\r\n        let isListElementIsCss = (/^[a-zA-Z0-9.,\\-_ *#]+$/).test(this.ListElement);\r\n        if (isListElementIsCss){\r\n            let element = Lure.Select(ListElement, this.Content);\r\n            element.classList.add('l-t-line');\r\n            this.ListElement = element.outerHTML;\r\n            element.remove();\r\n        }\r\n        else{\r\n            let list_element = this.ListElement.match(/<[^>]+>/)[0];\r\n            let list_elementClassed;\r\n            let pos = list_element.indexOf('class=\"');\r\n            if (pos < 0)\r\n            {\r\n                list_elementClassed = list_element.substr(0,list_element.length - 1) + ' class=\"l-t-line\"' + list_element.substr(list_element.length-1);\r\n            }\r\n            else\r\n            {\r\n                pos = list_element.indexOf('\"', pos+8);\r\n                list_elementClassed = list_element.substr(0,pos) + \" l-t-line\" + list_element.substr(pos);\r\n            }\r\n            this.ListElement = this.ListElement.replace(list_element, list_elementClassed);\r\n        }\r\n\r\n        this.ListElement = this.ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n            return a\r\n                .replace(/data-line=('|\")[^('|\")]*('|\")/, ' ')\r\n                .replace(b, ' data-line=\"{{i}}\">'); //TODO check for errors    //FIXMED collision is possible\r\n        });\r\n        this._SmartRender = Lure.CompileSmart(this.ListElement, this)\r\n\r\n\r\n        if (this.isEditable || this.isRemovable)//(Lure._CompileSmart.RegExp.EditRemove.test(this.ListElement))\r\n        {\r\n            Lure.Editable.ListenEditable(this.Owner, this);\r\n        }\r\n\r\n\r\n        /*if (this.Owner){\r\n\r\n        }\r\n        else{\r\n            Lure.AddEventListenerGlobal('click', '.l-t-refresh', function () {\r\n                this._Refresh();\r\n            }, this.Content, this)\r\n        }*/\r\n\r\n\r\n    }\r\n};","/* Pop memssages */\r\nLure.CustomLog = class CustomLog{\r\n    constructor({\r\n                    Target = document.body,\r\n                    Duration = 500,\r\n                    Timeout  = 5000,\r\n                    Style    = {},\r\n                    Show     = null,\r\n                    Hide     = null,\r\n                    isNewInstance = false\r\n                }={}){\r\n        Lure.CustomLog.Count = Lure.CustomLog.Count? Lure.CustomLog.Count++: 1;\r\n\r\n        this.Options = {\r\n            Style: {\r\n                padding:           Style.padding         ? Style.padding         : '10px 20px',\r\n                marginTop:         Style.marginTop       ? Style.marginTop       : \"5px\",\r\n                borderRadius:      Style.borderRadius    ? Style.borderRadius    : \"0px\",\r\n                backgroundColor:   Style.backgroundColor ? Style.backgroundColor : '#d00',\r\n                color:             Style.color           ? Style.color           : \"#fff\",\r\n            },\r\n        };\r\n        let Block;\r\n        if (!isNewInstance){\r\n            Block = Lure.Select('#lure-customlog-1');\r\n        }\r\n        if (isNewInstance || Block === null){\r\n            Block = document.createElement('div');\r\n            Block.id = `lure-customlog-${Lure.CustomLog.Count}`;\r\n            Block.style.position = \"fixed\";\r\n            Block.style.right    = \"5px\";\r\n            Block.style.bottom   = \"5px\";\r\n            Block.style.zIndex   = \"100\";\r\n        }\r\n\r\n\r\n        /*function Show(div) {\r\n            div.style.opacity = '1';\r\n        }\r\n        function Hide(div) {\r\n            div.style.opacity = '0';\r\n        }*/\r\n        Target.appendChild(Block);\r\n\r\n        /* API */\r\n        this.AddLine = function(text) {\r\n            const div = document.createElement('div');\r\n            div.innerHTML = text;\r\n            for (let style in this.Options.Style){\r\n                div.style[style] = this.Options.Style[style];\r\n            }\r\n            div.style.position = 'relative';\r\n            div.style.opacity = '0';\r\n            div.style.transition = `${Duration}ms ease-in`;\r\n            const LifeLine = document.createElement('div');\r\n            LifeLine.style.height = '5px';\r\n            LifeLine.style.width = '100%';\r\n            LifeLine.style.backgroundColor = 'rgba(0,0,0,0.4)';\r\n            LifeLine.style.position = 'absolute';\r\n            LifeLine.style.bottom = '0';\r\n            LifeLine.style.left = '0';\r\n            LifeLine.style.transition = `${Timeout-50}ms linear`;\r\n            div.appendChild(LifeLine);\r\n            ///\r\n            Block.appendChild(div);\r\n            div.style.opacity = '1';\r\n            setTimeout(function () {\r\n                LifeLine.style.width = '0';\r\n\r\n            }, 50);\r\n            div.LureTimeout = setTimeout(function () {\r\n                div.style.opacity = '0';\r\n                setTimeout(function(){\r\n                    div.remove();\r\n                }, Duration)\r\n            }, Timeout)\r\n        }\r\n    }\r\n};\r\n/* ajax loading holder */\r\nLure.Settings.Load = {\r\n    Svg: null,\r\n};\r\nLure.Load = class LureLoading{\r\n    static _DoArc(radius, maxAngle, cx, cy){\r\n        let d = \" M \"+ (cx + radius) + \" \" + cy;\r\n        for (let angle = 0; angle < maxAngle; angle++)\r\n        {\r\n            let rad = angle * (Math.PI / 180);  //deg to rad\r\n            let x = cx + Math.cos(rad) * radius;\r\n            let y = cy + Math.sin(rad) * radius;\r\n            d += \" L \"+x + \" \" + y;\r\n        }\r\n        return d;\r\n    };\r\n    constructor(\r\n        {\r\n            Target = 'body',\r\n            SaveOriginalStylePosition = false,\r\n            BackgroundColor = null,\r\n            CustomSvg = null\r\n        } = {}\r\n    ){\r\n        this._isActive = false;\r\n        this.Target = Lure.Select(Target);\r\n        const pos = getComputedStyle(this.Target).position.toLowerCase();\r\n        if (pos !== 'absolute' && pos !== 'relative')\r\n            this.Target.style.position = 'relative';\r\n        this.Content = Lure.CreateElementFromString(`<div class=\"lure-loading\" style=\"display: none\"></div>`);\r\n        if (BackgroundColor !== null){\r\n            this.Content.style.backgroundColor = BackgroundColor;\r\n        }\r\n        let cx = 60; //diameter\r\n        let cy = 60;\r\n        // let _DoArc = function(radius, maxAngle){\r\n        //     let d = \" M \"+ (cx + radius) + \" \" + cy;\r\n        //     for (let angle = 0; angle < maxAngle; angle++)\r\n        //     {\r\n        //         let rad = angle * (Math.PI / 180);  //deg to rad\r\n        //         let x = cx + Math.cos(rad) * radius;\r\n        //         let y = cy + Math.sin(rad) * radius;\r\n        //         d += \" L \"+x + \" \" + y;\r\n        //     }\r\n        //     return d;\r\n        // };\r\n        if (Lure.Settings.Load.Svg){\r\n            this.Content.innerHTML = Lure.Settings.Load.Svg;\r\n        }else{\r\n            this.Content.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n                     <path d=\"${Lure.Load._DoArc(45, 160, cx, cy)}\" class=\"lure-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\r\n                     <path d=\"${Lure.Load._DoArc(40, 130, cx, cy)}\" class=\"lure-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\r\n                     <path d=\"${Lure.Load._DoArc(35, 100, cx, cy)}\" class=\"lure-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\r\n                     <path d=\"${Lure.Load._DoArc(30, 70, cx, cy)}\"  class=\"lure-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\r\n                   </svg>`;\r\n        }\r\n\r\n        this.Target.appendChild(this.Content);\r\n\r\n        this.Timeout = null;\r\n        //this.Target.style.position = pos;\r\n    }\r\n    Show(){\r\n        let $this = this;\r\n        this.Content.style.display = '';\r\n        clearTimeout(this.TimeoutHide);\r\n        this._isActive = true;\r\n        this.Timeout = setTimeout(function(){\r\n            $this.Content.style.display = 'block';\r\n        }, 70);\r\n    }\r\n    Hide(){\r\n        let $this = this;\r\n        clearTimeout(this.Timeout);\r\n        this._isActive = false;\r\n        this.TimeoutHide = setTimeout(function(){\r\n            $this.Content.style.display = 'none';\r\n\r\n        }, 250); //hide may be called in same time as the show()\r\n    }\r\n    get isActive(){\r\n        return this._isActive;\r\n    }\r\n};\r\n\r\n/* date-working class */\r\nLure._Date = class LureDate{\r\n    Format( format = Lure.Culture.DateFormatFull, isBandMonthName = false) {\r\n        return Lure.Date.Format(this._Date, format, isBandMonthName);\r\n    }\r\n    get CountDays(){\r\n        let month = this._Date.getMonth();\r\n        let year = this._Date.getFullYear();\r\n        return new Date(year, month+1, 0).getDate();\r\n    }\r\n    get DayStart(){\r\n        let d = new Date(this._Date.getTime());\r\n        d.setHours(0,0,0,0);\r\n        return d;\r\n    }\r\n    get DayEnd(){\r\n        let d = new Date(this._Date.getTime());\r\n        d.setHours(23,59,59,997);\r\n        return d;\r\n    }\r\n\r\n    get WeekStart(){\r\n        let wd = this._Date.getDay();\r\n        wd = wd !== 0 ? wd-1: 6; //monday as first weekday\r\n        return this.AddDays(-wd).DayStart\r\n\r\n    }\r\n    get WeekEnd(){\r\n        let wd = this._Date.getDay();\r\n        wd = wd !== 0 ? wd-1: 6; //monday as first weekday\r\n        return this.AddDays(6-wd).DayEnd\r\n    }\r\n\r\n    get MonthStart(){\r\n        let d = new Date(this._Date.getTime());\r\n        d.setDate(1);\r\n        d.setHours(0,0,0,0);\r\n        return d;\r\n    }\r\n    get MonthEnd(){\r\n        let d = new Date(this._Date.getTime());\r\n        d.setDate(Lure.Date(d).CountDays );\r\n        d.setHours(23,59,59,997);\r\n        return d;\r\n    }\r\n\r\n    get QuarterStart(){\r\n        let d = new Date(this._Date.getTime());\r\n        let quart = Math.floor( (d.getMonth()) / 3);\r\n        d.setMonth(quart*3);\r\n        d.setDate(1);\r\n        d.setHours(0,0,0,0);\r\n        return d;\r\n    }\r\n    get QuarterEnd(){\r\n        let d = new Date(this._Date.getTime());\r\n        let quart = Math.floor( (d.getMonth()) / 3);\r\n        d.setMonth(quart*3 + 2);\r\n        d.setDate(this.CountDays );\r\n        d.setHours(23,59,59,997);\r\n        return d;\r\n    }\r\n\r\n    get YearStart(){\r\n        return new Date(this._Date.getFullYear(), 0, 1);\r\n    }\r\n    get YearEnd(){\r\n        return new Date(this._Date.getFullYear(), 11, 31, 23, 59, 59, 997);\r\n    }\r\n\r\n\r\n\r\n    AddSeconds(Count){\r\n        this._Date.setSeconds(this._Date.getSeconds() + Count);\r\n        return this;\r\n    }\r\n    AddMinutes(Count){\r\n        this._Date.setMinutes(this._Date.getMinutes() + Count);\r\n        return this;\r\n    }\r\n    AddHours(Count){\r\n        this._Date.setHours(this._Date.getHours() + Count);\r\n        return this;\r\n    }\r\n    AddDays(Count){\r\n        //const dat = new Date(this._Date.valueOf());\r\n        this._Date.setDate(this._Date.getDate() + Count);\r\n        return this;\r\n    }\r\n    AddMonths(Count){\r\n        let DtDays = this._Date.getDate();\r\n        let DtTargetDays = new Date(this._Date.getFullYear(), this._Date.getMonth()+Count + 1, 0).getDate();\r\n        if (DtTargetDays >= DtDays)\r\n        {\r\n            this._Date.setMonth(this._Date.getMonth() + Count);\r\n        }\r\n        else\r\n        {\r\n            this._Date.setMonth(this._Date.getMonth() + Count);\r\n            this.AddDays(DtTargetDays-DtDays);\r\n        }\r\n        return this;\r\n    }\r\n    get Date(){\r\n        return this._Date;\r\n    }\r\n    get Int(){\r\n        return this._Date.valueOf()\r\n    }\r\n    get Value(){\r\n        return this._Date.valueOf()\r\n    }\r\n    get DateCs(){\r\n        return '\\/Date(' + (+this.Value) + this.Format('Z') + ')\\/'\r\n    }\r\n\r\n    get Milliseconds(){\r\n        return this._Date.getMilliseconds();\r\n    }\r\n    get Seconds(){\r\n        return this._Date.getSeconds();\r\n    }\r\n    get Minutes(){\r\n        return this._Date.getMinutes();\r\n    }\r\n    get Hours(){\r\n        return this._Date.getHours();\r\n    }\r\n    get Day(){\r\n        return this._Date.getDate();\r\n    }\r\n    get DayOfWeek(){\r\n        return this._Date.getDay();\r\n    }\r\n    get Month(){\r\n        return this._Date.getMonth();\r\n    }\r\n    get Year(){\r\n        return this._Date.getFullYear();\r\n    }\r\n\r\n    SetDayStart(){\r\n        this._Date.setHours(0,0,0,0);\r\n        return this;\r\n    }\r\n    SetDayEnd(){\r\n        this._Date.setHours(23, 59, 59, 997);\r\n        return this;\r\n    }\r\n\r\n    SetWeekStart(){\r\n        let wd = this._Date.getDay();\r\n        wd = wd !== 0 ? wd-1: 6; //monday as first weekday\r\n        this._Date = this.AddDays(-wd).DayStart;\r\n        return this;\r\n    }\r\n    SetWeekEnd(){\r\n        let wd = this._Date.getDay();\r\n        wd = wd !== 0 ? wd-1: 6; //monday as first weekday\r\n        this._Date = this.AddDays(6-wd).DayEnd;\r\n        return this;\r\n    }\r\n\r\n    SetMonthStart(){\r\n        this._Date.setDate(1);\r\n        this._Date.setHours(0,0,0,0);\r\n        return this;\r\n    }\r\n    SetMonthEnd(){\r\n        this._Date.setDate(this.CountDays );\r\n        this._Date.setHours(23,59,59,997);\r\n        return this;\r\n    }\r\n\r\n    SetQuarterStart(){\r\n        let quart = Math.floor( (this.Month) / 3);\r\n        this._Date.setMonth(quart*3);\r\n        this._Date.setDate(1);\r\n        this._Date.setHours(0,0,0,0);\r\n        return this;\r\n    }\r\n    SetQuarterEnd(){\r\n        let quart = Math.floor( (this.Month) / 3);\r\n        this._Date.setMonth(quart*3 + 2);\r\n        this._Date.setDate(this.CountDays );\r\n        this._Date.setHours(23,59,59,997);\r\n        return this;\r\n    }\r\n\r\n    SetYearStart(){\r\n        this._Date = new Date(this._Date.getFullYear(), 0, 1);\r\n        return this;\r\n    }\r\n    SetYearEnd(){\r\n        this._Date = new Date(this._Date.getFullYear(), 0, 1, 23, 59, 59, 997);\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    get isToday(){\r\n        return this.isCurrentDay\r\n    }\r\n    get isCurrentDay(){\r\n        const today = new Date();\r\n\r\n        const day   = this._Date.getDate();\r\n        const month = this._Date.getMonth();\r\n        const year  = this._Date.getFullYear();\r\n\r\n        return (day === today.getDate() && month === today.getMonth() && year === today.getFullYear())\r\n    }\r\n    get isCurrentMonth(){\r\n        const month = this._Date.getMonth();\r\n        const year =  this._Date.getFullYear();\r\n        const today = new Date();\r\n        return (month === today.getMonth() && year === today.getFullYear())\r\n    }\r\n\r\n    constructor(date, format){\r\n        if (date === null || typeof date === 'undefined'){\r\n            Lure.System.ShowError('[Lure.Date] Input Date is undefined or null');\r\n            console.error(new Error('[Lure.Date] Input Date is undefined or null'));\r\n            return null;\r\n\r\n        }\r\n        if (date instanceof Date){\r\n            this._Date = new Date(date.valueOf());\r\n        }\r\n        else if (date instanceof LureDate){\r\n            this._Date = date._Date;\r\n        }\r\n        else if (Lure.isNumeric(date) && !format){\r\n            this._Date = new Date(parseInt(date));\r\n        }\r\n        else{\r\n            const Dags = 'DDMMYYYYHHmmss';\r\n            let Legacy = [];\r\n            format = format ? format : Lure.Culture.DateFormatFull;\r\n            const rgx = format\r\n                .replace(/[DMYHms]+/g,function (match, index) {\r\n                    Legacy.push(match.substring(0,1));\r\n                    if (Dags.indexOf(match) > -1){\r\n                        let len = match.length < 2 ? `0,2`:match.length;\r\n                        if (match === 'Y')\r\n                            len = '2,4';\r\n                        return `(\\\\d{${len}})?`;\r\n                    }\r\n                })\r\n                .replace(/[.-/ :;]/g, function (match) {\r\n                    return match+'?';\r\n                });\r\n            let C = {\r\n                Y:0,\r\n                M:0,\r\n                D:1,\r\n                H:0,\r\n                m:0,\r\n                s:0,\r\n            };\r\n            let ErrorSum = 0;\r\n            date.replace(new RegExp(rgx), function(match, a,b,c,d,e,f,g,h){\r\n                let x = [a,b,c,d,e,f,g,h];\r\n                for (let i = 0; i < Legacy.length; i++){\r\n                    C[Legacy[i]] = x[i]? x[i]: C[Legacy[i]];\r\n                    if (x[i] === '' || x[i] === '0'){\r\n                        ErrorSum++;\r\n                    }\r\n                }\r\n\r\n            });\r\n            if (!C.Y)\r\n                ErrorSum++;\r\n            if ((!C.M) && (C.D || C.H || C.m || C.s))\r\n                ErrorSum++;\r\n            if (C.M>12 || C.H > 23 || C.m>59 || C.s>59)\r\n                ErrorSum++;\r\n\r\n            this._Date = new Date(C.Y, C.M-1,C.D,C.H, C.m, C.s);\r\n            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0){\r\n                let matchCS = date.match(/Date\\(([\\d]+)(\\+\\d{4})\\)/);\r\n                if (matchCS){\r\n                    this._Date = new Date(parseInt(matchCS[1]));\r\n                }\r\n                ErrorSum = 0;\r\n            }\r\n            //return;\r\n            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0){\r\n                this._Date = new Date(date);\r\n            }\r\n            if (!Lure.Date.isDateValid(this._Date) || ErrorSum > 0){\r\n                Lure.System.ShowError('[Lure.Data] Can not parse properly input Data');\r\n                console.error(`[Lure.Data] Parse Error. Can not parse properly input Data \"${date}\"`);\r\n            }\r\n            // console.log(Legacy, rgx, C,ErrorSum);\r\n        }\r\n\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @param date\r\n * @param format\r\n * @returns {LureDate|*}\r\n * @constructor\r\n */\r\nLure.Date = (date=new Date(), format)=>{\r\n    if (date === null){\r\n        date = new Date();\r\n        console.warn('[Lure.Date] Date is null');\r\n    }\r\n    return new Lure._Date(date, format);\r\n};\r\n//something like static methods\r\nLure.Date.Format = (date,  format = \"DD.MM.YYYY HH:mm:ss\", isBandMonthName = false)=>{\r\n    //let date = this._Date;\r\n    if (date === null || typeof date === 'undefined')\r\n        return '';\r\n    let day  = date.getDay();\r\n    day = day !== 0 ? day-1: 7; //monday as first weekday\r\n    const data = date.getDate();\r\n    const mo   = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    const hour = date.getHours();\r\n    const min  = date.getMinutes();\r\n    const sec  = date.getSeconds();\r\n    let Z    = date.getTimezoneOffset()/(-0.6);\r\n    let ZzeroCount   = 4 - Z.toString().length;\r\n    if (ZzeroCount>0)\r\n        Z = '0'.repeat(ZzeroCount) + Z;\r\n    format = format.replace(/[DdMmYyHhSsZz]/g, '%$&');\r\n\r\n\r\n    return format.replace(/%D%D/g, data.toString().length < 2? `0${data}`: data)\r\n        .replace(/%D/g, data)\r\n        .replace(/%d%d%d%d/g, Lure.Culture.WeekDays[day])\r\n        .replace(/%d%d%d/g, Lure.Culture.WeekDaysShort[day])\r\n        .replace(/%M%M%M%M%M/g, Lure.Culture.MonthNamesBanded[mo-1] )\r\n        .replace(/%M%M%M%M/g, isBandMonthName ? Lure.Culture.MonthNamesBanded[mo-1] : Lure.Culture.MonthNames[mo-1] )\r\n        .replace(/%M%M%M/g,  Lure.Culture.MonthNamesShort[mo-1] )\r\n        .replace(/%M%M/g, mo.toString().length < 2 ? `0${mo}`:mo)\r\n        .replace(/%M/g, mo)\r\n        .replace(/%Y%Y%Y%Y/g,year)\r\n        .replace(/%Y%Y/g,year.toString().substring(2,4) )\r\n        .replace(/%Y/g, year)\r\n        .replace(/%H%H/g, hour.toString().length < 2 ? `0${hour}`:hour)\r\n        .replace(/%h%h/g, (hour%12).toString().length < 2 ? `0${(hour%12)}`:(hour%12) )\r\n        .replace(/%H/g, hour)\r\n        .replace(/%h/g, hour % 12 )\r\n        .replace(/%m%m/g, min.toString().length < 2 ? `0${min}`:min)\r\n        .replace(/%m/g, min)\r\n        .replace(/%s%s/g, sec.toString().length < 2 ? `0${sec}`:sec)\r\n        .replace(/%s/g, sec)\r\n        .replace(/%Z/g, `+${Z}`);\r\n\r\n}\r\nLure.Date.isDateValid = (date)=>{\r\n    return (Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN( date.getTime()));\r\n};\r\n\r\n\r\n\r\n//###\r\n//###TODO Beta\r\n//Draggable alpha\r\nLure._Draggable = class LureDraggable{\r\n    constructor({\r\n                    Target = null,   //handle\r\n                    Content = null,  //draggable item\r\n                    Options = {\r\n                        OnMove: ()=>{},\r\n                        OnDrop: ()=>{},\r\n                        Grid: [1, 1],\r\n                        Containment: null,\r\n                    }\r\n                }){\r\n        this.Target = Lure.Select(Target);\r\n        this.Content = Content ? Lure.Select(Content) : this.Target;\r\n\r\n        this.Parent = this.Content.parentElement;\r\n        this.Content.style.position = 'absolute';\r\n        this.Options = {\r\n            Grid: Options.Grid?  Options.Grid : [1, 1],\r\n            isGridHard: Options.isGridHard ? Options.isGridHard : false,\r\n            Containment: Options.Containment ? Options.Containment : ['auto', 'auto', 'auto', 'auto'],\r\n        };\r\n\r\n        let obj, x, y, prev_x, prev_y;\r\n        let ctn = this.Content;\r\n        let ContentRect = this.Content.getBoundingClientRect();\r\n        let ShiftY = this.Content.offsetTop - ContentRect.y;\r\n        let ShiftX = this.Content.offsetLeft - ContentRect.x;\r\n        let DeltaY = 0;\r\n        let DeltaX = 0;\r\n        function drag(e) {\r\n            obj = ctn;\r\n            ContentRect = obj.getBoundingClientRect();\r\n            ShiftY = obj.offsetTop - ContentRect.y;\r\n            ShiftX = obj.offsetLeft - ContentRect.x;\r\n            prev_x = x - obj.offsetLeft;\r\n            prev_y = y - obj.offsetTop;\r\n        }\r\n        let move = (e) => {\r\n            if (e.pageX) {\r\n                x = e.pageX;\r\n                y = e.pageY;\r\n            }\r\n            if(obj) {\r\n                //fix position if scrolling\r\n                let ContentRectCurrent = obj.getBoundingClientRect();\r\n                let ShiftYNew = obj.offsetTop - ContentRectCurrent.y;\r\n                let ShiftXNew = obj.offsetLeft - ContentRectCurrent.x;\r\n                DeltaY = ShiftYNew - ShiftY;\r\n                DeltaX = ShiftXNew - ShiftX;\r\n                let res_x = x - prev_x + DeltaX;\r\n                let res_y = y - prev_y + DeltaY;\r\n\r\n                ContentRect = ContentRectCurrent;\r\n                if (this.Options.Grid[0] && this.Options.isGridHard && x!==prev_x){\r\n                    res_x = Lure.RoundBy(res_x, this.Options.Grid[0], x<prev_x);\r\n                }\r\n                if (this.Options.Grid[1] && this.Options.isGridHard  && y!==prev_y){\r\n                    res_y = Lure.RoundBy(res_y, this.Options.Grid[1], y<prev_y);\r\n                }\r\n                if (this.Options.Containment[0] !== 'auto' && res_x < this.Options.Containment[0]){\r\n                    res_x = this.Options.Containment[0];\r\n                }\r\n                if (this.Options.Containment[1] !== 'auto' && res_y < this.Options.Containment[1]){\r\n                    res_y = this.Options.Containment[1];\r\n                }\r\n                if (this.Options.Containment[2] !== 'auto' && res_x + obj.clientWidth > this.Options.Containment[2]){\r\n                    res_x = this.Options.Containment[2] - obj.clientWidth;\r\n                }\r\n                if (this.Options.Containment[3] !== 'auto' && res_y + obj.clientHeight > this.Options.Containment[3]){\r\n                    res_y = this.Options.Containment[3] - obj.clientHeight;\r\n                }\r\n                //console.log(res_x, res_y);\r\n                obj.style.left = res_x + 'px';\r\n                obj.style.top = res_y + 'px';\r\n                if (Options.OnMove)\r\n                    Options.OnMove(e);\r\n            }\r\n        };\r\n        let drop = (e)=>{\r\n            if (!obj)\r\n                return;\r\n            if(obj && !this.Options.isGridHard ) {\r\n                let res_x = x - prev_x + DeltaX;\r\n                let res_y = y - prev_y + DeltaY;\r\n                if (this.Options.Grid[0] && x!==prev_x){\r\n                    res_x = Lure.RoundBy(res_x, this.Options.Grid[0], x<prev_x);\r\n                }\r\n                if (this.Options.Grid[1] && y!==prev_y){\r\n                    res_y = Lure.RoundBy(res_y, this.Options.Grid[1], y<prev_y);\r\n                }\r\n                if (this.Options.Containment[0] !== 'auto' && res_x < this.Options.Containment[0]){\r\n                    res_x = this.Options.Containment[0];\r\n                }\r\n                if (this.Options.Containment[1] !== 'auto' && res_y < this.Options.Containment[1]){\r\n                    res_y = this.Options.Containment[1];\r\n                }\r\n                if (this.Options.Containment[2] !== 'auto' && res_x + obj.clientWidth > this.Options.Containment[2]){\r\n                    res_x = this.Options.Containment[2] - obj.clientWidth;\r\n                }\r\n                if (this.Options.Containment[3] !== 'auto' && res_y + obj.clientHeight > this.Options.Containment[3]){\r\n                    res_y = this.Options.Containment[3] - obj.clientHeight;\r\n                }\r\n                //console.log(res_x, res_y);\r\n                obj.style.left = res_x + 'px';\r\n                obj.style.top = res_y + 'px';\r\n            }\r\n            obj = false;\r\n            if (Options.OnDrop)\r\n                Options.OnDrop(e);\r\n        };\r\n        this.Target.addEventListener('mousedown', drag);\r\n        document.addEventListener('mousemove', move);\r\n        document.addEventListener('mouseup', drop);\r\n        this.Target.LureDraggable = this;\r\n    }\r\n};\r\nLure.Draggable = (Target, Content, Options)=>{\r\n    return new Lure._Draggable({Target:Target, Content:Content, Options:Options});\r\n};\r\n\r\n\r\n\r\n\r\n\r\nLure.Listener = class LureListener {\r\n    Run(){\r\n        this.Stop();\r\n        this._Interval = setInterval(()=>{\r\n            this._Listen();\r\n        }, this.Freq)\r\n    }\r\n    Stop(){\r\n        clearInterval(this._Interval);\r\n        clearTimeout(this._TimeOut);\r\n    }\r\n\r\n    _Listen(){\r\n        let Width = this.Target.clientWidth;\r\n        if (Width !== this.Width){\r\n            this.Width = Width;\r\n            return this._OnEvent('width');\r\n        }\r\n        let Height = this.Target.clientHeight;\r\n        if (Height !== this.Height){\r\n            this.Height = Height;\r\n            return this._OnEvent('height');\r\n        }\r\n    }\r\n    _OnEvent(){\r\n        clearTimeout(this._TimeOut);\r\n        this._TimeOut = setTimeout(()=>{\r\n            this.OnEvent();\r\n        }, this.Delay)\r\n\r\n    }\r\n    constructor({\r\n                    Target = null,\r\n                    Type   = 'resize',\r\n                    Freq   = 20,\r\n                    Delay  = 0,\r\n                    OnEvent = ()=>{},\r\n                }={}){\r\n        this.Target = Lure.Select(Target);\r\n        this.Type = 'resize';\r\n        this.Freq = Freq;\r\n        this.Delay = Delay;\r\n        this.OnEvent = OnEvent;\r\n\r\n        this._Interval = null;\r\n        this._TimeOut    = null;\r\n\r\n        this.Width  = this.Target.clientWidth;\r\n        this.Height = this.Target.clientHeight;\r\n\r\n        this._Timer = 0;\r\n        this.Run();\r\n\r\n\r\n    }\r\n};\r\n","//#####\r\n//# Requires:\r\n//Core [lure.core.js]\r\n//Lure.Date\r\n//####\r\nif (typeof Lure === 'undefined'){\r\n    console.error('[Lure] Lure core is not defined');\r\n}\r\nif (typeof Lure.Date === 'undefined'){\r\n    console.error('[Lure] Lure.Date is not defined');\r\n}\r\n\r\nLure.PeriodPicker = class LurePeriodPicker{\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    static get Version(){\r\n        return 'v0.1.0'\r\n    }\r\n    Reset(){\r\n        this.Date = [null, null];\r\n        this._Refresh();\r\n    }\r\n    Refresh(){\r\n        this._Refresh();\r\n    }\r\n    get Date(){\r\n        if (this.Settings.isOneDaySelection)\r\n            return this._Date[0];\r\n        return this._Date;\r\n    }\r\n    set Date(val){\r\n        if (this.Settings.isOneDaySelection){\r\n            this._Date = [  Lure.Date(val).DayStart, Lure.Date(val).DayEnd ];\r\n            return;\r\n        }\r\n        this._Date[0] = val[0];\r\n        this._Date[1] = val[1];\r\n        if (val[0] > val[1])\r\n            this._Date = [  Lure.Date(val[1]).DayStart, Lure.Date(val[0]).DayEnd ];\r\n\r\n        this._UpdateDateView();\r\n    }\r\n    Hide(){\r\n        this._Hide();\r\n    }\r\n    Show(){\r\n        this._Show();\r\n    }\r\n    Toggle(){\r\n        if (this.isActive)\r\n            return this._Hide();\r\n        this._Show();\r\n    }\r\n\r\n    constructor({\r\n        Target              = null,             //{query}  Target where to render ex. '.date-picker'  (can be html element)\r\n        DateTarget          = new Date(),       //{Date} -\r\n        DateRange           = null,             //{[Date1,Date2]} - preselected dates\r\n        TargetImmutable     = false,            //{bool} Don't change target element\r\n        NoSelect            = false,            //{bool} Not selected data on start\r\n        NoRange             = false,            //{bool} Set 'true' for one day only selection\r\n        NoWeekDays          = false,            //{bool} isHide weekdays names\r\n        WeekSelection       = true,\r\n\r\n        //Type = 'Button',                      //{string} TextBox, Button\r\n        Cells               = [1, 3],           //{string} How much months to show [rows, columns]\r\n\r\n        Min = null,\r\n        Max = null,                             //max pickable value\r\n\r\n        Format              = Lure.Culture.DateFormat,  // {string} ex. 'DD.MM.YYYY'\r\n        Animation           = null,             //{object}     {Show: '', Hide: ''}\r\n        BeforeShow          = () => {},\r\n        OnConfirm           = () => {},         //{function}  onOk button click\r\n        DirectConfirm       = false,            //{bool} calls OnConfirm when select data\r\n        ButtonConfirm       = true,\r\n\r\n        AutoConfirm         = false,\r\n\r\n        Locale = Lure.Settings.Locale,\r\n\r\n        Fullscreen = false,\r\n        ButtonFullscreen = true,\r\n                })\r\n    {\r\n        this.isActive = false;\r\n\r\n\r\n\r\n        /* Init Settings */\r\n        this.Settings = Lure.Clone(Lure.Settings.PeriodPicker.DefaultSettings);\r\n        this.Settings.Format = Format;\r\n        this.Settings.isOneDaySelection = NoRange;\r\n        this.Settings.isAutoConfirm     = AutoConfirm;\r\n        this.Settings.isDirectConfirm   = DirectConfirm;\r\n        this.Settings.isWeekSelection   = WeekSelection && !this.Settings.isOneDaySelection;\r\n        this.Settings.isTargetImmutable = TargetImmutable;\r\n        this.Settings.Lang = Lure.Settings.PeriodPicker.CultureInfo[Locale];\r\n        this.Settings.Cells = [Cells[0],Cells[1]];\r\n        this.Min = Min;\r\n        this.Max = Max;\r\n\r\n\r\n        /* Settings.Animation */\r\n        if (Animation) {\r\n            if (Animation.Show)\r\n                this.Settings.Animation.Show = Animation.Show;\r\n            if (Animation.Hide)\r\n                this.Settings.Animation.Hide = Animation.Hide;\r\n        }\r\n        this.Settings.Animation._DurationShow = Lure.GetDurationAnimation(this.Settings.Animation.Show, this.Content);\r\n        this.Settings.Animation._DurationHide = Lure.GetDurationAnimation(this.Settings.Animation.Hide, this.Content);\r\n\r\n\r\n        /* Init */\r\n        this.DateTarget =  DateTarget? DateTarget: new Date();\r\n        this._Date = [];\r\n        if (DateRange){\r\n            if (DateRange[0] && DateRange[0] instanceof Date){\r\n                this._Date[0] = Lure.Date(DateRange[0]).DayStart;\r\n            }\r\n            if (DateRange[1] && DateRange[1] instanceof Date){\r\n                this._Date[1] = Lure.Date(DateRange[1]).DayEnd;\r\n            }\r\n            if (DateRange[0] > DateRange[1])\r\n                this._Date = [Lure.Date(DateRange[1]).DayStart, Lure.Date(DateRange[0]).DayEnd];\r\n        }\r\n        else if (NoSelect){\r\n            this._Date = [null, null];\r\n        }\r\n        else {\r\n            this._Date = [Lure.Date(DateTarget).DayStart, Lure.Date(DateTarget).DayEnd];\r\n        }\r\n\r\n        /* Init DOM */\r\n        this.Target = Lure.Select(Target);\r\n        this.Target.classList.add('l-pp-target');\r\n        this.Target.classList.add('pointer');\r\n\r\n\r\n        this.Content = Lure.CreateElementFromString(`<div class=\"lure-periodpicker ${Fullscreen? 'l-pp-fullscreen':''}\" style=\"display: none\">\r\n                                <div class=\"l-pp-head\">${this.Settings.Lang.ChoosePeriod}</div>\r\n                                <div class=\"close l-close black\"></div>\r\n                                <div class=\"l-pp-controls row\">\r\n                                    ${ButtonFullscreen? '<div class=\"l-pp-btn-fullscreen\"></div>':'' }\r\n                                </div>\r\n                                <div class=\"col\">\r\n                                    <div class=\"l-pp-work-area row\">\r\n                                        <div class=\"l-pp-arrow l-pp-arrow-left pointer\"></div>\r\n                                        <div class=\"l-pp-content\"></div>\r\n                                        <div class=\"l-pp-arrow l-pp-arrow-right pointer\"></div>\r\n                                    </div>\r\n                                    <div class=\"l-pp-bottom row flex-between\">\r\n                                        <div class=\"null\"></div>\r\n                                        <div class=\"l-pp-selected-range row\">\r\n                                            <div class=\"l-pp-input-datestart flex flexa-center\">\r\n                                                <input class=\"l-textbox\" type=\"text\">\r\n                                            </div>\r\n                                            <div class=\"flex flexa-center flex-center\" style=\"width: 30px\">\r\n                                                <div> — </div>\r\n                                            </div>\r\n                                            <div class=\"l-pp-input-dateend flex flexa-center\">\r\n                                                <input class=\"l-textbox\" type=\"text\">\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"button-holder row flex-end\">\r\n                                            <button class=\"button btn-l-pp-ok\">${this.Settings.Lang.Ok}</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                              </div>`);\r\n        document.body.appendChild(this.Content);\r\n\r\n\r\n\r\n        const Head             = Lure.Select('.l-pp-head', this.Content);\r\n        const ButtonClose      = Lure.Select('.close', this.Content);\r\n        const ButtonFullscr    = Lure.Select('.l-pp-btn-fullscreen', this.Content);\r\n        const ButtonSubmit     = Lure.Select('.btn-l-pp-ok', this.Content);\r\n        const InputStart       = Lure.Select('.l-pp-input-datestart input', this.Content);\r\n        const InputEnd         = Lure.Select('.l-pp-input-dateend input', this.Content);\r\n        const MonthArea        = Lure.Select('.l-pp-content', this.Content);\r\n\r\n        if (Lure.Draggable){\r\n            Lure.Draggable(Head, this.Content)\r\n        }\r\n\r\n\r\n        const WeekDays = NoWeekDays ? '':`<div class=\"l-pp-weekdays-row row\">\r\n                                            ${this.Settings.isWeekSelection?'<div class=\"l-pp-month-cell\"> </div>':''}\r\n                                            <div class=\"l-pp-weekdays-cell\">${Lure.Culture.WeekDaysShort[0]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell\">${Lure.Culture.WeekDaysShort[1]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell\">${Lure.Culture.WeekDaysShort[2]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell\">${Lure.Culture.WeekDaysShort[3]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell\">${Lure.Culture.WeekDaysShort[4]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell dayoff\">${Lure.Culture.WeekDaysShort[5]}</div>\r\n                                            <div class=\"l-pp-weekdays-cell dayoff\">${Lure.Culture.WeekDaysShort[6]}</div>\r\n                                          </div>`;\r\n\r\n        let AnimationTimer = null;\r\n        let CountSelection = 0;\r\n        let SelectionDates = [null, null];\r\n\r\n\r\n        const Builder = {\r\n            Target:    Lure.Compile(`{{$g.Lure.Date($this[0]).Format(\"${this.Settings.Format}\")}} - {{$g.Lure.Date($this[1]).Format(\"${this.Settings.Format}\")}}`),\r\n            TargetSingle:    Lure.Compile(`{{$g.Lure.Date($this).Format(\"${this.Settings.Format}\")}}`),\r\n\r\n\r\n            MonthDay:  Lure.Compile(`<div class=\"l-pp-month-cell {{Deny}} {{Selected}} {{SelectedTemp}} {{Day}}\" data-value=\"{{$g.Lure.Date(o.Date).Format('DD.MM.YYYY')}}\">{{$g.Lure.Date(o.Date).Format(\"DD\")}}</div>`),\r\n            MonthRow:  Lure.Compile(`<div class=\"l-pp-month-row row\">\r\n                                       ${this.Settings.isWeekSelection?'<div class=\"l-pp-week-select\">|</div>':''}\r\n                                       {{$this}}\r\n                                     </div>`),\r\n            Month:     Lure.Compile(`<div class=\"l-pp-month-block\">\r\n                                       ${WeekDays}\r\n                                       <div class=\"l-pp-month-name ${this.Settings.isOneDaySelection? '':'pointer'}\" data-value=\"{{$g.Lure.Date(o.Date).Format('MM.YYYY')}}\">{{$g.Lure.Date(o.Date).Format('MMMM YYYY')}}</div>\r\n                                       <div class=\"l-pp-month col\">{{Data}}</div>\r\n                                     </div>`),\r\n            BuildMonth: function (date) {\r\n                let DateCursor = new Date(date.getFullYear(), date.getMonth(), 1);\r\n                let CurrentMonth = date.getMonth();\r\n                let Month = '';\r\n                let MonthRow ='';\r\n                while (DateCursor.getMonth() === CurrentMonth){\r\n                    let Day = DateCursor.getDay();\r\n                    let Selected = (DateCursor >= this._Date[0]  && DateCursor <= this._Date[1] && (CountSelection === 0 || this.Settings.isDirectConfirm || this.Settings.isOneDaySelection )) ? 'selected':'';\r\n                    let SelectedTemp = '';\r\n                    let Deny = '';\r\n                    if (SelectionDates[0] && CountSelection === 1 && !this.Settings.isOneDaySelection /* && !this.Settings.isDirectConfirm/* && !this.Settings.isOneDaySelection*/)\r\n                        SelectedTemp = (DateCursor >= SelectionDates[0] && DateCursor <= Lure.Date(SelectionDates[0]).DayEnd) ? 'l-pp-selection-active':'';\r\n                    if ( (this.Min && DateCursor < this.Min ) || (this.Max && DateCursor > this.Max ) ){\r\n                        Deny = 'l-pp-deny';\r\n                    }\r\n                    MonthRow += Builder.MonthDay({\r\n                        Date: DateCursor,\r\n                        Day: (Day === 0 || Day === 6) ? 'dayoff':'',\r\n                        Selected: Selected,\r\n                        SelectedTemp: SelectedTemp,\r\n                        Deny: Deny\r\n                    });\r\n                    if (Day === 0){\r\n                        Month += Builder.MonthRow(MonthRow);\r\n                        MonthRow = '';\r\n                    }\r\n                    DateCursor = Lure.Date(DateCursor).AddDays(1).Date;\r\n                }\r\n                Month += MonthRow? Builder.MonthRow(MonthRow):'';\r\n                // Month += WeekDays;\r\n                return Builder.Month({Date: Lure.Date(DateCursor).AddDays(-1).Date, Data: Month});\r\n            }.bind(this),\r\n\r\n            TargetCaption: ()=>{\r\n                if (!this._Date[0])\r\n                    return this.Settings.isOneDaySelection ? this.Settings.Lang.ChooseDay:this.Settings.Lang.ChoosePeriod;\r\n                if (this.Settings.isOneDaySelection){\r\n                    return Builder.TargetSingle(this._Date[0]);\r\n                }\r\n                return Builder.Target(this._Date);\r\n            },\r\n            Build: function () {\r\n                let MonthContent = '';\r\n                let CountShift = 0;\r\n                for (let i = 0; i < this.Settings.Cells[0]; i++){\r\n                    MonthContent +=`<div class=\"row\">`;\r\n                    for (let j = 0; j < this.Settings.Cells[1]; j++){\r\n                        MonthContent += Builder.BuildMonth(Lure.Date(this.DateTarget).AddMonths(CountShift).Date);\r\n                        CountShift++;\r\n                    }\r\n                    MonthContent +=`</div>`;\r\n                }\r\n                if (!this.Settings.Cells[0] || !this.Settings.Cells[1]){\r\n                    MonthContent += Builder.BuildMonth(this.DateTarget);\r\n                }\r\n                MonthArea.innerHTML = MonthContent;\r\n                this._UpdateDateView();\r\n            }.bind(this)\r\n        };\r\n        this._UpdateDateView = () => {\r\n            if (!this.Settings.isTargetImmutable)\r\n                this.Target.innerHTML = Builder.TargetCaption();\r\n            InputStart.value = this._Date[0] ? Lure.Date(this._Date[0]).Format(Format) : '';\r\n            InputEnd.value   = this._Date[1]? Lure.Date(this._Date[1]).Format(Format) : '';\r\n        };\r\n        this._Builder = Builder;\r\n        const SelectionConfirm = ()=>{\r\n            if (!this.Settings.isOneDaySelection && !this.Settings.isDirectConfirm){\r\n                if (!this._Date[0] && !SelectionDates[0])\r\n                    return Lure.ErrorHint(InputStart, 'Выберите начальную дату');\r\n                if (!SelectionDates[1] && CountSelection>0)\r\n                    return Lure.ErrorHint(InputEnd, 'Выберите конечную дату');\r\n            }\r\n            OnConfirm.call(this, this.Date);\r\n            this._Hide();\r\n        };\r\n\r\n        const SelectionSet = (DateStart=SelectionDates[0],DateEnd=SelectionDates[1])=>{\r\n            SelectionDates[0] = DateStart;\r\n            SelectionDates[1] = DateEnd;\r\n            /* Date One */\r\n            if (this.Settings.isOneDaySelection){\r\n                this._Date[0] = Lure.Date(SelectionDates[0]).DayStart;\r\n                this._Date[1] = Lure.Date(SelectionDates[0]).DayEnd;\r\n                this.Refresh();\r\n                if (this.Settings.isAutoConfirm)\r\n                    return SelectionConfirm();\r\n                if (this.Settings.isDirectConfirm){\r\n                    OnConfirm.call(this, this.Date);\r\n                }\r\n                CountSelection = 0;\r\n               // SelectionDates = [null, null];\r\n                return;\r\n            }\r\n            /* Date Range */\r\n            if (this.Settings.isDirectConfirm){\r\n                this._Date[0] = DateStart ? Lure.Date(DateStart).DayStart:this._Date[0];\r\n                this._Date[1] = DateEnd ? Lure.Date(DateEnd).DayEnd  :Lure.Date(DateStart).DayEnd;\r\n                if (this._Date[0] > this._Date[1]){\r\n                    this._Date = [ Lure.Date(this._Date[1]).DayStart, Lure.Date(this._Date[0]).DayEnd];\r\n                }\r\n                this.Refresh();\r\n                OnConfirm.call(this, this.Date);\r\n                return;\r\n            }\r\n            if (DateEnd){\r\n                this._Date[0] = DateStart ? Lure.Date(DateStart).DayStart:this._Date[0];\r\n                this._Date[1] = DateEnd ? Lure.Date(DateEnd).DayEnd  :this._Date[1];\r\n                if (this._Date[0] > this._Date[1]){\r\n                    this._Date = [ Lure.Date(this._Date[1]).DayStart, Lure.Date(this._Date[0]).DayEnd];\r\n                }\r\n                this.Refresh();\r\n                if (this.Settings.isAutoConfirm){\r\n                    SelectionConfirm();\r\n                }\r\n            }\r\n            this.Refresh();\r\n        };\r\n        const RangeSelect = (val)=> {\r\n            //const DateVal = new Date(val.replace(/(\\d{2}).(\\d{2}).(\\d{4})/, \"$2/$1/$3\"));\r\n            const DateVal = Lure.Date(val, 'DD.MM.YYYY').Date;\r\n            switch (CountSelection){\r\n                case 0:\r\n                    SelectionDates[0] = DateVal;\r\n                    SelectionDates[1] = null;\r\n                    CountSelection++;\r\n                    break;\r\n                case 1:\r\n                    SelectionDates[1] = DateVal;\r\n                    CountSelection = 0;\r\n                    break;\r\n            }\r\n            SelectionSet();\r\n        };\r\n        const GoFullscreen = ()=>{\r\n            if (this.Content.classList.contains('l-pp-fullscreen')){\r\n                this.Settings.Cells = [Cells[0],Cells[1]];\r\n                this.Content.classList.remove('l-pp-fullscreen');\r\n                return this.Refresh();\r\n            }\r\n            this.Content.classList.add('l-pp-fullscreen');\r\n            const MonthBlock = Lure.Select('.l-pp-month-block', this.Content);\r\n            let w = MonthBlock.offsetWidth;\r\n            let h = MonthBlock.offsetHeight;\r\n            let dw = document.body.offsetWidth;\r\n            let dh = document.body.offsetHeight;\r\n\r\n            this.Settings.Cells = [Math.floor((dh-70)/h), Math.floor((dw-50)/w)];\r\n            this.Refresh();\r\n        };\r\n        const CheckForDeny = (Start, End)=>{\r\n            if (this.Min && End < this.Min || this.Max && Start > this.Max){\r\n                return;\r\n            }\r\n            if (this.Min && Start < this.Min){\r\n                Start = Lure.Date(this.Min).DayStart;\r\n            }\r\n            if (this.Max && End > this.Max){\r\n                End = Lure.Date(this.Max).DayEnd;\r\n            }\r\n            return [Start, End];\r\n        };\r\n\r\n        this._Show = (event) =>{\r\n            BeforeShow.call(this);\r\n            this.DateTarget = this._Date[0] ? this._Date[0] : new Date();\r\n            this.isActive = true;\r\n            CountSelection = 0;\r\n            SelectionDates = [null, null];\r\n            this.Refresh();\r\n            this.Content.style.zIndex = Lure._Dialog.zIndex + 1;\r\n\r\n            AnimationTimer = Lure.AsyncToggle(\r\n                this,\r\n                event,\r\n                this.Content,\r\n                ()=>{\r\n                    this.Content.style.display = '';\r\n                },\r\n                ()=>{},\r\n                this.Settings.Animation.Hide,\r\n                this.Settings.Animation.Show,\r\n                this.Settings.Animation._DurationShow,\r\n                AnimationTimer\r\n            );\r\n        };\r\n        this._Hide = (event) =>{\r\n            this.isActive = false;\r\n            AnimationTimer = Lure.AsyncToggle(\r\n                this,\r\n                event,\r\n                this.Content,\r\n                ()=>{},\r\n                function () {\r\n                    this.Content.style.display = 'none';\r\n                },\r\n                this.Settings.Animation.Show,\r\n                this.Settings.Animation.Hide,\r\n                this.Settings.Animation._DurationHide,\r\n                AnimationTimer\r\n            );\r\n        };\r\n        this._Refresh = function () {\r\n            Builder.Build();\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*  Events Register */\r\n\r\n        this.Target.addEventListener('click', ()=>{\r\n            this.Toggle();\r\n        });\r\n\r\n        Head.ondblclick = ()=>{\r\n            GoFullscreen();\r\n        };\r\n        ButtonClose.onclick = ()=>{\r\n            this._Hide();\r\n        };\r\n        if(ButtonFullscr)\r\n            ButtonFullscr.onclick = ()=>{\r\n                GoFullscreen();\r\n            };\r\n\r\n        /* Cell click / WeekSelect click */\r\n        Lure.AddEventListenerGlobal('click', '.l-pp-month-cell, .l-pp-week-select', function (e) {\r\n            if (e.currentTarget.classList.contains('l-pp-deny')){\r\n                return;\r\n            }\r\n            if (e.currentTarget.classList.contains('l-pp-week-select')){\r\n                let focus = Lure.Select('.l-pp-month-cell', e.currentTarget.parentNode).dataset['value'];\r\n                let pocus = Lure.Date(focus, 'DD.MM.YYYY');\r\n                CountSelection = 0;\r\n\r\n                let Start = pocus.WeekStart;\r\n                let End   = pocus.WeekEnd;\r\n                if (this.Min && End < this.Min || this.Max && Start > this.Max){\r\n                    return;\r\n                }\r\n                if (this.Min && Start < this.Min){\r\n                    Start = Lure.Date(this.Min).DayStart;\r\n                }\r\n                if (this.Max && End > this.Max){\r\n                    End = Lure.Date(this.Max).DayEnd;\r\n                }\r\n                return SelectionSet(Start, End);\r\n            }\r\n            RangeSelect(e.currentTarget.dataset['value']);\r\n        }, this.Content, this);\r\n\r\n        /* Month name click*/\r\n        Lure.AddEventListenerGlobal('click', '.l-pp-month-name', function (e) {\r\n            if (this.Settings.isOneDaySelection)\r\n                return;\r\n            CountSelection = 0;\r\n            //const DateVal = new Date(e.currentTarget.dataset['value'].replace(/(\\d{2}).(\\d{4})/, \"$2/$1\"));\r\n            const DateVal = Lure.Date(e.currentTarget.dataset['value'], 'MM.YYYY').Date;\r\n\r\n            let Start = Lure.Date(DateVal).MonthStart;\r\n            let End   = Lure.Date(DateVal).MonthEnd;\r\n            if (this.Min && End < this.Min || this.Max && Start > this.Max){\r\n                return;\r\n            }\r\n            if (this.Min && Start < this.Min){\r\n                Start = Lure.Date(this.Min).DayStart;\r\n            }\r\n            if (this.Max && End > this.Max){\r\n                End = Lure.Date(this.Max).DayEnd;\r\n            }\r\n            SelectionSet(Start, End);\r\n\r\n            //SelectionSet(Lure.Date(DateVal).MonthStart, Lure.Date(DateVal).MonthEnd );\r\n        }, this.Content, this);\r\n        /* Navigation arrow click */\r\n        Lure.AddEventListenerGlobal('click', '.l-pp-arrow', function (e) {\r\n            if (e.currentTarget.classList.contains('l-pp-arrow-left')){\r\n                this.DateTarget = Lure.Date(this.DateTarget).AddMonths(-1).Date;\r\n            }\r\n            else{\r\n                this.DateTarget = Lure.Date(this.DateTarget).AddMonths(1).Date;\r\n            }\r\n            this.Refresh();\r\n        }, this.Content, this);\r\n\r\n        MonthArea.addEventListener('wheel', function (e) {\r\n            e.preventDefault();\r\n            //console.log(e, e.deltaY);\r\n            if (e.deltaY > 0){\r\n                this.DateTarget = Lure.Date(this.DateTarget).AddMonths(-1).Date;\r\n            }\r\n            else{\r\n                this.DateTarget = Lure.Date(this.DateTarget).AddMonths(1).Date;\r\n            }\r\n            this.Refresh();\r\n        }.bind(this));\r\n\r\n        /* Submit */\r\n        ButtonSubmit.addEventListener('click', ()=>{\r\n            SelectionConfirm();\r\n        });\r\n\r\n        /* Close on somewhere click */\r\n        document.addEventListener('click', function (e) {\r\n            if (this.isActive && (e.target !== this.Content && !e.target.closest('.lure-periodpicker') )  )\r\n            {\r\n                return this.Hide();\r\n            }\r\n        }.bind(this), true);\r\n\r\n\r\n        /*  Build on init had finished  */\r\n        Builder.Build();\r\n    }\r\n\r\n};\r\n\r\nLure.Settings.PeriodPicker ={\r\n    DefaultSettings: {\r\n        Animation: {\r\n            Show: 'l-animation_periodpicker-show',\r\n            Hide: 'l-animation_periodpicker-hide'\r\n        },\r\n    },\r\n    CultureInfo: {\r\n        en: {\r\n            ChoosePeriod: 'Select period',\r\n            ChooseDay: 'Select day',\r\n            Ok: 'Ok',\r\n        },\r\n        ru: {\r\n            ChoosePeriod: 'Выберите период',\r\n            ChooseDay: 'Выберите день',\r\n            Ok: 'Ок',\r\n        },\r\n    }\r\n};\r\n","//sets = {\r\n//  SubContent: [\r\n//      {sets},                             -same object to create subs\r\n// ],\r\n//  SubContent: function{\r\n//      this.SubN = new Lure.Content({set});-same object to create subs\r\n// },\r\n//\r\n// Controller:{                                   - if needs some Template master\r\n//    Type: Templator,                                    - class link [optional] Templator by default (Templator|Treebuilder)\r\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\r\n//    Data: [array],                                      - data array [optional] Data === [] by default\r\n//    ListElement: {string|HTMLElement},                  - repeated element\r\n//    EmptyMessage: \"<div class=\"emty\">no items</div>\",   - render if Data.length === 0;\r\n//    AfterBuild: ()=>{}\r\n//    BeforeBuild: ()=>{}\r\n\r\n//  Control: {\r\n//    Target: {string, jQuery, HTMLElement},\r\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\r\n//    OnClick: {function}                          - here this === current Lure.Content\r\n//    OnChange: {function}                         - here this === current Lure.Content\r\n// },}\r\n//\r\n\r\n//#Permission\r\n//  let Roles = {Admin: 1, User: 2, OrderID: 3}       - sample roles\r\n//  let UserRoles = [2]       - sample user's roles\r\n//  let UserSubRoles: {3: [12,41,52,63,73]}   - sample user's subroles\r\n//\r\n// Permission: {\r\n//   Attribute: ''             - onElement permission check attribute (<div class=\"name\" data-permission=\"rule1\">{{Name}}</div>) ['data-permission'by default]\r\n//   Roles: [\r\n//      Roles.Admin,           -- if UserRoles doesn't contain 'UserRoles.Admin' or -1 -> access denied\r\n//      {'ID': Roles.OrderID}  -- will check Proto.Data.ID exits in UserSubRoles[UserRoles.OrderID] - if exists or has -1 permission granted\r\n//   ]\r\n//   Write: []                   - same behavior for editable only\r\n//   Rules: {                    -rules for onElement permission\r\n//       Rule1: {                -ex. <div class=\"name editable\" data-permission=\"rule1\">{{Name}}</div>\r\n//          Roles: [2],          - our sample user can see it\r\n//          Write: [1],          - but cant edit\r\n//       }\r\n//   }\r\n// }\r\n\r\nif (typeof Lure === 'undefined'){\r\n    console.error('[Lure] Lure core is not defined');\r\n}\r\n\r\n/**\r\n *\r\n * @class\r\n */\r\nLure.Content = class LureContent {\r\n    /** @namespace this.Controller */\r\n    /** @namespace this.Proto */\r\n    static get Version(){\r\n        return '0.3.1'\r\n    }\r\n\r\n    get FullName(){\r\n        let p = this.Parent;\r\n        let Name = this.Name;\r\n        while (p){\r\n            Name = p.Name +'.'+Name;\r\n            p = p.Parent;\r\n        }\r\n        return Name;\r\n    }\r\n\r\n    /** @private */\r\n    Props(){}\r\n    /** @private */\r\n    Methods(){}\r\n    /** @private */\r\n    AfterBuild(){}\r\n    /** @private */\r\n    BeforeBuild(){}\r\n\r\n    Show(e){\r\n        this._Show(e);\r\n    }\r\n    Hide(e){\r\n        if (this._Hide)\r\n            this._Hide(e);\r\n    }\r\n    Toggle(e){\r\n        if (this.isActive)\r\n            return this._Hide(e);\r\n        this._Show(e);\r\n    }\r\n    get isVisible(){\r\n        return Lure.isVisible(this.Content);\r\n    }\r\n\r\n\r\n    get Data(){\r\n        if (this.Controller)\r\n            return this.Controller.Data;\r\n        if (this.Proto)\r\n            return this.Proto.Data;\r\n        return null;\r\n    }\r\n    set Data(data){\r\n        if (this.Controller) {\r\n            this.Controller.Data = data;\r\n            return;\r\n        }\r\n        if (this.Proto) {\r\n            this.Proto.Data = data;\r\n        }\r\n    }\r\n    get State(){\r\n        return this.Proto.Data;\r\n    }\r\n    set State(NewData){\r\n        return this.Proto.Data = NewData;\r\n    }\r\n    /*get Items(){\r\n        if (this.Controller)\r\n            return this.Controller.Items;\r\n        return null;\r\n    }*/\r\n    RefreshOne(i){\r\n        if (this.Controller)\r\n            this.Controller.RefreshOne(i);\r\n    }\r\n    Add(Item, isPrepend){\r\n        if (this.Controller)\r\n            return this.Controller._Add(Item, isPrepend);\r\n    }\r\n    Edit(Line, Prop, Val){\r\n        if (this.Controller)\r\n            return this.Controller._Edit(Line, Prop, Val);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {int|object} Thing   index or Item\r\n     * @returns {Promise}\r\n     */\r\n    Remove(Thing){\r\n        if (this.Controller)\r\n            return this.Controller._Remove(Thing);\r\n    }\r\n\r\n    Refresh(Data){\r\n        return this._Refresh(Data);\r\n    }\r\n    GetIndex(HTMLElement) {\r\n        HTMLElement = this.Select(HTMLElement);\r\n        return Array.prototype.slice.call( HTMLElement.parentElement.children ).indexOf(HTMLElement);\r\n    }\r\n    AddEventListener(eventName, selector, func) {\r\n        Lure.AddEventListenerGlobal(eventName,selector,func, this.Content, this);\r\n    }\r\n    AddTutor(buttonTutorStarter) {\r\n        this.MonsieurTutor = new MonsieurTutor(this.Select(buttonTutorStarter), this.Content);\r\n    }\r\n    Dispose(){\r\n        this.Content.remove();\r\n        this.Control.Disactivate();\r\n        this.Content = null;\r\n        this.Control = null;\r\n        //TODO dispose all\r\n        //delete this.Controller;\r\n        //delete this.Control;\r\n    }\r\n    get Title(){\r\n        return this.TitleContent.innerHTML;\r\n    }\r\n    set Title(t){\r\n        this.TitleContent.innerHTML = t;\r\n    }\r\n    Select(query){\r\n        return Lure.Select(query, this.Content);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param query\r\n     * @returns {NodeList}\r\n     */\r\n    SelectAll(query){\r\n        return Lure.SelectAll(query, this.Content)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param Name\r\n     * @returns {Lure.LureContent}\r\n     */\r\n    GetParent(Name = 'root'){\r\n        let content = this;\r\n        while (content.Parent !== null && content.Name !== Name)\r\n            content = content.Parent;\r\n        return content;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param Name\r\n     * @returns {Lure.LureContent}\r\n     */\r\n    GetContent(Name = 'root') {\r\n        let parent = this.GetParent(Name);\r\n        if (parent.Name === Name || Name === 'root')\r\n            return parent;\r\n        let found = null;\r\n        if (Name === 'root')\r\n            return found;\r\n        function searcher(content) {\r\n            //let f = null;\r\n            for(let key in content){\r\n                if (content.hasOwnProperty(key) && key !== \"Parent\" && !!content[key] && content[key].isContent){\r\n                    if (content[key].Name === Name)\r\n                        return content[key];\r\n                    found = searcher(content[key]);\r\n                }\r\n            }\r\n            return found;\r\n        }\r\n        return searcher(parent);\r\n\r\n    };\r\n\r\n    isAncestor(LureContent){\r\n        if (!LureContent)\r\n            return false;\r\n        let p = LureContent.Parent;\r\n        while (p){\r\n            if (p === this){\r\n                return true;\r\n            }\r\n            p = p.Parent;\r\n        }\r\n        return false;\r\n    }\r\n    isDescendant(LureContent){\r\n        if (!LureContent)\r\n            return false;\r\n        let p = this.Parent;\r\n        while (p){\r\n            if (p === LureContent){\r\n                return true;\r\n            }\r\n            p = p.Parent;\r\n        }\r\n        return false;\r\n    }\r\n    GetSubContentList(){\r\n        return this._SubContentList.Where(x=>x.HasPermission);\r\n    }\r\n    ShowSubContent(SubContentName=''){\r\n        //calls for show first allowed subcontent with any type\r\n        //as a rule it calls if this.Content has no own content to show\r\n        if (SubContentName === ''){\r\n            const SubContentList = this._SubContentList.Where(x=>x.HasPermission && x.Type!=='Untyped');\r\n            const SubContent = SubContentList.FirstOrDefault();\r\n            if (SubContentList.Where(x=>x.isActive).length < 1 && SubContent && !SubContent.isActive)\r\n                SubContent.Show();\r\n        }\r\n        else{\r\n            this._SubContent[SubContentName].Show();\r\n        }\r\n\r\n    }\r\n    ChildrenBack(){\r\n        let Subs = this.GetSubContentList();\r\n        for (let i = 0; i < Subs.length; i++){\r\n            Subs[i].Target.appendChild(Subs[i].Content);\r\n        }\r\n    }\r\n    ChildrenRefresh(){\r\n        let Subs = this.GetSubContentList();\r\n        for  (let i = 0 ; i < Subs.length; i++){\r\n            if (Subs[i].isActive){{\r\n                Subs[i].Refresh();\r\n            }}\r\n        }\r\n    }\r\n\r\n    HasElementPermission(Element, Data){\r\n        let P = this._PermissionRules;\r\n        if (!P)\r\n            return true;\r\n        return P.HasPermissionElement(Element, Data);\r\n    }\r\n    HasElementWritePermission(Element, Data){\r\n        let P = this._PermissionRules;\r\n        if (!P)\r\n            return true;\r\n        return P.HasPermissionWriteElement(Element, Data);\r\n        /*if (!Element.attributes[this.Settings.Permission.Attribute]){\r\n            Element = Element.closest(`[${this.Settings.Permission.Attribute}]`)\r\n        }\r\n        if (Element === null)\r\n            return true;\r\n        let Rule = Element.attributes[this.Settings.Permission.Attribute].value.toLowerCase();\r\n        if (this.Settings.Permission.Rules[Rule]) {\r\n            return this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Write, Data);\r\n        }\r\n        return true;*/\r\n    }\r\n    get HasPermission(){\r\n        let P = this._PermissionRules;\r\n        if (!P)\r\n            return true;\r\n        return P.isAllow;\r\n    }\r\n    get HasPermissionWrite(){\r\n        let P = this._PermissionRules;\r\n        if (!P)\r\n            return true;\r\n        return P.isAllowWrite;\r\n    }\r\n\r\n\r\n    get _PermissionRules(){\r\n        let p = this;\r\n        while (p){\r\n            if (p._Permission)\r\n                return p._Permission;\r\n            p = p.Parent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    constructor(\r\n        {                                   //--Lure.Content Settings--\r\n                    Target     = null,              //{string, HTMLElement} - where to render       [by default this.Parent.Content];\r\n                    Content    = null,              //{string}  - html content string,              [by default this.Target.innerHTML]\r\n                    //TODO Override   = Lure.Settings.Content.Override,    //{bool} override Target.innerHTML by Content (for Root-content only)\r\n                    CSS        = '',                //{string}  - css classes string\r\n                    Name       = null,              //{string}  - Lure.Content's name. Need for search content by .GetContent(contentName)\r\n                    Route      = (p)=>{return this.Show(p)},\r\n                    Global     = false,             //{bool}    - actual for SubContent. Set true, if SubContent is outside of Parent\r\n                    Type       = \"Untyped\",         //{string}  - if has - this.Content will be invisible by default, if need be visible set next property:\r\n                    Visible    = undefined,         //{bool}    - make visible by default (if has no Type - visible by default)\r\n                    SubContent = [],                //{Array|function} of Lure.Content Settings\r\n                    Dialog     = false,             //{bool} - make dialog absolute window with dialog wrapper\r\n                    Load       = null,              //{string} - css selector where render Lure.Load\r\n                    BeforeHide = function(){},      //{function} - calls before .Hider and .Hide\r\n                    BeforeShow = function(){},      //{function} - calls before .Shower and .Show\r\n                    Show       = ()=>{},            //{function} - (after)show action\r\n                    Hide       = ()=>{},            //{function} - (after)hide action\r\n                    Animation  = null,\r\n                    Shower     = function(){this.Content.style.display = '';},       //custom show handler [calls before .Show]\r\n                    Hider      = function(){this.Content.style.display = 'none';},   //custom hide handler [calls before .Hide]\r\n\r\n                    Refresh    = function(data){\r\n                        if (this.Proto)\r\n                            this.Proto.Refresh();\r\n                        if (this.Controller)\r\n                            this.Controller.Refresh(data)\r\n                    },                              //{function} - refresh content, may be call on page resize for example\r\n                    Sort    = false,                //{object}   - sort controls by field like 'field' -> '{css|HTMLElement}'  ex.: { count: '.head .count'}\r\n                    Filter  = false,                //{object} - {\"PropertyToFilter\": \".QueryInputFilterElement\"}\r\n                    //Filtering  = false,           //{object}   - like sorting, but fast filter textbox would be\r\n                    OnClick    = null,              //{function} - [deprecated] this.Content.onclick event\r\n                    Proto      = {},                //{object}   - Refresh Templator Data Proto ex.: {Name: 'Hugo', Count: 42}\r\n                    State      = null,              //{object}   - Refresh Templator Data Proto ex.: {Name: 'Hugo', Count: 42}\r\n                    OnChange   = undefined,         //{promise}  - onchange fn (must return promise)\r\n                    PropTypes  = {},                //{object}   - types of Data or Proto properties. ex.: {Name: Lure.PropTypes.String, Count: Lure.PropTypes.Int}\r\n                    PropFormat = {},                //{object}   - delegates of Data.properties format. ex.:  DateProperty: (d)=>Lure.Date(d).Format('DD MMMM YYYY'),\r\n                    Controller = null,              //{object} controller settings(Templator or TreeBuilder)\r\n                    Control    = null,              //{object} (help upper)\r\n\r\n\r\n                    Permission = null,              //{object}  (help upper)\r\n                    Pre        = function(){},      //{function}  - recommended for extra fields  for Lure.Content (this.Field1 =...)\r\n                    Props      = function(){},      //{function}  - recommended for extra fields  for Lure.Content (this.Field1 =...)\r\n                    Methods    = function(){},      //{function}  - recommended for extra methods for Lure.Content (this.Method1 = function(){...} )\r\n                    GetSet     = {},                //{function}  - recommended for extra getters and setters for Lure.Content\r\n                    BeforeBuild = function(){},     //{function} - calls before Content init (before Proto init)\r\n            /** @private */\r\n                    AfterBuild = function(){},      //{function} - calls after Lure.Content init\r\n                    Disabled   = false,             //debugging,\r\n                    Parent     = null               //link to parent Lure.Content\r\n                }) {\r\n        if (Disabled)\r\n            return;\r\n        this.ID = Lure.GetID();\r\n        this.isContent = true;\r\n        this.isActive  = true;\r\n        this.isRoot    = true;\r\n        this.isGlobal  = Global;\r\n        this.isRouteable = Route !== null && Route !== false && Route !== void 0;\r\n\r\n        this._RouteParam = null;\r\n        if (this.isRouteable){\r\n            this._RouteParam = '';\r\n            this._OnRoute = Route.bind(this);\r\n            this.Route = (p)=>{\r\n                this._RouteParam = p;\r\n                this._OnRoute(p);\r\n            };\r\n        }\r\n        // this._RouteParam = null;\r\n        // if (Route){\r\n        //     this._RouteParam = '';\r\n        // }\r\n        /* Get default settings */\r\n        this.Settings = Lure.Clone(Lure.Settings.Content.Defaults.Settings);\r\n        /*Check For Permissions*/\r\n        if (Permission){\r\n            if (Permission.Attribute)\r\n                this.Settings.Permission.Attribute = Permission.Attribute;\r\n            this.Settings.Permission.Actions = Lure.Settings.Content.Defaults.Settings.Permission.Actions;\r\n            if (Permission.Actions){\r\n                for (let Act in Permission.Actions)\r\n                    if (Permission.Actions.hasOwnProperty(Act)){\r\n                        this.Settings.Permission.Actions[Act.toLowerCase()] = Permission.Actions[Act].bind(this);\r\n                    }\r\n            }\r\n            if (Permission.Action && typeof Permission.Action === 'string'){\r\n                if (this.Settings.Permission.Actions[Permission.Action]){\r\n                    this.Settings.Permission.Action = this.Settings.Permission.Actions[Permission.Action].bind(this);\r\n                }\r\n            }\r\n            else if (Permission.Action && typeof Permission.Action === 'function'){\r\n                this.Settings.Permission.Action = Permission.Action.bind(this);\r\n            }\r\n            else {\r\n                this.Settings.Permission.Action = Lure.Settings.Content.Defaults.Settings.Permission.Action;\r\n            }\r\n            if (Permission.Users)\r\n                this.Settings.Permission.Users = Permission.Users;\r\n            if (Permission.Roles)\r\n                this.Settings.Permission.Roles = Permission.Roles;\r\n            if (Permission.Write)\r\n                this.Settings.Permission.Write = Permission.Write;\r\n            if (Permission.Rules)\r\n                this.Settings.Permission.Rules = Permission.Rules;\r\n\r\n            if (Permission.Rules){\r\n                for (let R in Permission.Rules)\r\n                    if (Permission.Rules.hasOwnProperty(R)){\r\n                        this.Settings.Permission.Rules[R.toLowerCase()] = Permission.Rules[R];\r\n                    }\r\n            }\r\n            this._Permission = {\r\n                isAllow: true,\r\n                isAllowWrite: true,\r\n\r\n                CheckRole: (Role, Data)=>{\r\n                    if (Lure.GetType(Role) === 'number'){\r\n                        return  (Lure.User.Roles.indexOf(Role) > -1 || (Lure.User.SubRoles[Role] && Lure.User.SubRoles[Role].length > 0));\r\n                        //return  (Lure.User.Roles.indexOf(Role) > -1 || (Lure.User.SubRoles[Role] && Lure.User.SubRoles[Role].indexOf(-1) > -1));\r\n                    }\r\n                    else{\r\n                        for (let SubRoleProperty in Role){              //ex. Role = {'ID':1488} for proto, or {'.ID':228} for Controller item\r\n                            if (Role.hasOwnProperty(SubRoleProperty)){  //'ID'\r\n                                let RoleValue = Role[SubRoleProperty];  //1488\r\n                                if (Lure.User.SubRoles[RoleValue]){     //ex. Lure.User.SubRoles = {1488:[12,13,15], 228:[5,10,13],...}\r\n                                    let Obj;\r\n                                    let Property = SubRoleProperty;\r\n                                    if (SubRoleProperty.substring(0,1) === '.'){  // '.ID' - Controller.Data[i].ID\r\n                                        Obj = Data;\r\n                                        Property = SubRoleProperty.substring(1);\r\n                                    }\r\n                                    else {                                        //  'ID'  - Proto.Data.ID\r\n                                        Obj = this.Proto.Data;\r\n                                    }\r\n                                    let SubRoleValue = Lure.Object.GetProperty(Obj, Property);\r\n                                    let isOk = Lure.User.SubRoles[Role[SubRoleProperty]].indexOf(SubRoleValue) > -1 ||\r\n                                        Lure.User.SubRoles[Role[SubRoleProperty]].indexOf(-1) > -1 ;\r\n                                    if (isOk)\r\n                                        return isOk;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                CheckRoles: (RolesRequired, Data)=>{\r\n                    let isAllow = false;\r\n                    if (!RolesRequired || RolesRequired.length < 1 || RolesRequired.indexOf(-1) > -1){\r\n                        return true;\r\n                    }\r\n                    for (let i = 0; i < RolesRequired.length; i++){\r\n                        let Role = RolesRequired[i];\r\n                        if (this._Permission.CheckRole(Role, Data)){\r\n                            isAllow = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return isAllow;\r\n                },\r\n                CheckTheContent: ()=>{\r\n                    let RolesRequired = this.Settings.Permission.Roles;\r\n                    let isAllow = false;\r\n                    if (RolesRequired.length < 1 || RolesRequired.indexOf(-1) > -1){\r\n                        return true;\r\n                    }\r\n                    for (let i = 0; i < RolesRequired.length; i++){\r\n                        let Role = RolesRequired[i];\r\n                        if (this._Permission.CheckRole(Role)){\r\n                            isAllow = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isAllow && this.Settings.Permission.Action)\r\n                        this.Settings.Permission.Action.call(this);\r\n                    return isAllow;\r\n                },\r\n                CheckTheContentWrite: ()=>{\r\n                    let RolesRequired = this.Settings.Permission.Write;\r\n                    let isAllow = false;\r\n                    if (RolesRequired.length < 1 || RolesRequired.indexOf(-1) > -1){\r\n                        return true;\r\n                    }\r\n                    for (let i = 0; i < RolesRequired.length; i++){\r\n                        let Role = RolesRequired[i];\r\n                        if (this._Permission.CheckRole(Role)){\r\n                            isAllow = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return isAllow;\r\n                },\r\n\r\n                HideEdits: (Element)=>{\r\n                    let x = Lure.SelectAll('.l-edit-btn-edit, .l-edit-btn-remove', Element);\r\n                    for (let i = 0; i < x.length; i++){\r\n                        this.Settings.Permission.Actions.hide(x[i]);\r\n                    }\r\n                },\r\n                CheckRules: ()=>{\r\n                    let Rules = this.Settings.Permission.Rules;\r\n                    let Ruled = this.SelectAll(`[${this.Settings.Permission.Attribute}]`);\r\n                    for (let i = 0; i < Ruled.length; i++){\r\n                        this._Permission.CheckElement(Ruled[i]);\r\n                    }\r\n\r\n                },\r\n\r\n                Check: ()=>{\r\n                    if (this._isInit)\r\n                        ;//return;\r\n                    /* checking permission to lure content at all */\r\n                    let isAllow      = this._Permission.CheckTheContent();\r\n                    let isAllowWrite = isAllow && this._Permission.CheckTheContentWrite();\r\n\r\n                    if (isAllow /*&& !this._Permission.isAllow*/){\r\n                        if (this.Control._ControlList){\r\n                            for (let i = 0; i < this.Control._ControlList.length; i++){\r\n                                for (let j = 0; j < this.Control._ControlList[i].Control.length; j++){\r\n                                    this.Settings.Permission.Actions.show(this.Control._ControlList[i].Control[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (!isAllow && this._Permission.isAllow){\r\n                        this.Settings.Permission.Actions.hide(this.Content);\r\n                        if (this.Control._ControlList){\r\n                            for (let i = 0; i < this.Control._ControlList.length; i++){\r\n                                for (let j = 0; j < this.Control._ControlList[i].Control.length; j++){\r\n                                    this.Settings.Permission.Actions.hide(this.Control._ControlList[i].Control[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isAllowWrite /*&& !this._Permission.isAllowWrite*/){\r\n                        let x = this.SelectAll('.l-edit-btn-edit, .l-edit-btn-remove');\r\n                        for (let i = 0; i < x.length; i++){\r\n                            this.Settings.Permission.Actions.show(x[i]);\r\n                        }\r\n\r\n                    }\r\n                    else if (!isAllowWrite){\r\n                        let x = this.SelectAll('.l-edit-btn-edit, .l-edit-btn-remove');\r\n                        for (let i = 0; i < x.length; i++){\r\n                            this.Settings.Permission.Actions.hide(x[i]);\r\n                        }\r\n                    }\r\n                    this._Permission.isAllow      = isAllow;\r\n                    this._Permission.isAllowWrite = isAllowWrite;\r\n\r\n                    /* check in proto elements */\r\n                    let PermissionElements = this.SelectAll(`[${this.Settings.Permission.Attribute}]`);\r\n                    for (let i = 0; i < PermissionElements.length; i++){\r\n                        this._Permission.CheckElement(PermissionElements[i]);\r\n                    }\r\n                },\r\n\r\n                HasPermissionElement: (Element, Data) => {\r\n                    let Rule = Element.attributes[this.Settings.Permission.Attribute];\r\n                    if (!Rule)\r\n                        return true;\r\n                    Rule = Rule.value.toLowerCase();\r\n                    if (this.Settings.Permission.Rules[Rule]){\r\n                        return this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Roles, Data);\r\n                    }\r\n                },\r\n                HasPermissionWriteElement: (Element, Data) => {\r\n                    let Rule = Element.attributes[this.Settings.Permission.Attribute];\r\n                    if (!Rule)\r\n                        return true;\r\n                    Rule = Rule.value.toLowerCase();\r\n                    if (this.Settings.Permission.Rules[Rule]){\r\n                        return this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Write, Data);\r\n                    }\r\n                },\r\n                CheckElement: (Element, Data)=>{\r\n                    let Allow      = false;\r\n                    let AllowWrite = false;\r\n                    let Rule = Element.attributes[this.Settings.Permission.Attribute].value.toLowerCase();\r\n                    if (this.Settings.Permission.Rules[Rule]){\r\n                        Allow      = this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Roles, Data);\r\n                        AllowWrite = this._Permission.CheckRoles(this.Settings.Permission.Rules[Rule].Write, Data);\r\n                        if (!AllowWrite){\r\n                            this._Permission.HideEdits(Element);\r\n                            if (this.Settings.Permission.Rules[Rule].ActionWrite){\r\n                                this.Settings.Permission.Rules[Rule].ActionWrite.call(this, Element);\r\n                            }\r\n                        }\r\n                        if (!Allow){\r\n                            let Act = this.Settings.Permission.Rules[Rule].Action ? this.Settings.Permission.Rules[Rule].Action : this.Settings.Permission.DefaultAction;\r\n                            if (typeof Act === 'string'){\r\n                                this.Settings.Permission.Actions[Act](Element);\r\n                            }\r\n                            else if (typeof Act === 'function'){\r\n                                Act.call(this, Element);\r\n                            }\r\n                        }else{\r\n                            this.Settings.Permission.Actions.show(Element);\r\n                        }\r\n                    }\r\n                },\r\n                CheckLine: (DOMLine, Data)=>{\r\n                    if (DOMLine.attributes[this.Settings.Permission.Attribute] /*&& !this._Permission.isAllow*/){\r\n                        this._Permission.CheckElement(DOMLine, Data);\r\n                    }\r\n                    let Elements = Lure.SelectAll(`[${this.Settings.Permission.Attribute}]`, DOMLine);\r\n                    for (let i = 0; i < Elements.length; i++){\r\n                        this._Permission.CheckElement(Elements[i], Data);\r\n                    }\r\n                    if (!this._Permission.isAllowWrite){\r\n                        let x = Lure.SelectAll('.l-edit-btn-edit, .l-edit-btn-remove', DOMLine);\r\n                        for (let i = 0; i < x.length; i++){\r\n                            //let ClosestPerm = x[i].closest(`[${this.Settings.Permission.Attribute}]`);\r\n                            //if (!ClosestPerm || !this._Permission.HasPermissionWriteElement(ClosestPerm))\r\n                            this.Settings.Permission.Actions.hide(x[i]);\r\n                        }\r\n                    }else{\r\n                        // let x = Lure.SelectAll('.l-edit-btn-edit, .l-edit-btn-remove', DOMLine);\r\n                        // for (let i = 0; i < x.length; i++){\r\n                        //     this.Settings.Permission.Actions.show(x[i]);\r\n                        // }\r\n                    }\r\n                    return DOMLine;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        function _Init(initParent = Parent, initTarget = Target, initName = Name) {\r\n            this.Name   = this.Name   ? this.Name   : initName;\r\n            this.Parent = this.Parent ? this.Parent : initParent;\r\n            this.Type = Type;\r\n\r\n\r\n            if (this.isRoot){\r\n                Lure.ContentList._Root.push(this);\r\n            }\r\n\r\n            this.Control = new Lure._Content.Control(Control, this);\r\n            if (Lure.Settings.Content.Permission.Strict && this._Permission){\r\n                //this.Content = document.createElement('div');\r\n                this._Permission.Check();\r\n            }\r\n            if (Lure.Settings.Content.Permission.Strict && this._Permission && !this._Permission.isAllow){\r\n                this.isActive = false;\r\n                return;\r\n            }\r\n            if (Lure.Settings.Content.Permission.Strict && this.Parent && this.Parent._Permission && !this.Parent._Permission.isAllow){\r\n                this.isActive = false;\r\n                return;\r\n            }\r\n            /* Check Parent */\r\n            if (this.Parent) {\r\n                /*if (this.Name) {\r\n                    if (this.Parent[this.Name]) {\r\n                        Lure.System.ShowWarn(`[Lure.Content] Content's child name (${this.Name}) is already used!`);\r\n                        console.warn(`[Lure.Content] Content's child name (${this.Name}) is already used!`)\r\n                    }\r\n                    this.Parent[this.Name] = this;\r\n                }*/\r\n                this.Target = Global ? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\r\n                this.Target = this.Target ? this.Target : this.Parent.Content\r\n            }\r\n            this.Target = this.Target ? this.Target : Lure.Select(Target);\r\n            if (!this.Target){\r\n                Lure.System.ShowError('[Lure.Content] Target is not defined');\r\n                console.error( new Error('[Lure.Content] Target is not defined'), '\\n',Content );\r\n                return null;\r\n            }\r\n\r\n\r\n            /* Check Content */\r\n            try{\r\n                if (!Content) {                          //null or empty\r\n                    this.Content = this.Target;\r\n                    construct.call(this);\r\n                }\r\n                else if (Content.match(/<[^>]+>/) === null) {    //not DOM string (file path)\r\n                    Lure.GetFileText(Content)\r\n                        .then(x => {\r\n                            ContentPrepare.call(this, x);\r\n                            construct.call(this);\r\n                        })\r\n                        .catch(() => {\r\n                            Lure.System.Error(`[Lure.Content] Error. Can not get file`);\r\n                        });\r\n                }\r\n                else {\r\n                    if (!ContentPrepare.call(this, Content)){\r\n                        return null;\r\n                    }\r\n                    construct.call(this);\r\n                }\r\n            }\r\n            catch (e){\r\n                console.error(e, this.ID, this);\r\n            }\r\n\r\n\r\n            /* Check SubContents */\r\n            for (let prop in this){\r\n                /*if (this[prop] === null)\r\n                    debugger;*/\r\n                if (this.hasOwnProperty(prop) && !GetSet.hasOwnProperty(prop) && prop !== 'Parent'  && this[prop] && this[prop].isContent){\r\n                    if (this[prop]._Init)\r\n                        this[prop]._Init();\r\n                }\r\n            }\r\n            this._Init = null;\r\n        }\r\n        this._SubContent = {};\r\n        this._SubContentList = [];\r\n        this._isInit = true;\r\n        this._Init = ()=>{ _Init.call(this)};\r\n        //debugger;\r\n        if ((Lure.Settings.Content.AutoInit && !Disabled) || (Lure.Application.isRun && !Disabled) ) {\r\n            //console.log('instant init', Content);\r\n            this._Init();\r\n        }else{\r\n            if (Parent && Name){\r\n                Parent[Name] = this;\r\n                this.Parent = Parent;\r\n                this.Parent._SubContent[Name] = this;\r\n                this.Parent._SubContentList.push(this);\r\n            }\r\n            if (SubContent && Lure.GetType(SubContent) === 'function'){\r\n                SubContent.call(this);\r\n                SubContent = null;\r\n                //this._SubContentNames = [];\r\n                for (let prop in this){\r\n                    if (this.hasOwnProperty(prop) && prop && prop !== 'Parent' && this[prop] && this[prop].isContent){\r\n                        this[prop].isRoot = false;\r\n                        this[prop].Name   = this[prop].Name   ? this[prop].Name   : prop;\r\n                        this[prop].Parent = (this[prop].Parent && !this[prop].Parent.isRoot) ? this[prop].Parent : this;\r\n                        this._SubContent[this[prop].Name] = this[prop];\r\n                        this._SubContentList.push(this[prop]);\r\n                        //this._SubContentNames.push(this[prop].Name)\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* Initializing functions */\r\n        /**\r\n         *\r\n         * @param Content\r\n         * @returns {boolean}\r\n         */\r\n        function ContentPrepare(Content) {\r\n            /* Init pre-build Properties */\r\n            BeforeBuild.call(this);\r\n            Pre.call(this);\r\n\r\n\r\n            this.Controller = {\r\n                Data: [],\r\n                Refresh: ()=>{}\r\n            };\r\n\r\n\r\n            /* Shell PropFormat if undefined*/\r\n            for (let k in PropFormat){\r\n                if (PropFormat.hasOwnProperty(k)){\r\n                    let fn = PropFormat[k];\r\n                    PropFormat[k] = function (a,b) {\r\n                        if (typeof a === 'undefined' && (!b || Object.keys(b).length < 1)){\r\n                            return Lure.Settings.Controller.Common.Undefined\r\n                        }\r\n                        return fn.call(this, a,b);\r\n                    }\r\n                    /*\r\n                    TODO support async PropFormat\r\n                    let fn = PropFormat[k];\r\n                    if (PropFormat[k].constructor !== 'AsyncFunction'){\r\n                        PropFormat[k] = function (a,b) {\r\n                            if (typeof a === 'undefined' && (!b || Object.keys(b).length < 1)){\r\n                                return Lure.Settings.Controller.Common.Undefined\r\n                            }\r\n                            return fn.call(this, a,b);\r\n                        }\r\n                    }\r\n                    else{\r\n                        PropFormat[k] = async function (a,b) {\r\n                            if (typeof a === 'undefined' && (!b || Object.keys(b).length < 1)){\r\n                                return Lure.Settings.Controller.Common.Undefined\r\n                            }\r\n                            return await fn.call(this, a,b);\r\n                        }\r\n\r\n                    }\r\n                    */\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            /* Check for Refresh Proto */\r\n            if (Proto) {\r\n                if (State)\r\n                    Proto = State;\r\n                this.Proto = new Lure.Controller.TemplatorProto({\r\n                    Target: this.Target,\r\n                    Content: Content,\r\n                    Data: Proto,\r\n                    OnChange: OnChange,\r\n                    PropTypes: PropTypes,\r\n                    PropFormat: PropFormat,\r\n                    Owner: this\r\n                });\r\n                this.Content       = this.Proto._SmartRender.GenElement(Proto, {RenderAnyway: true, Controller: this.Proto});\r\n                this.Proto.Context = this.Proto._SmartRender.GetContext(this, this.Content);\r\n                this.Proto.Content = this.Content;\r\n            }\r\n            if (!this.Content) {\r\n                Lure._Content.ContentGet(Content, this);\r\n            }\r\n            try{\r\n                this.Target.appendChild(this.Content);\r\n            }\r\n            catch (e){\r\n                //let err = new Error(`Content target \"${Target}\" not found in Content \"${this.Name}\"`,);\r\n                Lure.System.Error(`[Lure.Content] Error: Content target \"${Target}\" not found in Content \"${this.Name}\"`, '\\n', this);\r\n                return false;\r\n                //throw err;\r\n            }\r\n\r\n            /////\r\n            if (this.Content === null || this.Target === null) {\r\n                this.isContent = false;\r\n                Lure.System.Error(`[Lure.Content] Target or Content of Content.Name = \"${this.Name}\" is null!`);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        function construct() {\r\n\r\n\r\n            /* Check included CSS (experimental) */\r\n            if (CSS !== '') {\r\n                let node = document.createElement('style');\r\n                node.innerHTML = CSS;\r\n                document.body.appendChild(node);\r\n            }\r\n\r\n\r\n            /* Check content for Dialog type */\r\n            if (Dialog) {\r\n                this.Content.classList.add(Lure.Settings.Content.CSSDialog);\r\n                if (!Visible){\r\n                    this.isActive = false;\r\n                    Hider.call(this);\r\n                }\r\n                // if (Name === 'RequestSender' )\r\n                //     debugger;\r\n\r\n                /* check default settings */\r\n                if (typeof Dialog.Wrapper !== 'undefined')\r\n                    this.Settings.Dialog.Wrapper = Dialog.Wrapper;\r\n                if (typeof Dialog.Blur !== 'undefined')\r\n                    this.Settings.Dialog.Blur = Dialog.Blur;\r\n                if (typeof Dialog.Animation !== 'undefined') {\r\n                    if (typeof Dialog.Animation.Show !== 'undefined')\r\n                        this.Settings.Dialog.Animation.Show = Dialog.Animation.Show;\r\n                    if (typeof Dialog.Animation.Hide !== 'undefined')\r\n                        this.Settings.Dialog.Animation.Hide = Dialog.Animation.Hide;\r\n                }\r\n                else {\r\n                    //this.Settings.Dialog.Animation.Show = '';\r\n                    //this.Settings.Dialog.Animation.Hide = '';\r\n                }\r\n            } else { this.Settings.Dialog = null;}\r\n\r\n            /* Check Loader*/\r\n            if (Load !== null){\r\n                if (Load === ''){\r\n                    this.Load = new Lure.Load({Target: this.Content});\r\n                }\r\n                else{\r\n                    this.Load = new Lure.Load({Target: this.Select(Load)});\r\n                }\r\n            }else{\r\n                this.Load = {Show:()=>{}, Hide: ()=>{}}\r\n            }\r\n\r\n\r\n            /* Check Animation */\r\n            if (Animation) {\r\n                if (typeof Animation.Show !== 'undefined')\r\n                    this.Settings.Animation.Show = Animation.Show;\r\n                if (typeof Animation.Hide !== 'undefined')\r\n                    this.Settings.Animation.Hide = Animation.Hide;\r\n            }\r\n            else if (!Animation && Dialog) {\r\n                this.Settings.Animation = this.Settings.Dialog.Animation;\r\n            }\r\n            //fixme to core fn\r\n            //this.Settings.Animation._DurationShow = Lure.Plugin.Content.Core.GetDurationAnimation(this, 0);\r\n            //this.Settings.Animation._DurationHide = Lure.Plugin.Content.Core.GetDurationAnimation(this, 1);\r\n            this.Settings.Animation._DurationShow = Lure.GetDurationAnimation(this.Settings.Animation.Show, this.Content);\r\n            this.Settings.Animation._DurationHide = Lure.GetDurationAnimation(this.Settings.Animation.Hide, this.Content);\r\n\r\n\r\n\r\n\r\n            /* Init Extra Properties */\r\n            Props.call(this);\r\n\r\n            /* Init Extra Methods */\r\n            Methods.call(this);\r\n\r\n            /* Init Extra Getters and Getters*/\r\n            let GetSetNames = [];\r\n            for (let k in GetSet) {\r\n                if (!GetSet.hasOwnProperty(k))\r\n                    continue;\r\n                GetSetNames.push(k);\r\n                Object.defineProperty(this, k, Object.getOwnPropertyDescriptor(GetSet, k));\r\n            }\r\n\r\n            /* Sort */\r\n            if (Sort){\r\n                this.Sort = {\r\n                    /** @this LureContent */\r\n                    _Reset: ()=>{\r\n\r\n                        let SorterIcons = this.SelectAll('.l-sorter-up, .l-sorter-down');\r\n                        for (let i = 0; i < SorterIcons.length; i++){\r\n                            SorterIcons[i].classList.remove('l-sorter-up');\r\n                            SorterIcons[i].classList.remove('l-sorter-down');\r\n                        }\r\n                    }\r\n                };\r\n                for (let SortProp in Sort){\r\n                    if (!Sort.hasOwnProperty(SortProp)){\r\n                        continue;\r\n                    }\r\n                    this.Sort[SortProp] = {\r\n                        Target: this.Select(Sort[SortProp]),\r\n                        Delegate: (a,b)=>{\r\n                            // if (this.Controller.PropTypes[SortProp]){\r\n                            //     Lure.PropTypes.CheckProp(a, this.Controller.PropTypes[SortProp], SortProp);\r\n                            //     Lure.PropTypes.CheckProp(a, this.Controller.PropTypes[SortProp], SortProp);\r\n                            // }\r\n                            // let ValueA = Lure.Object.GetProperty(a, SortProp);\r\n                            // let ValueB = Lure.Object.GetProperty(b, SortProp);\r\n\r\n                            let ValueA = Lure.Object.GetProperty(a, SortProp);\r\n                            let ValueB = Lure.Object.GetProperty(b, SortProp);\r\n                            if (this.Controller.PropTypes[SortProp]){\r\n                                ValueA = Lure.PropTypes.TryParse(this.Controller.PropTypes[SortProp], Lure.Object.GetProperty(a, SortProp), SortProp);\r\n                                ValueB = Lure.PropTypes.TryParse(this.Controller.PropTypes[SortProp], Lure.Object.GetProperty(b, SortProp), SortProp);\r\n                            }\r\n                            else if (ValueA.localeCompare) { //if string\r\n                                return ValueA.localeCompare(ValueB, Lure.Settings.LocaleSort);\r\n                            }\r\n\r\n                            if (ValueA > ValueB)\r\n                                return 1;\r\n                            if (ValueA < ValueB)\r\n                                return -1;\r\n                            return 0;\r\n                        },\r\n                    };\r\n                    this.Sort[SortProp].Target.classList.add('l-pointer');\r\n                    this.Sort[SortProp].Target.classList.add('l-rel');\r\n                    this.Sort[SortProp].Target.innerHTML = this.Sort[SortProp].Target.innerHTML  + `<div class=\"l-abs l-sorter\"></div>`;\r\n                    this.Sort[SortProp].Target.addEventListener('click', (e)=>{\r\n                        let SorterIcon = Lure.Select('.l-sorter', e.currentTarget);\r\n                        let isSortReverse = SorterIcon.classList.contains('l-sorter-down');\r\n                        this.Sort._Reset();\r\n                        this.Controller._Sort(isSortReverse ? null: this.Sort[SortProp].Delegate)\r\n                            .then(Invert=>{\r\n                                if (isSortReverse)\r\n                                    return;\r\n                                if (Invert > 0)\r\n                                    SorterIcon.classList.add('l-sorter-up');\r\n                                else\r\n                                    SorterIcon.classList.add('l-sorter-down');\r\n                            })\r\n                    });\r\n\r\n                }\r\n            }\r\n\r\n            /* Init private methods */\r\n            this._Refresh = Refresh.bind(this);\r\n\r\n\r\n            /* Init Show function */\r\n            let ToggleTimer = null;\r\n            //this._BeforeShow = BeforeShow.bind(this);\r\n            this._Shower = Shower.bind(this);\r\n            this._Hider =  Hider.bind(this);\r\n            this._Show = (event, CalledByChild=false) => {\r\n                if (this._Permission && !this._Permission.isAllow) {\r\n                    return;\r\n                }\r\n\r\n                this.isActive = true;\r\n                if (this.Control)\r\n                    this.Control.Activate();\r\n\r\n                /* Hide same contents */\r\n                if (this.Type !== \"Untyped\" /*&& !this.isVisible*/) {\r\n                    Lure.ContentList[this.Type].forEach((item) => {\r\n                        if (item !== this && item.isActive)\r\n                            item.Hide();\r\n                    });\r\n                }\r\n                if (!this.isGlobal && this.Parent && !this.Parent.isVisible && (!this.Parent._Permission || this.Parent._Permission.isAllow) ){\r\n                    Lure.Route.LockParent = true;\r\n                    this.Parent._Show(null, true);\r\n                    Lure.Route.LockParent = false;\r\n                }\r\n                //this timeout doesn't start until another contents would be hidden;\r\n                window.setTimeout(()=>{\r\n                    /* Route*/\r\n                    if (Lure.Route.Enabled && this.isRouteable && !Lure.Route.Lock && this.Name){\r\n                        Lure.Route.Lock = true;\r\n                        if (!Lure.Route.LockParent){\r\n                            Lure.Route.Push(this);\r\n                            Lure._Content.Current = this;\r\n                        }\r\n                        Lure.Route.Lock = false;\r\n                    }\r\n\r\n                    /* Check content for Dialog type */\r\n                    if (this.Settings.Dialog) {\r\n                        let zIndex = Lure._Dialog.zIndex;\r\n                        Lure._DialogCount++;\r\n                        this.Content.style.zIndex = zIndex + 2;\r\n                        if (this.Settings.Dialog.Wrapper) {\r\n                            if (!this._DialogWrapper)\r\n                                this._DialogWrapper = Lure.CreateElementFromString(`<div class=\"${Lure.Settings.Content.CSSDialogWrapper}\">`);\r\n                            this._DialogWrapper.addEventListener('click', this._Hide);\r\n\r\n                            // let WrapperTarget = document.body;\r\n                            // if (this.Settings.Dialog.Wrapper.Target)\r\n                            //     WrapperTarget = Lure.Select(this.Settings.Dialog.Wrapper.Target);\r\n                            this.Target.appendChild(this._DialogWrapper);\r\n                            this._DialogWrapper.style.zIndex = zIndex + 1;\r\n\r\n                            /*let zIndexWrapper = parseInt(window.getComputedStyle(this._DialogWrapper).zIndex);\r\n                             let zIndexContent = parseInt(window.getComputedStyle(this.Content).zIndex);\r\n                             if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper)\r\n                             this.Content.style.zIndex = zIndexWrapper + 1;\r\n                             */\r\n                        }\r\n                        if (this.Settings.Dialog.Blur) {\r\n                            this._DialogWrapper.style.background = 'none';\r\n                            Lure.Select(this.Settings.Dialog.Blur).classList.add(Lure.Settings.Content.CSSBlur);\r\n                        }\r\n                        Lure._Dialog.Add(this.Content)\r\n                    }\r\n                    ToggleTimer = Lure.AsyncToggle(\r\n                        this,\r\n                        event,\r\n                        this.Content,\r\n                        function () {\r\n                            if (!CalledByChild){\r\n                                BeforeShow.call(this, event);\r\n                            }\r\n                            this._Shower.call(this);\r\n                        },\r\n                        CalledByChild ? ()=>{} : Show,\r\n                        this.Settings.Animation.Hide,\r\n                        this.Settings.Animation.Show,\r\n                        this.Settings.Animation._DurationShow,\r\n                        ToggleTimer\r\n                    );\r\n                }, 0);\r\n\r\n\r\n\r\n            };\r\n            this._Hide = (event) => {\r\n                this.isActive = false;\r\n                if (this.Control)\r\n                    this.Control.Disactivate();\r\n\r\n                /* Route*/\r\n                //Lure.Route.Back();\r\n                /*if (Lure.Route.Enabled && this.Name){\r\n                    Lure.Route.Lock = true;\r\n                    let h = '';\r\n                    let p = this.Parent;\r\n                    while(p){\r\n                        h = p.Name + '/' + h;\r\n                        p = p.Parent;\r\n                    }\r\n                    \r\n                    window.location.hash = h;\r\n                    Lure.Route.Lock = false;\r\n                }*/\r\n\r\n                if (Dialog) {\r\n                    Lure._Dialog.Remove(this.Content);\r\n                    Lure._DialogCount--;\r\n                    if (this.Settings.Dialog.Wrapper && this._DialogWrapper) {\r\n                        this._DialogWrapper.remove();\r\n                    }\r\n                    if (this.Settings.Dialog.Blur && Lure._DialogCount < 1)\r\n                        Lure.Select(this.Settings.Dialog.Blur).classList.remove(Lure.Settings.Content.CSSBlur);\r\n                }\r\n\r\n                ToggleTimer = Lure.AsyncToggle(\r\n                    this,\r\n                    event,\r\n                    this.Content,\r\n                    BeforeHide,\r\n                    function () {\r\n                        this._Hider.call(this);\r\n                        Hide.call(this, event);\r\n                    },\r\n                    this.Settings.Animation.Show,\r\n                    this.Settings.Animation.Hide,\r\n                    this.Settings.Animation._DurationHide,\r\n                    ToggleTimer\r\n                );\r\n            };\r\n\r\n\r\n\r\n            this.__private = {};\r\n\r\n            this.Content.onclick = OnClick ? OnClick.bind(this) : this.Content.onclick;\r\n            /* SubContent */\r\n            if (Array.isArray(SubContent)) {\r\n                for (let i = 0; i < SubContent.length; i++) {\r\n                    {\r\n                        if (!SubContent[i].Parent)\r\n                            SubContent[i].Parent = this;\r\n                        //  this.__private.ContentNames.push(SubContent[i].Name);\r\n                        this[SubContent[i].Name] = new Lure.Content(SubContent[i]);\r\n                        this._SubContent[SubContent[i].Name] = this[SubContent[i].Name];\r\n                        this._SubContentList.push(this[SubContent[i].Name]);\r\n\r\n                    }\r\n                }\r\n            }\r\n            else if (SubContent instanceof Function){\r\n                SubContent.call(this);\r\n            }\r\n            else {\r\n                for (let cname in SubContent) {\r\n                    SubContent[cname].Parent = this;\r\n                    SubContent[cname].Name = cname;\r\n                    //       this.__private.ContentNames.push(cname);\r\n                    this[cname] = new Lure.Content(SubContent[cname]);\r\n                    this._SubContent[cname] = this[cname];\r\n                    this._SubContentList.push(this[cname]);\r\n                }\r\n            }\r\n            //title\r\n\r\n\r\n\r\n\r\n            if ((Type === \"Untyped\" && Visible !== false) && !Dialog)\r\n                Visible = true;\r\n            else if ((Type !== \"Untyped\" && Visible !== true) || ( Dialog && Visible !== true))\r\n                Visible = false;\r\n\r\n            //if (Typed) Content is Visible\r\n            if (Visible) {\r\n                this._Shower.call(this);\r\n                this.isActive = true;\r\n                if (this.Control)\r\n                    this.Control.Activate();\r\n            }\r\n            else { //not undefined\r\n                this.isActive = false;\r\n                this._Hider.call(this);\r\n            }\r\n            if (Controller) {\r\n                if (Controller.isController) {\r\n                    this.Controller = Controller;\r\n                    this.Controller.Owner = this;\r\n                    this.Controller.PropTypes  = PropTypes;\r\n                    this.Controller.PropFormat = PropFormat;\r\n                }\r\n                else {\r\n                    if (!Controller.Target)\r\n                        Controller.Target = this.Content;\r\n                    if (!Controller.Type)\r\n                        Controller.Type = 'Templator';\r\n                    Controller.Owner = this;\r\n                    Controller.PropTypes  = PropTypes;\r\n                    Controller.PropFormat = PropFormat;\r\n                    this.Controller = new Lure.Controller[Controller.Type](Controller);\r\n                }\r\n\r\n            }\r\n\r\n            /* Init Ending */\r\n\r\n            /* Register Content */\r\n            if (!Lure.ContentList[this.Type]) //create new list of this type if haven't exist yet\r\n                Lure.ContentList[this.Type] = [];\r\n            Lure.ContentList[this.Type].push(this);\r\n            Lure._Content.List.push(this);\r\n            // By ID\r\n            Lure._Content.ByID[this.ID] = this;\r\n            // By Name\r\n            if (this.Name)\r\n                Lure._Content.ByName[this.Name] = this;\r\n            // By Type\r\n            if (!Lure._Content.ByType[this.Type])\r\n                Lure._Content.ByType[this.Type] = [];\r\n            Lure._Content.ByType[this.Type].push(this);\r\n            /* Init Close button */\r\n            let ButtonClose = this.Content.children\r\n                .Where(x=>x.classList.contains('close'))\r\n                .FirstOrDefault();\r\n            if (ButtonClose){\r\n                ButtonClose.addEventListener('click', this._Hide)\r\n            }\r\n            /*Array.from(this.Content.children).forEach(function (item) {\r\n                if (item.classList.contains(\"close\"))\r\n                    item.onclick = function (e) {\r\n                        this.Hide(e);\r\n                    }\r\n            });*/\r\n            //binding this\r\n            for (let key in this) {\r\n                if (!this.hasOwnProperty(key) || GetSetNames.indexOf(key) > -1 ) //for won't call getter below\r\n                    continue;\r\n                if (key !== '_Init' && this[key] instanceof Function) {\r\n                    this[key] = this[key].bind(this);\r\n                }\r\n                else if (key && key !== 'Parent' && this[key] instanceof Lure.Content) {\r\n                    this[key].Parent = this[key].Parent ? this[key].Parent : this;\r\n                    this[key].Name   = this[key].Name ? this[key].Name : key;\r\n                }\r\n            }\r\n            //if (this.Name === 'Details') debugger;\r\n            if (this.Proto)\r\n                this.Proto.Refresh();\r\n            if (this.Controller && !this.Controller._NoBuild)\r\n                this.Controller.Refresh();\r\n            setTimeout(function () {\r\n                this._isInit = false;\r\n                AfterBuild.call(this);\r\n            }.bind(this), 1);\r\n        }\r\n\r\n\r\n\r\n\r\n        if (Parent === null)\r\n            Lure.Application.Content.push(this);\r\n    }\r\n\r\n\r\n\r\n};\r\nLure._Content = {\r\n    Control: class LureControl{\r\n        Activate(type){\r\n            if (type){\r\n                return this[type].Activate();\r\n            }\r\n            if (this._ControlList)\r\n                for (let i = 0; i < this._ControlList.length; i++){\r\n                    this._ControlList[i].Activate();\r\n                }\r\n        }\r\n        Disactivate(type){\r\n            if (type){\r\n                return this[type].Disactivate();\r\n            }\r\n            if (this._ControlList)\r\n                for (let i = 0; i < this._ControlList.length; i++){\r\n                    this._ControlList[i].Disactivate();\r\n                }\r\n\r\n            /*for (let k in this)\r\n                if (this[k].Type === type)\r\n                {\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.remove('active');\r\n                    });\r\n                    if (this[k].isGlobal)\r\n                        Lure.SelectAll(this[k]._Content).forEach(function(item){\r\n                            item.classList.remove('active');\r\n                        })\r\n                }*/\r\n        }\r\n        constructor(controls, owner){\r\n            if (!controls || (controls.length  < 1 && !controls.Target))\r\n                return;\r\n            const BuildControl = (c)=>{\r\n                let con = {\r\n                    Control: Lure.SelectAll(c.Target),\r\n                    Type: c.Type ? c.Type : \"Untyped\",\r\n                    isGlobal: !!c.Global,\r\n                    OnClick: c.OnClick ? c.OnClick.bind(owner) : owner.Show,\r\n                    OnChange: c.OnChange,\r\n                    Activate(){\r\n                        let cs = this.Control;\r\n                        if (this.isGlobal){\r\n                            cs = Lure.SelectAll(this._query, owner.Content);\r\n                        }\r\n                        for (let j = 0; j < cs.length; j++){\r\n                            cs[j].classList.add('active');\r\n                        }\r\n                    },\r\n                    Disactivate(){\r\n                        let cs = this.Control;\r\n                        if (this.isGlobal){\r\n                            cs = Lure.SelectAll(this._query, owner.Content);\r\n                        }\r\n                        for (let j = 0; j < cs.length; j++){\r\n                            cs[j].classList.remove('active');\r\n                        }\r\n                    },\r\n                    _query: c.Target\r\n                };\r\n\r\n                if (con.isGlobal){\r\n                    Lure.AddEventListenerGlobal('click', c.Target, con.OnClick, document, owner);\r\n                    if (con.OnChange)\r\n                        Lure.AddEventListenerGlobal('change', c.Target, con.OnChange, document, owner);\r\n                }\r\n                else {\r\n                    let Clicks = Lure.SelectAll(c.Target);\r\n                    for (let j = 0; j < Clicks.length; j++){\r\n\r\n                        Clicks[j].classList.add('l-control');\r\n                        Clicks[j].addEventListener('click', con.OnClick.bind(owner));\r\n                        if (con.OnChange)\r\n                            Clicks[j].addEventListener('click', con.OnChange.bind(owner));\r\n                    }\r\n                }\r\n\r\n                this._ControlList.push(con);\r\n                if (con.Type !== 'Untyped')\r\n                    this[con.Type] = con;\r\n            };\r\n            this._ControlList = [];\r\n            for (let i = 0; i < controls.length; i++){\r\n\r\n                let c = controls[i];\r\n                //console.log(owner.Name, c.Target);\r\n                BuildControl(c);\r\n            }\r\n            if (controls.Target){\r\n                BuildControl(controls);\r\n            }\r\n\r\n\r\n            //return;\r\n            /*\r\n            if (control.length > 0) //if control list not empty\r\n            {\r\n                let controls = this;\r\n                for (let i = 0; i < control.length; i++)\r\n                {\r\n                    if (!control[i].Name)\r\n                        control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\r\n                    controls[control[i].Name] = {\r\n                        Content: Lure.SelectAll(control[i].Target),\r\n                        _Content: control[i].Target,\r\n                        Type: control[i].Type ? control[i].Type : \"Untyped\",\r\n                        isGlobal: control[i].Global,\r\n                        OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\r\n                        OnChange: control[i].OnChange,\r\n                        Active: function(){\r\n                            //let Clickers = Lure.SelectAll(control[i].Target);\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.add('active');\r\n                            })\r\n                        },\r\n                        Disactive: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                        }\r\n\r\n                    };\r\n                    //onclick\r\n                    controls[control[i].Name].Content.forEach(function (item) {\r\n                        item.classList.add('pointer');\r\n                    });\r\n                    if (control[i].Global){\r\n\r\n                        Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                            e.target.classList.add('active');\r\n                            if (controls[control[i].Name].OnClick)\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                        });\r\n                    }\r\n                    else{\r\n                        controls[control[i].Name].Content.forEach(function (item) {\r\n                            item.onclick = function (e) {\r\n                                Lure.ContentList[owner.Type].forEach((item) =>\r\n                                {\r\n                                    if ((item) !== owner)\r\n                                    {\r\n                                        if (item.Control)\r\n                                            item.Control.Disactive();\r\n                                    }\r\n                                });\r\n                                //console.log('remover', e);\r\n                                controls[control[i].Name].Content.forEach(function (item) {\r\n                                    item.classList.remove('active');\r\n                                });\r\n                                e.currentTarget.classList.add('active');\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                            };\r\n\r\n                        })\r\n                    }\r\n\r\n                    if (control[i].OnChange)\r\n                    {\r\n                        if (control[i].Global){\r\n                            Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\r\n                                control[i].OnChange.call(owner, e);\r\n                            } )\r\n                        }\r\n                        else{\r\n                            controls[control[i].Name].Content.forEach(function (item) {\r\n                                item.onchange = function (e) {\r\n                                    control[i].OnChange.call(owner, e);\r\n                                };\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }*/\r\n        }\r\n    },\r\n    ContentGet: function (DOMString, self) {\r\n        try{\r\n            const Contentos = Lure.CreateElementsFromString(DOMString);\r\n            if (Contentos.length > 1){\r\n                self.Content = self.Target;\r\n                for (let i = 0; i < Contentos.length; i++){\r\n                    self.Content.appendChild(Contentos[i]);\r\n                }\r\n            }\r\n            else{\r\n                self.Content = Contentos[0];\r\n            }\r\n        }\r\n        catch(e) {\r\n            Lure.System.Error(`[Lure.Content] ContentGet Error. ${self.Name} ` + e);\r\n        }\r\n\r\n    },\r\n\r\n\r\n    Permission: {\r\n\r\n    },\r\n\r\n    Current: null,\r\n    List: [],\r\n    ByID: {},\r\n    ByName: {},\r\n    ByType: {},\r\n\r\n};\r\nLure.Settings.Content = {\r\n    AutoInit: false,\r\n    CSSBlur: 'l-blur',\r\n    CSSDialog: 'l-dialog',\r\n    CSSDialogWrapper: 'l-dialog-wrapper',\r\n    Override: false,\r\n\r\n    Permission: {\r\n        Strict: false, //if true: drop content if has no permission (don't render or init at all)\r\n    },\r\n    Defaults: {\r\n        Settings:{\r\n            Animation: {\r\n                Show: '',\r\n                Hide: '',\r\n            },\r\n            Dialog: {\r\n                Animation: {\r\n                    Show: 'l-animation_dialog-show',\r\n                    Hide: 'l-animation_dialog-hide'\r\n                },\r\n                Blur: false,\r\n                Wrapper: true,\r\n            },\r\n            Permission: {\r\n                Attribute: 'data-permission',\r\n                DefaultAction: 'hide',\r\n                Users: [],\r\n                Roles: [],\r\n                Write: [],\r\n                Action: ()=>{}, //()=>{Lure.System.ShowWarn(Lure.Culture.Lang.YouHaveNoPermission)},\r\n\r\n                Rules: {\r\n                    DefaultSample: {\r\n                        Users: [],\r\n                        Roles: [],\r\n                        Write: [],\r\n                        ActionWrite: null,\r\n                        Action: 'hide', //DefaultAction\r\n                    }\r\n                },\r\n                Actions: {\r\n                    hide: (element)=>{\r\n                        if (element)\r\n                            element.style.display = 'none'\r\n                    },\r\n                    show: (element)=>{\r\n                        if (element)\r\n                            element.style.display = ''\r\n                    },\r\n                    remove: (element)=>{\r\n                        if (element)\r\n                            element.remove();\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//Tutorial\r\n//TargetButton = {string, HTMLElement} - button who start the tutor\r\n//TargetContent = {string, HTMLElement} - select/element where search tutors\r\nLure.Plugin.Tutor = class LureTutor{\r\n    /**\r\n     *\r\n     * @param {HTMLElement} TargetButton\r\n     * @param {HTMLElement} TargetContent\r\n     */\r\n    constructor(TargetButton = null, TargetContent = null){\r\n        //### DEFINES\r\n        let $this = this;\r\n        this.TargetButton = Lure.Select(TargetButton);\r\n        this.TargetContent = Lure.Select(TargetContent);\r\n        const MT = `<div class=\"lure-tutor\">\r\n                        <div class=\"cd-caption\">\r\n                            <span>Шаг </span>\r\n                            <span class=\"lure-tutor_step\"></span>\r\n                        </div>\r\n                        <div class=\"lure-tutor_desc\"></div>\r\n                        <div class=\"lure-tutor_btns\">\r\n                            <button class=\"button btn-tutor btn-tutor-stop\">Прервать обучение</button>\r\n                            <button class=\"button btn-tutor btn-tutor-next\">Далeе →</button></div>\r\n                   </div>`;\r\n        this.Content = Lure.CreateElementFromString(MT);\r\n        this.ContentBG = Lure.CreateElementFromString('<div class=\"lure-tutor-bg dialog-wrapper\"></div>');\r\n        this.Content.style.display = 'none';\r\n        this.ContentBG.style.display = 'none';\r\n        this._Description = this.Content.querySelector('.lure-tutor_desc');\r\n        this._Step = this.Content.querySelector('.lure-tutor_step');\r\n        this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\r\n        this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\r\n\r\n        $this.Data = [];\r\n        const ButtonNextText = this._ButtonNext.innerHTML;\r\n        let TutorPosition = 0;\r\n        /*get transparent*/\r\n        let temp = document.createElement('div');\r\n        temp.style.display = 'none';\r\n        document.body.appendChild(temp);\r\n        const ColorTransparent = window.getComputedStyle(temp).backgroundColor;\r\n        temp.remove();\r\n        //---\r\n        const ElemCssRestore = function () {\r\n            let Element = $this.Data[TutorPosition-1].obj;\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '';\r\n                Element.style.position = '';\r\n                Element.style.outline = '';\r\n                Element.style.display = '';\r\n                Element.style.backgroundColor = '';\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.position = '';\r\n                elem.style.zIndex = '';\r\n            });\r\n        };\r\n        const ElemCssSet = function (Element) {\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '11';\r\n                Element.style.position = 'relative';\r\n                Element.style.outline = '5px #bee0ff solid';\r\n                let style = window.getComputedStyle(Element);\r\n                if (style.backgroundColor === ColorTransparent)\r\n                    Element.style.backgroundColor = \"#fff\";\r\n                if (!Lure.isVisible(Element) )\r\n                {\r\n                    if (Element.tagName.toLowerCase() !== \"table\" )\r\n                        Element.style.display = 'block';\r\n                    else\r\n                        Element.style.display = 'table';\r\n                }\r\n                /* if (Element.length > 1)\r\n                 Element.eq(1).css({zIndex: '', outline: ''});*/\r\n                return;\r\n            }\r\n            let nElements = Lure.SelectAll('th, td', Element);// Element.querySelectorAll('th, td');\r\n            for (let i = 0; i < nElements.length; i++){\r\n                nElements[i].style.zIndex = \"11\";\r\n                nElements[i].style.position = \"relative\";\r\n                let style = window.getComputedStyle(nElements[i]);\r\n                if (style.backgroundColor === ColorTransparent){\r\n                    nElements[i].style.backgroundColor = \"#fff\";\r\n                }\r\n            }\r\n        };\r\n        const Run = function () {\r\n            console.log(\"tutor run\");\r\n            if ($this.TargetContent === null)\r\n                return;\r\n            let Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\r\n            if (Items.length < 1){\r\n                Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\r\n                return;\r\n            }\r\n            // document.body.style.position = 'relative';\r\n\r\n            Items.forEach(function (item) {\r\n                $this.Data.push({\r\n                    obj: item,\r\n                    desc: item.dataset['tutor']\r\n                })\r\n            });\r\n            $this.Content.style.display = '';\r\n            $this.ContentBG.style.display = '';\r\n            GoStep();\r\n        };\r\n        const GoStep = function () {\r\n            //restore prev element's css\r\n            if (TutorPosition > 0)\r\n                ElemCssRestore();\r\n            if (TutorPosition === $this.Data.length)\r\n            {\r\n                Stop();\r\n                return;\r\n            }\r\n            //select next elem\r\n            let Element = $this.Data[TutorPosition].obj;\r\n            let ElementDesc = $this.Data[TutorPosition].desc;\r\n            // check for invisible parent\r\n            let ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\r\n            if (ElemParent !== null)\r\n            {\r\n                ElemParent = ElemParent[1];\r\n                ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\r\n                Element = Element.closest(ElemParent);\r\n                $this.Data[TutorPosition].obj = Element;\r\n                //Element.push( );\r\n            }\r\n            //set element visible\r\n            ElemCssSet(Element);\r\n            //write new element title and desc\r\n            $this._Step.innerHTML = (TutorPosition+1) + \"/\"+$this.Data.length;\r\n            $this._Description.innerHTML = ElementDesc;\r\n            //caption next button\r\n            if ((TutorPosition+1) === $this.Data.length)\r\n            {\r\n                $this._ButtonNext.innerHTML = 'Завершить';\r\n                $this._ButtonStop.style.opacity = '0';\r\n            }\r\n\r\n            //move tutor desc box\r\n            let posX = Element.offsetLeft + Element.clientWidth + 10;\r\n            let posY = Element.offsetTop - $this.Content.clientHeight - 10;\r\n            if (posY < 10)\r\n                posY = 10;\r\n            if ( (posX + $this.Content.clientWidth) > window.innerWidth )\r\n            {\r\n                posX = Element.offsetLeft - $this.Content.clientWidth - 10;\r\n                if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth)\r\n                {\r\n                    posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\r\n                }\r\n\r\n            }\r\n            if (document.documentElement.scrollTop  > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight)\r\n            {\r\n                //$('html, body').animate({scrollTop: posY - 10}, 300);\r\n                document.documentElement.scrollTop =  (posY - 10);//  +'px';\r\n            }\r\n            if (posX < 10)\r\n                posX = 10;\r\n            $this.Content.style.left = posX +'px';\r\n            $this.Content.style.top = posY +'px';\r\n\r\n            TutorPosition++;\r\n        };\r\n        const Stop = function () {\r\n            //     document.body.style.position = '';\r\n            ElemCssRestore();\r\n            $this.Content.style.display = 'none';\r\n            $this.ContentBG.style.display = 'none';\r\n            $this._ButtonNext.innerHTML = ButtonNextText;\r\n            $this._ButtonStop.style.opacity = '';\r\n            TutorPosition = 0;\r\n            $this.Data = [];\r\n        };\r\n        //### CONSTRUCT\r\n\r\n        this.TargetButton.onclick = Run;\r\n        this._ButtonNext.onclick = GoStep;\r\n        this._ButtonStop.onclick = Stop;\r\n\r\n        document.body.appendChild(this.Content);\r\n        document.body.appendChild(this.ContentBG);\r\n\r\n        //### METHODS\r\n        this.Run = Run;\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nLure.Plugin.Tooltip = class LureTooltip{\r\n    constructor({\r\n                    Target    = document,           //Target-listener (global document by default)\r\n                    Attribute = \"data-tooltip\",     // data-tooltip=\"Help text here\"\r\n                    Delay     = 400,                //delay before tooltip show\r\n                    Time      = 1100,               //showing time\r\n                    //Cursor    = \"help\",             //item:hover cursor\r\n                    Custom    = `<div class=\"lure-tooltip\">`,               //custom html of tooltip\r\n                    AfterBuild = function(){}\r\n\r\n                })\r\n    {\r\n        let $this = this;\r\n        this.ToolTip = Lure.CreateElementFromString(Custom);\r\n        let Timer = null;\r\n        let TimerDestroy = null;\r\n        this.Target = Lure.Select(Target);\r\n        const Show = function (text){\r\n            this.ToolTip.innerHTML = text;\r\n            $this.Target.appendChild(this.ToolTip);\r\n\r\n        }.bind(this);\r\n        Lure.AddEventListenerGlobal('mouseover', `[${Attribute}]`, function (e) {\r\n            let text = e.currentTarget.dataset[Attribute.replace('data-', '')];\r\n            clearTimeout(TimerDestroy);\r\n            Timer = setTimeout(function(){\r\n                Show(text);\r\n            }, Delay);\r\n        }, this.Target);\r\n        Lure.AddEventListenerGlobal('mouseout', `[${Attribute}]`, function () {\r\n            clearTimeout(Timer);\r\n            TimerDestroy = setTimeout(function () {\r\n                //$this.ToolTip.remove();\r\n            }, Time)\r\n        }, this.Target);\r\n        setTimeout(function () {\r\n            AfterBuild.bind($this);\r\n        }, 0)\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nLure.Tutor   = Lure.Plugin.Tutor;\r\nLure.Tooltip = Lure.Plugin.Tooltip;\r\n\r\n\r\n\r\n\r\nLure.RunTutor = (function () {\r\n    let tt = new Lure.Content({\r\n        Target: 'body',\r\n        Name: 'LureTT',\r\n        Visible: false,\r\n        Content: `<div class=\"l-tutor\">\r\n                    <div class=\"cd-caption\">Шаг {{Step}}/{{StepCount}}</div>\r\n                    <div class=\"inner-content\">\r\n                      <div class=\"tutor-description\">{{Description}}</div>\r\n                      <div class=\"l-row\">\r\n                        <button class=\"l-button button btn-tutor btn-tutor-stop\">{{ButtonStopCaption}}</button>\r\n                        <button class=\"l-button button btn-tutor btn-tutor-next\">{{ButtonNextCaption}}</button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                  </div>`,\r\n        State: {\r\n            Step: 1,\r\n            StepCount: 1,\r\n            Description: '',\r\n\r\n            ButtonNextCaption: \"Далeе →\",\r\n            ButtonStopCaption: \"Прервать обучение\",\r\n        },\r\n        Props: function () {\r\n            this._TutorBG = Lure.CreateElementFromString('<div class=\"l-tutor-bg dialog-wrapper\" style=\"display: none\"></div>');\r\n\r\n            this._ButtonNext = this.Select('.btn-tutor-next');\r\n            this._ButtonStop = this.Select('.btn-tutor-stop');\r\n            this._ButtonNextTextDefault = \"Далeе →\";\r\n\r\n            this.Options = null;\r\n        },\r\n        Methods: function () {\r\n            this.ElemCssRestore = function () {\r\n                let Element = this._DataTutor[this.TutorPosition-1].obj;\r\n                if (Element.tagName.toLowerCase() !== 'tr')\r\n                {\r\n                    Element.style.zIndex = '';\r\n                    Element.style.position = '';\r\n                    Element.style.outline = '';\r\n                    Element.style.display = '';\r\n                    Element.style.backgroundColor = '';\r\n                    return;\r\n                }\r\n                let nElements = Element.querySelectorAll('th, td');\r\n                nElements.forEach(function (elem) {\r\n                    elem.style.position = '';\r\n                    elem.style.zIndex = '';\r\n                });\r\n            };\r\n            this.ElemCssSet = function (Element) {\r\n                if (Element.tagName.toLowerCase() !== 'tr')\r\n                {\r\n                    //Element.style.zIndex = '11';\r\n                    //Element.style.outline = '5px #bee0ff solid';\r\n                    for (let o in this.Options.Frame){\r\n                        if (this.Options.Frame.hasOwnProperty(o) && o !== 'backgroundColor'){\r\n                            Element.style[o] = this.Options.Frame[o];\r\n                        }\r\n                    }\r\n                    let style = window.getComputedStyle(Element);\r\n                    if (style.position !== 'absolute' && style.position !== 'relative' && style.position !== 'fixed')\r\n                        Element.style.position = 'relative';\r\n                    if (style.backgroundColor === this._ColorTransparent)\r\n                        Element.style.backgroundColor = this.Options.Frame.backgroundColor;\r\n                    if (!Lure.isVisible(Element) )\r\n                    {\r\n                        if (Element.tagName.toLowerCase() !== \"table\" )\r\n                            Element.style.display = 'block';\r\n                        else\r\n                            Element.style.display = 'table';\r\n                    }\r\n                    /* if (Element.length > 1)\r\n                     Element.eq(1).css({zIndex: '', outline: ''});*/\r\n                    return;\r\n                }\r\n                let nElements = Lure.SelectAll('th, td', Element);// Element.querySelectorAll('th, td');\r\n                for (let i = 0; i < nElements.length; i++){\r\n                    nElements[i].style.zIndex = this.Options.Frame.zIndex;\r\n                    nElements[i].style.position = \"relative\";\r\n                    let style = window.getComputedStyle(nElements[i]);\r\n                    if (style.backgroundColor === this._ColorTransparent){\r\n                        nElements[i].style.backgroundColor = this.Options.Frame.backgroundColor;\r\n                    }\r\n                }\r\n            };\r\n            this.SetOptions = function (Options) {\r\n                this.Options = Lure.Clone(Lure.Settings.Tutor.Options);\r\n                if (!Options)\r\n                    return;\r\n                if (Options.Frame){\r\n                    for (let o in Options.Frame){\r\n                        if (Options.Frame.hasOwnProperty(o)){\r\n                            this.Options.Frame[o] = Options.Frame[o];\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            this.Run = function (DOMElement, Options) {\r\n                this.SetOptions(Options);\r\n                this.TargetContent = Lure.Select(DOMElement);\r\n                this.TutorPosition = 0;\r\n                //this._ButtonStop.style.opacity = '';\r\n                this._ButtonStop.style.display = '';\r\n                this.State.ButtonNextCaption = this._ButtonNextTextDefault;\r\n                console.log(\"tutor run\");\r\n                if (this.TargetContent === null)\r\n                    return;\r\n                let Items = this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\r\n                //let Items = this.TargetContent.querySelectorAll('*[data-tutor]:not(.l-t-line), *.l-t-line[data-tutor][data-line=\"0\"]');\r\n                if (Items.length < 1){\r\n                    Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\r\n                    return;\r\n                }\r\n                this._DataTutor = [];\r\n                for (let i = 0; i < Items.length; i++){\r\n                    let item = Items[i];\r\n                    this._DataTutor.push({\r\n                        obj: item,\r\n                        desc: item.dataset['tutor']\r\n                    })\r\n                }\r\n                this.Proto.Data.Step = 1;\r\n                this.Proto.Data.StepCount = this._DataTutor.length;\r\n                //this.Content.style.display = '';\r\n\r\n                //this._TutorBG.style.display = '';\r\n                this.GoStep();\r\n                this._TutorBG.style.display = '';\r\n                this.Show();\r\n            };\r\n            this.GoStep = function () {\r\n                //restore prev element's css\r\n                if (this.TutorPosition > 0)\r\n                    this.ElemCssRestore();\r\n                if (this.TutorPosition === this._DataTutor.length)\r\n                {\r\n                    this.Stop();\r\n                    return;\r\n                }\r\n                //select next elem\r\n                let Element = this._DataTutor[this.TutorPosition].obj;\r\n                let ElementDesc = this._DataTutor[this.TutorPosition].desc;\r\n                // check for invisible parent\r\n                let ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\r\n                if (ElemParent !== null)\r\n                {\r\n                    ElemParent = ElemParent[1];\r\n                    ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\r\n                    Element = Element.closest(ElemParent);\r\n                    this._DataTutor[this.TutorPosition].obj = Element;\r\n                    //Element.push( );\r\n                }\r\n                //set element visible\r\n                this.ElemCssSet(Element);\r\n\r\n                //caption next button\r\n                if ((this.TutorPosition+1) === this._DataTutor.length)\r\n                {\r\n                    this.State.ButtonNextCaption = 'Завершить';\r\n                    //this._ButtonNext.innerHTML = 'Завершить';\r\n                    this._ButtonStop.style.display = 'none';\r\n                }\r\n\r\n                //move tutor desc box\r\n                let TutorWidth = this.Content.clientWidth > 0 ? this.Content.clientWidth: 340;  //css\r\n                let TutorHeight = this.Content.clientHeight > 0 ? this.Content.clientHeight : 150; //min-height\r\n                let posX = Element.offsetLeft + Element.clientWidth + 10;\r\n                let posY = Element.offsetTop - TutorHeight - 10;\r\n                if (posY < 10)\r\n                    posY = 10;\r\n                if ( (posX + TutorWidth) > window.innerWidth )\r\n                {\r\n                    posX = Element.offsetLeft - TutorWidth - 10;\r\n                    if (window.innerWidth < TutorWidth + Element.clientWidth)\r\n                    {\r\n                        posX = Element.offsetLeft + Element.clientWidth - TutorWidth - 20;\r\n                    }\r\n\r\n                }\r\n                if (document.documentElement.scrollTop  > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight)\r\n                {\r\n                    //$('html, body').animate({scrollTop: posY - 10}, 300);\r\n                    document.documentElement.scrollTop =  (posY - 10);//  +'px';\r\n                }\r\n                if (posX < 10)\r\n                    posX = 10;\r\n                this.Content.style.left = posX +'px';\r\n                this.Content.style.top = posY +'px';\r\n\r\n                if (this.TargetContent !== document.body)\r\n                    this.TargetContent.parentElement.appendChild(this._TutorBG);\r\n                else\r\n                    this.Content.appendChild(this._TutorBG);\r\n                this.TutorPosition++;\r\n                this.Proto.Data.Step = this.TutorPosition;\r\n                this.Proto.Data.Description = ElementDesc;\r\n                this.Proto.Refresh();\r\n            };\r\n            this.Stop = function () {\r\n                this._Hider();\r\n                this._TutorBG.style.display = 'none';\r\n                this.ElemCssRestore();\r\n            };\r\n            this._GetTransparentColor = function () {\r\n                let temp = document.createElement('div');\r\n                temp.style.display = 'none';\r\n                document.body.appendChild(temp);\r\n                this._ColorTransparent = window.getComputedStyle(temp).backgroundColor;\r\n                temp.remove();\r\n            };\r\n        },\r\n        AfterBuild: function () {\r\n            this._GetTransparentColor();\r\n            //this._TutorBG.style.display = 'none';\r\n            this._ButtonNext.onclick = this.GoStep;\r\n            this._ButtonStop.onclick = this.Stop;\r\n        }\r\n    });\r\n    return function (DOMElement, Options) {\r\n        tt.Run(DOMElement, Options);\r\n    }\r\n})();\r\n\r\nLure.Settings.Tutor = {\r\n    Options: {\r\n        Frame: {\r\n            zIndex: '11',\r\n            outline:  '5px #bee0ff solid',\r\n            backgroundColor: \"#fff\",\r\n        },\r\n    }\r\n};","Lure.Route = {\r\n    Lock: false,       // _\r\n    LockParent: false, //lock hash changing if Shows target's content's parents\r\n    _Enabled: false,\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get Enabled(){\r\n        return this._Enabled;\r\n    },\r\n    set Enabled(val){\r\n        this._Enabled = val;\r\n        if (val)\r\n            window.addEventListener('popstate', Lure.Route.Run);\r\n        else\r\n            window.removeEventListener('popstate', Lure.Route.Run);\r\n\r\n    },\r\n\r\n    _PopState: false,\r\n\r\n    Init(){\r\n        /*for (let i = 0; i < Lure._Content.List.length; i++){\r\n            let SubContents = Lure._Content.List[i].GetSubContentList();\r\n            if (SubContents.length < 1){\r\n                history.pushState({ContentID: this.ID, Param: ''}, Lure._Content.List[i].Name, `?${Lure._Content.List[i].Name}`);\r\n            }\r\n        }*/\r\n    },\r\n    Push(LureContent){\r\n        if (Lure.Route._PopState){\r\n            Lure.Route._PopState = false;\r\n            return;\r\n        }\r\n        Lure.Route.CurrentContent = LureContent;\r\n        let Route = Lure.Route._GetRoute(LureContent);\r\n        let Param = LureContent._RouteParam !== null ? LureContent._RouteParam : '';\r\n        history.pushState({ContentID: LureContent.ID, Param: Param}, LureContent.Name, `#${Route}/${Param !== '' ? `${Param}`:''}`);\r\n\r\n    },\r\n    _GetRoute(LureContent){\r\n        let Route = LureContent.Name;\r\n        let Parent = LureContent.Parent;\r\n        while(Parent){\r\n            Route = Parent.Name + '/' + Route;\r\n            Parent = Parent.Parent;\r\n        }\r\n        return Route;\r\n    },\r\n    Back(){\r\n        if (Lure.Route.Enabled){\r\n            history.back();\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nLure.Route.Run = (e)=>{\r\n    Lure.Route._PopState = true;\r\n    //onback\r\n    //let PrevContent = history.state ? Lure._Content.List.Where(x=>x.ID===history.state.ContentID).FirstOrDefault() : null;\r\n    //let RouteString = window.location.hash.split('#')[1];\r\n    let RouteString = location.href.replace(location.origin+location.pathname, '').substring(1);\r\n    return Lure.Route.GoTo(RouteString);\r\n};\r\nLure.Route.GoTo = (routeString)=>{\r\n    //return\r\n    if (!routeString || Lure.Route.Lock || !Lure.Application.isRun)\r\n        return 0;\r\n    console.log(`%c[Route]  ${routeString}`, \"color: green;\");\r\n    //let RgxParam = new RegExp(`\\\\/([\\\\d\\\\w]*)$`);\r\n    //let hash = window.location.hash.split('#')[1];\r\n\r\n    //let Route = hash.split('/');\r\n    let Route = routeString.split('/');\r\n    let pp = Route.Last();\r\n    Route.splice(Route.length-1, 1);\r\n    let f = new Function(`return ${Route.join('.')}`);\r\n    let Content = f();\r\n    if (Content) {\r\n        // if (Lure.Route.CurrentContent && Lure.Route.CurrentContent !== Content && !Lure.Route.CurrentContent.isAncestor(Content))\r\n        //     Lure.Route.CurrentContent.Hide();\r\n        Content.Route(pp);\r\n        Lure.Route.CurrentContent = Content;\r\n    }\r\n    return 1;\r\n};\r\n/*\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    if (Lure.Route.Enabled)\r\n        Lure.Route.Run();\r\n});*/\r\n/*\r\nwindow.onpopstate = function(event) {\r\n    Lure.Route.GoTo(event.state);\r\n    console.log(\"location: \" + location.href + \", state: \" + JSON.stringify(event.state));\r\n};*/\r\n//history.pushState({page: 1}, \"title 1\", \"?page=1\");\r\n//history.pushState({page: 2}, \"title 2\", \"?page=2\");\r\nLure.Settings.Route = {\r\n    Auto: true,        //if true: any Lure.Content will be mapped, except which got Route=false/null/undefined parameter\r\n};","if (!Lure._Core)\r\n    Lure._Core = {};\r\n\r\nLure._Core.Chart = {};\r\nLure._Core.Chart.Intitializer = {\r\n    isGraph: function(Type){\r\n        return Lure._Core.Chart.Intitializer.Type.Graph.indexOf(Type.toLowerCase()) > -1\r\n    },\r\n    isDraw: function(Type){\r\n        return Lure._Core.Chart.Intitializer.Type.Draw.indexOf(Type.toLowerCase()) > -1\r\n    },\r\n    Type: {\r\n        Graph: ['line', 'bar'],\r\n        Draw: ['pie', 'ring'],\r\n    },\r\n    Default:{\r\n        Color: ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange', 'tomato', 'darkblue', 'cadetblue', 'crimson'],\r\n        R: {\r\n            Target: '',\r\n            Type: 'line',\r\n            Title: '',\r\n            Animation: {\r\n                Bar: 'l-animate-svg-bar', //'' or false for disable\r\n                Line: 'l-animate-svg-line',\r\n                Marker: 'l-animate-svg-mark',\r\n                Pie: 'l-animate-svg-pie',\r\n                Ring: 'l-animate-svg-ring',\r\n            },\r\n            Legend: {\r\n                Position: 'top',\r\n                Visible: true,\r\n            },\r\n            Grid: {\r\n                Visible: true,\r\n            },\r\n            AxisX:{\r\n                Data: [],\r\n                Format: null,\r\n                Rotation: 'auto',\r\n                Skip: null,\r\n                Step: 'auto',\r\n\r\n                Position: 'bottom',\r\n                Visible: true,\r\n\r\n            },\r\n            AxisY: {\r\n                Position: 'left',\r\n                Min:  'auto', //0\r\n                Max:  'auto', //max-value\r\n                Step: 'auto',\r\n                Visible: true,\r\n            },\r\n            Tooltip: {\r\n                Format: null, /*(Tip)=>{return `<div>Name: ${Tip.Episode.Name}</div><div>Value: ${p.Value}</div>`},*/ // p {Name,Value,x,y,Episode}\r\n                FormatGraph: function (Tip) {\r\n                    return `<div class=\"tip\">\r\n                              <div class=\"tip-bg\"></div>\r\n                              <div class=\"tip-value\">\r\n                                <div class=\"l-row\">\r\n                                  <div class=\"tip-icon\" style=\"background-color: ${Tip.Episode.Color}\"></div>\r\n                                  <div class=\"tip-label\">${Tip.ValueX}</div>\r\n                                </div>\r\n                                <div class=\"l-row\">${Tip.Episode.Name}: ${Tip.Value}</div>\r\n                              </div>\r\n                            </div>`\r\n                },\r\n                FormatDraws: function (Tip) {\r\n                    let Percent = Tip.Value/Tip.Episode.Sum*100;\r\n                    if (isNaN(Percent)){\r\n                        Percent = 0;\r\n                    }\r\n                    if (Percent > 1)\r\n                        Percent = Math.round(Percent);\r\n                    else\r\n                        Percent = Math.round(Percent*100)/100;\r\n                    return `<div class=\"tip\">\r\n                              <div class=\"tip-bg\"></div>\r\n                              <div class=\"tip-value\">\r\n                                <div class=\"l-row l-flexa-center\">\r\n                                  <div class=\"tip-icon\" style=\"background-color: ${Tip.Color}\"></div>\r\n                                  <div class=\"tip-label\">${Tip.Name}: ${Tip.Value} (${Percent}%)</div>\r\n                                </div>\r\n                              </div>\r\n                            </div>`\r\n                },\r\n                Template: '<div>Name: {{Name}}</div><div>Value: {{Value}}</div>',\r\n                Visible: true,\r\n                Duration: 200,\r\n                Timeout: 700,\r\n\r\n\r\n                Tip: {\r\n                    Left:0,\r\n                    Top:0,\r\n                    Color: '#000',\r\n                },//private\r\n                //MultiValues: false\r\n            },\r\n            SeriesSample:{\r\n                Type: 'line',\r\n                Data: [],\r\n                Name: '',      //ex.: Speed limit\r\n                Title: '',     //ex.: km/h\r\n                Visible: true,\r\n                //Enabled: true,\r\n\r\n                Format: null,\r\n\r\n                AxisX: {\r\n                    Start: 'auto',\r\n                    End: 'auto',\r\n                    Step: 'auto',\r\n                    Skip: null,\r\n                    //Skip: 30,\r\n                    //Skip: (value)=>{return value},\r\n                    Linear: true, // false if Skip is a function\r\n\r\n                },\r\n                AxisY:{\r\n                    Position: 'left',\r\n                    Min:  'auto',\r\n                    Max:  'auto',\r\n                    Step: 'auto',\r\n                    Visible: false,\r\n                },\r\n\r\n                Marker: {\r\n                    Radius: 'auto',\r\n                    Shape: 'circle',\r\n                    Visible: true,\r\n                },\r\n\r\n                Width: 2,\r\n                /* Draw */\r\n                Labels: {\r\n                    Data: [],\r\n                    Format: null, // Format(Name, Value, Episode, j)\r\n                    Visible: true,\r\n                },\r\n\r\n            },\r\n            SeriesOptions: {\r\n                Colors: ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange', 'tomato', 'darkblue', 'cadetblue', 'crimson'],\r\n                _Bar:{\r\n                    Stack: false,\r\n                    Gradient: true,\r\n\r\n                    _Count: 0,\r\n                },\r\n                BarStack:    false,\r\n                BarGradient: true,\r\n\r\n                PieStack:  false,\r\n                PieType:   'pie',\r\n                StartAngle: 0,\r\n\r\n                Marker: {\r\n                    Radius: 'auto',\r\n                    Shape: 'circle',\r\n                    Visible: true,\r\n                }\r\n            },\r\n            Height: 400,\r\n            Width: 600,\r\n            Responsible: true,\r\n        }\r\n    },\r\n    RAnimation: function(R){\r\n        if (R.Animation){\r\n            R.Animation.Bar    = R.Animation.Bar    !== void 0 ? R.Animation.Bar    : Lure._Core.Chart.Intitializer.Default.R.Animation.Bar;\r\n            R.Animation.Line   = R.Animation.Line   !== void 0 ? R.Animation.Line   : Lure._Core.Chart.Intitializer.Default.R.Animation.Line;\r\n            R.Animation.Marker = R.Animation.Marker !== void 0 ? R.Animation.Marker : Lure._Core.Chart.Intitializer.Default.R.Animation.Marker;\r\n            R.Animation.Pie    = R.Animation.Pie    !== void 0 ? R.Animation.Pie    : Lure._Core.Chart.Intitializer.Default.R.Animation.Pie;\r\n            R.Animation.Ring   = R.Animation.Ring   !== void 0 ? R.Animation.Ring   : Lure._Core.Chart.Intitializer.Default.R.Animation.Ring;\r\n        } else{\r\n            if (R.Animation === void 0)\r\n                R.Animation = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.Animation);\r\n            else\r\n                R.Animation = {\r\n                    Bar: '',\r\n                    Line: '',\r\n                    Marker: '',\r\n                    Pie: '',\r\n                    Ring: '',\r\n                };\r\n        }\r\n    },\r\n    RLegend: function(R){\r\n        if (R.Legend){\r\n            R.Legend.Position = R.Legend.Position !== void 0 ? R.Legend.Position : Lure._Core.Chart.Intitializer.Default.R.Legend.Position;\r\n            R.Legend.Visible  = R.Legend.Visible  !== void 0 ? R.Legend.Visible :  Lure._Core.Chart.Intitializer.Default.R.Legend.Visible;\r\n        }\r\n        else {\r\n            R.Legend = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.Legend);\r\n        }\r\n    },\r\n    RLabels: function(R){\r\n        if (R.Labels){\r\n            R.Labels.Rotation = R.Labels.Rotation !== void 0 ? R.Labels.Rotation : Lure._Core.Chart.Intitializer.Default.R.Labels.Rotation;\r\n            R.Labels.Visible  = R.Labels.Visible  !== void 0 ? R.Labels.Data     : Lure._Core.Chart.Intitializer.Default.R.Labels.Visible;\r\n            R.Labels.Data     = R.Labels.Data     !== void 0 ? R.Labels.Data     : Lure._Core.Chart.Intitializer.Default.R.Labels.Data;\r\n            R.Labels.Format   = R.Labels.Format     !== void 0 ? R.Labels.Format : Lure._Core.Chart.Intitializer.Default.R.Labels.Format;\r\n        }\r\n        else {\r\n            R.Labels = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.Labels);\r\n        }\r\n    },\r\n    RGrid: function(R){\r\n        if (R.Grid){\r\n            R.Grid.Visible  = R.Grid.Visible  !== void 0 ? R.Grid.Visible : Lure._Core.Chart.Intitializer.Default.R.Grid.Visible;\r\n            R.Grid.Html = '';\r\n        }\r\n        else {\r\n            R.Grid = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.Grid);\r\n        }\r\n    },\r\n    RAxisX: function(R){\r\n        if (R.AxisX){\r\n            R.AxisX.Visible  = R.AxisX.Visible  !== void 0 ? R.AxisX.Visible  : Lure._Core.Chart.Intitializer.Default.R.AxisX.Visible;\r\n            R.AxisX.Position = R.AxisX.Position !== void 0 ? R.AxisX.Position : Lure._Core.Chart.Intitializer.Default.R.AxisX.Position;\r\n            R.AxisX.Rotation = R.AxisX.Rotation !== void 0 ? R.AxisX.Rotation : Lure._Core.Chart.Intitializer.Default.R.AxisX.Rotation;\r\n            R.AxisX.Data     = R.AxisX.Data     !== void 0 ? R.AxisX.Data     : Lure._Core.Chart.Intitializer.Default.R.AxisX.Data;\r\n            R.AxisX.Format   = R.AxisX.Format   !== void 0 ? R.AxisX.Format   : Lure._Core.Chart.Intitializer.Default.R.AxisX.Format;\r\n            R.AxisX.Skip     = R.AxisX.Skip     !== void 0 ? R.AxisX.Skip     : Lure._Core.Chart.Intitializer.Default.R.AxisX.Skip;\r\n            R.AxisX.Step     = R.AxisX.Step     !== void 0 ? R.AxisX.Step     : Lure._Core.Chart.Intitializer.Default.R.AxisX.Step;\r\n\r\n            R.AxisX.Linear   = typeof R.AxisX.Skip !== 'function';\r\n        }\r\n        else {\r\n            R.AxisX = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.AxisX);\r\n        }\r\n    },\r\n    RAxisY: function(R){\r\n        if (R.AxisY){\r\n            R.AxisY.Visible  = R.AxisY.Visible  !== void 0 ? R.AxisY.Visible  : Lure._Core.Chart.Intitializer.Default.R.AxisY.Visible;\r\n            R.AxisY.Position = R.AxisY.Position !== void 0 ? R.AxisY.Position : Lure._Core.Chart.Intitializer.Default.R.AxisY.Position;\r\n\r\n            R.AxisY.Min  = R.AxisY.Min  !== void 0 ? R.AxisY.Min  : Lure._Core.Chart.Intitializer.Default.R.AxisY.Min;\r\n            R.AxisY.Max  = R.AxisY.Max  !== void 0 ? R.AxisY.Max  : Lure._Core.Chart.Intitializer.Default.R.AxisY.Max;\r\n            R.AxisY.Step = R.AxisY.Step !== void 0 ? R.AxisY.Step : Lure._Core.Chart.Intitializer.Default.R.AxisY.Step;\r\n\r\n            // set font by css instead\r\n            // R.AxisY.Font        = R.AxisY.Font        !== void 0 ? R.AxisY.Font        : Lure._Core.Chart.Intitializer.Default.R.AxisY.Font;\r\n            // R.AxisY.Font.Family = R.AxisY.Font.Family !== void 0 ? R.AxisY.Font.Family : Lure._Core.Chart.Intitializer.Default.R.AxisY.Font.Family;\r\n            // R.AxisY.Font.Size   = R.AxisY.Font.Size   !== void 0 ? R.AxisY.Font.Size   : Lure._Core.Chart.Intitializer.Default.R.AxisY.Font.Size;\r\n        }\r\n        else {\r\n\r\n            R.AxisY = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.AxisY);\r\n        }\r\n    },\r\n\r\n    RTooltip: function(R){\r\n        if (R.Tooltip){\r\n            R.Tooltip.Visible  = R.Tooltip.Visible   !== void 0 ? R.Tooltip.Visible  : Lure._Core.Chart.Intitializer.Default.R.Tooltip.Visible;\r\n            R.Tooltip.Template = R.Tooltip.Template  !== void 0 ? R.Tooltip.Template : Lure._Core.Chart.Intitializer.Default.R.Tooltip.Template;\r\n            R.Tooltip.Format   = R.Tooltip.Format    !== void 0 ? R.Tooltip.Format   : Lure._Core.Chart.Intitializer.Default.R.Tooltip.Format;\r\n            R.Tooltip.Timeout  = R.Tooltip.Timeout   !== void 0 ? R.Tooltip.Timeout  : Lure._Core.Chart.Intitializer.Default.R.Tooltip.Timeout;\r\n            R.Tooltip.Duration = R.Tooltip.Duration  !== void 0 ? R.Tooltip.Duration : Lure._Core.Chart.Intitializer.Default.R.Tooltip.Duration;\r\n            R.Tooltip.Tip = {};\r\n        }\r\n        else {\r\n            R.Tooltip = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.Tooltip);\r\n        }\r\n    },\r\n    RSeries: function(R){},\r\n    RSeriesOptions: function(R){\r\n        if (R.SeriesOptions){\r\n            R.SeriesOptions.Colors    = R.SeriesOptions.Colors    !== void 0 ? R.SeriesOptions.Colors    : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.Colors;\r\n\r\n            R.SeriesOptions.BarStack    = R.SeriesOptions.BarStack    !== void 0 ? R.SeriesOptions.BarStack    : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.BarStack;\r\n            R.SeriesOptions.BarGradient = R.SeriesOptions.BarGradient !== void 0 ? R.SeriesOptions.BarGradient : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.BarGradient;\r\n            R.SeriesOptions.PieStack    = R.SeriesOptions.PieStack    !== void 0 ? R.SeriesOptions.PieStack    : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.PieStack;\r\n            R.SeriesOptions.PieType     = R.SeriesOptions.PieType     !== void 0 ? R.SeriesOptions.PieType     : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.PieType;\r\n            R.SeriesOptions.StartAngle  = R.SeriesOptions.StartAngle  !== void 0 ? R.SeriesOptions.StartAngle  : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.StartAngle;\r\n\r\n            R.SeriesOptions.Marker         = R.SeriesOptions.Marker         !== void 0 ? R.SeriesOptions.Marker         : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.Marker;\r\n            R.SeriesOptions.Marker.Visible = R.SeriesOptions.Marker.Visible !== void 0 ? R.SeriesOptions.Marker.Visible : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.Marker.Visible;\r\n            R.SeriesOptions.Marker.Radius  = R.SeriesOptions.Marker.Radius  !== void 0 ? R.SeriesOptions.Marker.Radius  : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.Marker.Radius;\r\n            R.SeriesOptions.Marker.Shape   = R.SeriesOptions.Marker.Shape   !== void 0 ? R.SeriesOptions.Marker.Shape   : Lure._Core.Chart.Intitializer.Default.R.SeriesOptions.Marker.Shape;\r\n\r\n\r\n        }else{\r\n            R.SeriesOptions = Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.SeriesOptions);\r\n        }\r\n    },\r\n\r\n\r\n\r\n    /*###*/\r\n    GetSeries(R){\r\n        let Series = R.Series;\r\n        let SeriesList = [];\r\n\r\n        for (let i = 0; i < Series.length; i++){\r\n            //let Episode = Series[i];\r\n            let Ep = Series[i];\r\n            //let Ep = Lure.Clone(Series[i]);\r\n\r\n            Ep.Line = i;\r\n            //Ep.Data = Lure.Clone(Episode.Data);\r\n\r\n            Ep.Type  = Ep.Type  !== void 0 ? Ep.Type.toLowerCase() : R.Type;\r\n            Ep.Name  = Ep.Name  !== void 0 ? Ep.Name               : '';\r\n            Ep.Title = Ep.Title !== void 0 ? Ep.Title              : '';\r\n\r\n            Ep.Color = Ep.Color !== void 0 ? Ep.Color : R.SeriesOptions.Colors[i];\r\n            Ep.Color = Ep.Color      !== void 0 ? Ep.Color : '#000';\r\n\r\n            Ep.Width = Ep.Width !== void 0 ? Ep.Width : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Width;\r\n\r\n            Ep.Visible = Ep.Visible !== void 0 ? Ep.Visible : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Visible;\r\n\r\n            Ep.Format = Ep.Format !== void 0 ? Ep.Format : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Format;\r\n\r\n            Ep.AxisX          = Ep.AxisX          !== void 0 ? Ep.AxisX       : Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisX);\r\n            Ep.AxisX.Data     = Ep.AxisX.Data     !== void 0 ? Ep.AxisX.Data  : R.AxisX.Data;\r\n            Ep.AxisX.Start    = Ep.AxisX.Start    !== void 0 ? Ep.AxisX.Start : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisX.Start;\r\n            Ep.AxisX.End      = Ep.AxisX.End      !== void 0 ? Ep.AxisX.End   : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisX.End;\r\n\r\n\r\n\r\n\r\n            Ep.AxisY          = Ep.AxisY          !== void 0 ? Ep.AxisY          : Lure.Object.Clone(Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY);\r\n            //if Ep.AxisY is exists - visible by default\r\n            Ep.AxisY.Visible  = Ep.AxisY.Visible  !== void 0 ? Ep.AxisY.Visible  :\r\n                Ep.AxisY  !== void 0 ? true : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY.Visible;\r\n            Ep.AxisY.Position = Ep.AxisY.Position !== void 0 ? Ep.AxisY.Position : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY.Position;\r\n\r\n            Ep.AxisY.Min  = Ep.AxisY.Min  !== void 0 ? Ep.AxisY.Min  : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY.Min;\r\n            Ep.AxisY.Max  = Ep.AxisY.Max  !== void 0 ? Ep.AxisY.Max  : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY.Max;\r\n            Ep.AxisY.Step = Ep.AxisY.Step !== void 0 ? Ep.AxisY.Step : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.AxisY.Step;\r\n\r\n\r\n            Ep.Marker         = Ep.Marker         !== void 0 ? Ep.Marker         : Lure.Object.Clone(R.SeriesOptions.Marker);\r\n            Ep.Marker.Visible = Ep.Marker.Visible !== void 0 ? Ep.Marker.Visible : R.SeriesOptions.Marker.Visible;\r\n            Ep.Marker.Shape   = Ep.Marker.Shape   !== void 0 ? Ep.Marker.Shape   : R.SeriesOptions.Marker.Shape;\r\n            Ep.Marker.Radius  = Ep.Marker.Radius  !== void 0 ? Ep.Marker.Radius  : R.SeriesOptions.Marker.Radius;\r\n            Ep.Marker.Radius  = Ep.Marker.Radius       !== 'auto' ? Ep.Marker.Radius       : (4 + Ep.Width/4);\r\n\r\n\r\n\r\n\r\n\r\n            if (Lure._Core.Chart.Intitializer.Type.Draw.indexOf(Ep.Type) > -1){\r\n                Ep.Colors     = Ep.Colors     ? Ep.Colors     : Lure._Core.Chart.Intitializer.Default.Color;\r\n                Ep.Width      = Ep.Width      ? Ep.Width      : 30;\r\n                Ep.AngleStart = Ep.AngleStart ? Ep.AngleStart : 0;\r\n                Ep.Margin     = Ep.Margin     ? Ep.Margin     : 0;\r\n\r\n                Ep.Labels         = Ep.Labels         !== void 0 ? Ep.Labels         : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Labels;\r\n                Ep.Labels.Visible = Ep.Labels.Visible !== void 0 ? Ep.Labels.Visible : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Labels.Visible;\r\n                Ep.Labels.Data    = Ep.Labels.Data    !== void 0 ? Ep.Labels.Data    : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Labels.Data;\r\n                Ep.Labels.Format  = Ep.Labels.Format  !== void 0 ? Ep.Labels.Format  : Lure._Core.Chart.Intitializer.Default.R.SeriesSample.Labels.Format;\r\n\r\n                Ep.Visibles = Ep.Visibles !== void 0 ? Ep.Visibles : Ep.Data.Select(()=>true);\r\n\r\n\r\n            }\r\n\r\n            SeriesList.push(Ep);\r\n        }\r\n        return SeriesList;\r\n\r\n    },\r\n\r\n    InitR: function (R) {\r\n\r\n        R.Name   = R.Name   !== void 0 ? R.Name   : '';\r\n        R.Title  = R.Title  !== void 0 ? R.Title  : '';\r\n        R.Type   = R.Type   !== void 0 ? R.Type.toLowerCase()  : 'line';\r\n        R.Height = R.Height !== void 0 ? R.Height : 'auto';\r\n        R.Width  = R.Width  !== void 0 ? R.Width  : 'auto';\r\n\r\n        R.Responsible = R.Responsible  !== void 0 ? R.Responsible  : true;\r\n\r\n        Lure._Core.Chart.Intitializer.RAnimation(R);\r\n        Lure._Core.Chart.Intitializer.RLegend(R);\r\n        //Lure._Core.Chart.Intitializer.RLabels(R);\r\n        Lure._Core.Chart.Intitializer.RGrid(R);\r\n        Lure._Core.Chart.Intitializer.RAxisX(R);\r\n        Lure._Core.Chart.Intitializer.RAxisY(R);\r\n        Lure._Core.Chart.Intitializer.RTooltip(R);\r\n        Lure._Core.Chart.Intitializer.RSeriesOptions(R);\r\n\r\n        R.DrawAfterInit = R.DrawAfterInit !== void 0 ? R.DrawAfterInit : true;\r\n\r\n        this.Options = R;\r\n        this.Options.Series = Lure._Core.Chart.Intitializer.GetSeries(R);\r\n        //FIXME IS IT OK PLACE FOR SVG.HTML?\r\n        this.Options.Svg = {\r\n            Html: '',\r\n            Height: 0,\r\n        };\r\n        this.Options.AxisX.Html      = '';\r\n        this.Options.AxisY.HtmlLeft  = '';\r\n        this.Options.AxisY.HtmlRight = '';\r\n        this.Options.Grid.Html       = '';\r\n        this.Options.Legend.Html     = '';\r\n        this.Options.Tooltip.Html    = '';\r\n        //this.Options.Tooltip.Tip     = {};\r\n        this.isGraph = this.Options.Series.Where(s=>s.Type.toLowerCase() !== 'line' && s.Type.toLowerCase() !== 'bar').length === 0;\r\n\r\n        this.Options._Series = {\r\n            Line: {\r\n                Count: 0,\r\n                CountPrepared: 0\r\n            },\r\n            Bar: {\r\n                Count: this.Options.Series.Where(s=>s.Type === 'bar').length,\r\n                CountPrepared: 0\r\n            },\r\n            Pie: {\r\n                Count: this.Options.Series.Where(s=>s.Type === 'bar').length,\r\n                CountPrepared: 0\r\n            },\r\n            Ring: {\r\n                Count: this.Options.Series.Where(s=>s.Type === 'ring').length,\r\n                CountPrepared: 0\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n};","Lure._Core.Chart.BChartContent = class{\r\n\r\n\r\n    GetEpisodeWidthRange(Episode, Width){\r\n        let XData = Episode.AxisX.Data;\r\n        let Type = Lure.GetType(Episode.AxisX.Data[0]);\r\n\r\n        let Start = 0;\r\n        let End   = Width;\r\n\r\n        if (Type === 'date'){\r\n            XData = XData.Select(x=>x.valueOf());\r\n        }\r\n\r\n\r\n        if (Episode.AxisX.Start !== 'auto' && (Type === 'number' || Type === 'date') ){\r\n            let S = Type !== 'date'  ? Episode.AxisX.Start : Episode.AxisX.Start.valueOf();\r\n            let pos = XData.indexOf(S);\r\n            if (pos > -1)\r\n                Start = Width * pos / Episode.AxisX.Data.length\r\n        }\r\n        if (Episode.AxisX.End !== 'auto' && (Type === 'number' || Type === 'date')){\r\n            let E = Type !== 'date' ? Episode.AxisX.Start : Episode.AxisX.End.valueOf();\r\n            let pos = XData.indexOf(E);\r\n            if (pos > -1)\r\n                End = Width * pos / Episode.AxisX.Data.length;//Episode.Data.length;\r\n        }\r\n        let EpisodeWidth = End - Start;\r\n        return {\r\n            Start: Start,\r\n            EpisodeWidth: EpisodeWidth\r\n        };\r\n    }\r\n    GetValuesY(Episode, Scale, DefaultScale, Height) {\r\n        let Ys = [];\r\n        let MaxValue = DefaultScale.Values.Last();  //Math.max.apply(null, DefaultScale.Values);\r\n        let MinValue = DefaultScale.Values.First(); //Math.min.apply(null, DefaultScale.Values);\r\n        MaxValue = Scale === null ? MaxValue : Scale.Values.Last();\r\n        MinValue = Scale === null ? MinValue : Scale.Values.First();\r\n        for (let j= 0; j < Episode.Data.length; j++){\r\n            Ys.push( Height - (  (Episode.Data[j] - MinValue) * Height/(MaxValue-MinValue) )  );\r\n        }\r\n        return Ys;\r\n    }\r\n    GetValuesX(Episode, Width) {\r\n        if (Episode.Data.length <= 1)\r\n            return [0];\r\n            //return [EpisodeWidth/2];\r\n        let w = this.GetEpisodeWidthRange(Episode, Width - 2*this.Options._Series.Padding);\r\n        let EpisodeWidth = w.EpisodeWidth;\r\n        let stepX = EpisodeWidth / (Episode.Data.length-1);\r\n\r\n\r\n        return Episode.Data.Select((x, i)=> w.Start + i*stepX);\r\n    }\r\n    GetPoints(X, Y) {\r\n        let Points = [];\r\n        for (let i = 0; i < Y.length; i++){\r\n            Points.push([X[i] + this.Options._Series.Padding, Y[i]]);\r\n        }\r\n        return Points;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    GetContent(){\r\n        let HTMLLegend = `<div class=\"legend\"></div>`;\r\n        //let isGraph = this instanceof Lure._Core.Chart.ChartContentGraph;\r\n        return Lure.CreateElementFromString(`<div class=\"l-chart l-col\">\r\n                        <table class=\"l-chart-t\">\r\n                            <tr class=\"hook-top\">\r\n                                <td colspan=\"5\" class=\"td-hook-top\">\r\n                                    <div class=\"chart-name\"></div>\r\n                                    ${this.Options.Legend.Visible && this.Options.Legend.Position==='top'? HTMLLegend:''}\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <tr class=\"tr-hook-mid\">\r\n                                <td>${this.Options.Legend.Visible && this.Options.Legend.Position==='left'? HTMLLegend:''}</td> \r\n                                <td rowspan=\"1\">\r\n                                    <div class=\"hook-axis-y hook left\"></div>\r\n                                </td>\r\n                                <td rowspan=\"1\" class=\"hook-chart\">\r\n                                    <div class=\"chart-svg-wrapper\"><svg class=\"chart-svg\"></svg></div>\r\n                                    <div class=\"chart-grid\"></div>\r\n                                    <div class=\"chart-tooltip\"></div>\r\n                                    <div class=\"v-stick\"></div>\r\n                                </td> \r\n                                <td rowspan=\"1\">\r\n                                    <div class=\"hook-axis-y hook right\"></div>\r\n                                </td> \r\n                                <td>${this.Options.Legend.Visible && this.Options.Legend.Position ==='right'? HTMLLegend:''}</td>\r\n                            </tr>\r\n                            \r\n                            <tr class=\"tr-hook-axis-x\">\r\n                                <td colspan=\"1\" class=\"td-hook-null\"></td> \r\n                                <td colspan=\"1\" class=\"td-hook-null\"></td> \r\n                                <td colspan=\"1\" class=\"hook-axis-x\">\r\n                                    <div class=\"axis-x\"></div>\r\n                                </td> \r\n                                <td colspan=\"1\" class=\"td-hook-null\"></td>\r\n                                <td colspan=\"1\" class=\"td-hook-null\"></td>\r\n                            </tr>\r\n                            <tr class=\"tr-hook-bottom\">\r\n                                ${this.Options.Legend.Visible && this.Options.Legend.Position==='bottom'? HTMLLegend:''}\r\n                            </tr>\r\n                        </table>\r\n                      </div>`);\r\n    }\r\n    GenContentProps(){}\r\n\r\n    MakeLegend(){}\r\n\r\n    OnLegendChange(e){\r\n        let i = e.currentTarget.dataset['line'];\r\n        let Episode = this.Options.Graph[i];\r\n        Episode.Visible = e.currentTarget.checked;\r\n        //console.log('changed', e.currentTarget, Episode);\r\n        if (this.Options.Graph.Where(g=>g.Visible).length < 1){\r\n            Episode.Visible = true;\r\n            e.currentTarget.checked = true;\r\n            return;\r\n        }\r\n        this.Refresh();\r\n    }\r\n    OnChartMouseMove(e){\r\n        //console.log(`e.target.tagName ${e.target.tagName}`);\r\n        if (e.target.tagName === 'path' || e.target.tagName === 'circle'){\r\n            let i = e.target.dataset[\"line\"];\r\n            this.Options.Tooltip.Episode = this.Options.Graph[i];\r\n        }\r\n        if (!this.Options.Tooltip.Episode)\r\n            return;\r\n\r\n        let x = e.clientX - this.Options.Svg.Rect.left;\r\n        let Tip = this.GetTip(x);\r\n        this.Tooltip.Tip = Tip;\r\n\r\n        //console.log(`e.pageX:${e.pageX}, e.clientX: ${e.clientX}`, e);\r\n        this.StickV.style.left = Tip.x + 'px';\r\n        this.Tooltip.Refresh();\r\n    }\r\n    OnChartMouseEnter(){\r\n        this.Tooltip.Reset();\r\n    }\r\n    OnChartMouseLeave(){\r\n        this.Tooltip.Close();\r\n\r\n    }\r\n    constructor(Chart){\r\n        /* sys */\r\n        this.ID = Lure.GetID();\r\n        this.Chart = Chart;\r\n        this.Options = Chart.Options;\r\n\r\n        /* HTML */\r\n        this.Content = this.GetContent();\r\n\r\n        this.ChartName      = Lure.Select('.chart-name',        this.Content);\r\n        this.HookChart      = Lure.Select('.hook-chart',        this.Content);\r\n        this.ChartLegend    = Lure.Select('.legend',            this.Content);\r\n        this.ChartSvg       = Lure.Select('.chart-svg',         this.Content);\r\n        this.ChartTooltip   = Lure.Select('.chart-tooltip',     this.Content);\r\n\r\n        this.GenContentProps();\r\n        Chart.Target.appendChild(this.Content);\r\n\r\n        /* EVENTS */\r\n        Lure.AddEventListenerGlobal('change', '.legend-checkbox', this.OnLegendChange.bind(this), this.Content);\r\n        this.Tooltip = {};\r\n        if (this.Options.Tooltip.Visible){\r\n            this.HookChart.addEventListener('mousemove',  this.OnChartMouseMove.bind(this));\r\n            this.HookChart.addEventListener('mouseenter', this.OnChartMouseEnter.bind(this));\r\n            this.HookChart.addEventListener('mouseleave', this.OnChartMouseLeave.bind(this));\r\n            this.Tooltip = {\r\n                Timer: null,\r\n                Format: this.Options.Tooltip.Format,\r\n                Hide: ()=>{\r\n                    Lure.AsyncToggle(null, null, this.ChartTooltip, ()=>{},()=>{\r\n                        this.ChartTooltip.style.display = 'none';\r\n                    }, 'l-appear', 'l-disappear', 200, this.Tooltip.Timer)\r\n                },\r\n                Show: ()=>{\r\n                    Lure.AsyncToggle(null, null, this.ChartTooltip, ()=>{\r\n                        this.ChartTooltip.style.display = '';\r\n                    },()=>{}, 'l-disappear', 'l-appear', 200, this.Tooltip.Timer)\r\n                },\r\n                Reset: () => {\r\n                    if (this.Tooltip.Timer)\r\n                        clearTimeout(this.Tooltip.Timer);\r\n                },\r\n                Close: () => {\r\n                    clearTimeout(this.Tooltip.Timer);\r\n                    this.Tooltip.Timer = setTimeout(()=>{\r\n                        this.Tooltip.Hide();\r\n                        this.Tooltip.Timer = null;\r\n                        this.Options.Tooltip.Episode = null;\r\n                    }, this.Options.Tooltip.Timeout);\r\n                },\r\n                Refresh: ()=> {\r\n                    if (this.Tooltip.TipPrev === this.Tooltip.Tip)\r\n                        return;\r\n                    this.Options.Tooltip.TipPrev = this.Tooltip.Tip;\r\n                    let Tip = this.Tooltip.Tip;\r\n\r\n                    this.ChartTooltip.innerHTML = this.Tooltip.Format(Tip);\r\n\r\n                    Tip.Width  = this.ChartTooltip.clientWidth;\r\n                    Tip.Height = this.ChartTooltip.clientHeight;\r\n\r\n                    Tip.Left = Tip.x - 30;\r\n                    Tip.Top  = Tip.y - 20 - Tip.Height;\r\n\r\n                    this.ChartTooltip.style.left = Tip.Left + 'px';\r\n                    this.ChartTooltip.style.top  = Tip.Top + 'px';\r\n\r\n                    if (Tip.Left + Tip.Width >= Tip.SvgWidth){\r\n                        this.ChartTooltip.classList.add('reverse');\r\n                        Tip.Left = Tip.x + 30 - Tip.Width;\r\n                        this.ChartTooltip.style.left = Tip.Left + 'px';\r\n                        this.ChartTooltip.style.top  = Tip.Top + 'px';\r\n                    }else{\r\n                        this.ChartTooltip.classList.remove('reverse');\r\n                    }\r\n                    this.Tooltip.Show();\r\n                },\r\n            };\r\n        }\r\n\r\n\r\n\r\n    }\r\n};","Lure._Core.Chart.ChartContentGraph = class extends Lure._Core.Chart.BChartContent{\r\n\r\n    GenContentProps(){\r\n        this.ChartGrid      = Lure.Select('.chart-grid',        this.Content);\r\n        this.AxisX          = Lure.Select('.axis-x',            this.Content);\r\n        this.AxisYLeft      = Lure.Select('.hook-axis-y.left',  this.Content);\r\n        this.AxisYRight     = Lure.Select('.hook-axis-y.right', this.Content);\r\n        this.StickV         = Lure.Select('.v-stick',           this.Content);\r\n    }\r\n\r\n    GetPathLine(Points, Episode, line, Options={}) {\r\n        const n = Points.length;\r\n\r\n        let xs = [];        //x\r\n        let ys = [];        //y\r\n        let dys = [];       //dx\r\n        let dxs = [];       //dy\r\n        let ds = [];        //derivative\r\n        let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n        for(let i = 0; i < n; i++) {\r\n            xs[i] = Points[i][0];\r\n            ys[i] = Points[i][1];\r\n        }\r\n        // Calculate deltas and derivative\r\n        for(let i = 0; i < n - 1; i++) {\r\n            dys[i] = ys[i + 1] - ys[i];\r\n            dxs[i] = xs[i + 1] - xs[i];\r\n            ds[i] = dys[i] / dxs[i];\r\n        }\r\n        // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n        // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n        ms[0] = ds[0];\r\n        ms[n - 1] = ds[n - 2];\r\n        for(let i = 1; i < n - 1; i++) {\r\n            if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                ms[i] = 0;\r\n            } else {\r\n                ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                    (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                    (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                if(!isFinite(ms[i])) {\r\n                    ms[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        let d = `M ${xs[0]},${ys[0]}`;\r\n        let CSSAnimation = this.Options.Animation.Line;\r\n        let CSSAnimationMark = this.Options.Animation.Marker;\r\n        CSSAnimation = Options.Animation === false ? '':CSSAnimation;\r\n        CSSAnimationMark = Options.Animation === false ? '':CSSAnimationMark;\r\n\r\n       // CSSAnimation = Options.Animation === false ? '':CSSAnimation;\r\n        let dots = '<g class=\"chart-markers\">';\r\n        for(let i = 0; i < n - 1; i++) {\r\n            d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n            if (Episode.Marker.Visible) {\r\n                //dots += this.GetPathLineMarker(xs[i] , ys[i], line, i, Episode.Color, Episode.Marker.Radius );\r\n                dots +=`<circle class=\"chart-marker ${CSSAnimationMark}\" data-line=\"${line}\" data-item=\"${i}\" cx=\"${xs[i]}\" cy=\"${ys[i]}\" r=\"${Episode.Marker.Radius}\" stroke=\"${Episode.Color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n            }\r\n        }\r\n        if (Episode.Marker.Visible)\r\n            dots +=`<circle class=\"chart-marker\" data-line=\"${line}\" data-item=\"${n-1}\" cx=\"${xs[n-1]}\" cy=\"${ys[n-1]}\" r=\"${Episode.Marker.Radius}\" stroke=\"${Episode.Color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n            //dots += this.GetPathLineMarker(xs[n-1] , ys[n-1], line, n-1, Episode.Color, Episode.Marker.Radius );\r\n        dots += '</g>';\r\n        return `<g class=\"chart-episode\"><path class=\"${CSSAnimation}\" data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${Episode.Color}\" stroke-width=\"${Episode.Width}\"></path> ${dots}</g>`;\r\n    }\r\n    GetPathLineMarker(x,y, i,j, color, width){\r\n        return `<circle class=\"chart-marker\" data-line=\"${i}\" data-item=\"${j}\" cx=\"${x}\" cy=\"${y}\" r=\"${width}\" stroke=\"${color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n    }\r\n    GetPathBar(Points, Episode, line, Options={}) {\r\n        let BarCount = this.Options._Series.Bar.Count;\r\n        let BarCountPrepared = this.Options._Series.Bar.CountPrepared;\r\n        let deilmit = 1;\r\n        if (!this.Options.SeriesOptions.BarStack)\r\n            deilmit = BarCount * 0.8;\r\n        //let wd = Episode.Width;//this.Width/this.Options.Labels.Data.length/2 / deilmit;        //Episode.Width;\r\n        let wd = this.HookChart.clientWidth/this.Options.AxisX.Data.length/2 / deilmit;        //this.Options._Series.Bar.Width;//\r\n        //let wd = Episode.Width;\r\n        let height = this.HookChart.clientHeight;\r\n\r\n        let margin = ((wd*1.2) * (BarCountPrepared)) - (  (wd*1.2) *BarCount /2 - (wd*1.2)/2) ;\r\n        if (this.Options.SeriesOptions.BarStack)\r\n            margin = 0;\r\n        //console.log('margin',margin);\r\n        //TODO BAR STACK\r\n        // debugger;\r\n\r\n        let CSSAnimation = this.Options.Animation.Bar;\r\n        CSSAnimation = Options.Animation === false ? '':CSSAnimation;\r\n        let bricks = `<g class=\"chart-episode\" data-type=\"bar\" data-line=\"${line}\">`;\r\n        let GradientId = '';\r\n        if (this.Options.SeriesOptions.BarGradient){\r\n            GradientId = `lc-gradient-${Lure.GetID()}`;\r\n            bricks += `<linearGradient id=\"${GradientId}\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>`;\r\n        }\r\n        let dots = '';\r\n        for (let i = 0; i < Points.length; i++){\r\n            //let d =`M ${margin+Points[i][0]-wd/2} ${height} L ${(margin+Points[i][0]+wd/2)} ${height} ${(margin+Points[i][0]+wd/2)} ${Points[i][1]} ${margin+Points[i][0]-wd/2} ${Points[i][1]}Z`;\r\n            // debugger;\r\n            let ID = Lure.GetID();\r\n\r\n            bricks += `<g class=\"lc-bar-elem\"><rect class=\"chart-bar-elem ${CSSAnimation}\" id=\"chart-b-${ID}\" x=\"${margin+Points[i][0]-wd/2}\" y=\"${Points[i][1]}\" width=\"${wd}\" height=\"${height-Points[i][1]}\" fill=\"${Episode.Color}\" data-line=\"${line}\" data-item=\"${i}\"></rect>`;\r\n            if (this.Options.SeriesOptions.BarGradient)\r\n            {\r\n                bricks += `<rect class=\"lc-bar-elem-gradient ${CSSAnimation}\" id=\"chart-bg-${ID}\" x=\"${margin+Points[i][0]-wd/2}\" y=\"${Points[i][1]}\" width=\"${wd}\" height=\"${height-Points[i][1]}\" fill=\"url(#${GradientId})\" data-line=\"${line}\" data-item=\"${i}\"></rect>`;\r\n            }\r\n            //bricks += `<animate id=\"first\" href=\"#chart-b-${ID}\"  attributeName=\"height\" begin=\"0s\" from=\"0\" to=\"${height-Points[i][1]}\" dur=\"1s\"></animate>`;\r\n            //bricks += `<animate  href=\"#chart-b-${ID}\" fill=\"remove\" attributeName=\"y\" begin=\"0s\" from=\"${height}\" to=\"${Points[i][1]}\" dur=\"400ms\"></animate>`;\r\n            //bricks += `<animate id=\"first${ID}\" href=\"#chart-bg-${ID}\" ill=\"freeze\" attributeType=\"auto\" attributeName=\"y\" begin=\"0s\" from=\"${height}\" to=\"${Points[i][1]}\" dur=\"400ms\"></animate>`;\r\n            bricks +='</g>';\r\n        }\r\n        bricks += dots+'</g>';\r\n        this.Options._Series.Bar.CountPrepared++;\r\n        return bricks;\r\n    }\r\n    GetPath(Type){\r\n        switch (Type){\r\n            case 'line':\r\n                return this.GetPathLine.bind(this);\r\n            case 'bar':\r\n                return this.GetPathBar.bind(this);\r\n            default:\r\n                return this.GetPathLine.bind(this)\r\n        }\r\n    }\r\n    /*content's*/\r\n    GetSeries(){\r\n        this.Options.Graph = this.Options.Series.Where(s=>Lure._Core.Chart.Intitializer.isGraph(s.Type));\r\n    }\r\n    ChartSvgInit(){\r\n        this.ChartSvg.style.height = '1px';\r\n        this.Options.Svg.Height = this.HookChart.clientHeight;\r\n        this.ChartSvg.style.height = this.Options.Svg.Height + 'px';\r\n        //this.AxisYLeft.style.height  = this.Options.Svg.Height+ 'px';\r\n        //this.AxisYRight.style.height = this.Options.Svg.Height + 'px';\r\n\r\n        //this.Options.Svg.Width = this.HookChart.clientWidth;\r\n        //debugger\r\n        this.Options._Series.Padding = 0;\r\n        this.Options._Series.Bar.Count = this.Options.Series.Where(s=>s.Type==='bar').length;\r\n        if (this.Options._Series.Bar.Count > 0){\r\n            this.Options._Series.Bar.Delimit = 1;\r\n            if (!this.Options.SeriesOptions.BarStack)\r\n                this.Options._Series.Bar.Delimit = this.Options._Series.Bar.Count * 0.8;\r\n            this.Options._Series.Bar.Width = this.HookChart.clientWidth/this.Options.AxisX.Data.length/2 / this.Options._Series.Bar.Delimit;\r\n            if (this.Options._Series.Bar.Count === 1)\r\n                this.Options._Series.Padding = this.Options._Series.Bar.Width /2;\r\n            else\r\n                this.Options._Series.Padding = (this.Options._Series.Bar.Width*1.2)/2 * (this.Options._Series.Bar.Count );\r\n        }\r\n        this.AxisX.style.paddingLeft  = this.Options._Series.Padding + 'px';\r\n        this.AxisX.style.paddingRight = this.Options._Series.Padding + 'px';\r\n        this.Options.Svg.Rect = this.HookChart.getBoundingClientRect();\r\n\r\n        this.ChartGrid.classList.remove('no-right');\r\n        if (this.Options.AxisY.HtmlRight !== '')\r\n            this.ChartGrid.classList.add('no-right');\r\n\r\n        if (this.Options.Name === ''){\r\n            this.ChartName.style.display = 'none';\r\n        }\r\n        else {\r\n            this.ChartName.style.display = '';\r\n        }\r\n        //this.Options.Tooltip.Episode = this.Options.Graph[0];\r\n        //this.ChartSvg.style.height = this.HookChart.clientHeight+'px';\r\n    }\r\n\r\n    MakeLegend(){\r\n        if (!this.Options.Legend.Visible)\r\n            return;\r\n        this.Options.Legend.Html = '';\r\n\r\n        for (let i = 0; i < this.Options.Graph.length; i++){\r\n            let Episode = this.Options.Graph[i];\r\n            let Name  = Episode.Name;\r\n            let Value = Episode.Data[i];\r\n            let Color = Episode.Color;\r\n\r\n            let ValueFormatted = Name;\r\n            if (Episode.Format !== null)\r\n                ValueFormatted = Episode.Format.call(Chart, Name, Value, Episode, i);\r\n\r\n            let checked = this.Options.Series[i].Visible ? `checked=\"checked\"` : '';\r\n            this.Options.Legend.Html += `<div class=\"legend-item\">\r\n                <input class=\"legend-checkbox\" type=\"checkbox\" ${checked} id=\"legend-ch-${this.ID}-${i}\" data-line=\"${i}\" data-name=\"${Name}\">\r\n                <label class=\"legend-label\" for=\"legend-ch-${this.ID}-${i}\">\r\n                    <div class=\"legend-icon\" style=\"background-color: ${Color}\"></div>\r\n                    <div>${ValueFormatted}</div>\r\n                </label>\r\n              </div>`;\r\n        }\r\n        this.Options.Legend.Html = `<div class=\"legend-box\">${this.Options.Legend.Html}</div>`;\r\n    }\r\n    MakeAxisX(){\r\n        let LabelList = this.Options.AxisX.Data;\r\n        let Len = LabelList.length;\r\n        let AxisHtml = '';\r\n        let GridLineHtml = '';\r\n        let FullTextLabels = '';\r\n        let MaxLengthLabel = '';\r\n\r\n        if (this.Options.AxisX.Linear) {\r\n            for (let i = 0; i < LabelList.length; i++) {\r\n                //if (number-to-skip || no-skip)\r\n                if ((i % this.Options.AxisX.Skip === 0) || (this.Options.AxisX.Skip === null)) {\r\n                    let ValueFormatted = this.Options.AxisX.Format !== null ? this.Options.AxisX.Format.call(this, LabelList[i]) : LabelList[i];\r\n                    //let w = Weights[i]*LabelCount/Len;\r\n                    let MarginText = -Lure.GetTextWidth(ValueFormatted) / 2;\r\n                    AxisHtml += `<div class=\"axis-x-label ${ValueFormatted.toString().length > 0 ? '' : 'label-empty'}\"><span class=\"axis-x-label-text\" style=\"left: ${MarginText}px\">${ValueFormatted}</span></div>`;\r\n                    FullTextLabels += \" \"+ValueFormatted;\r\n                    MaxLengthLabel = MaxLengthLabel.length < ValueFormatted.length ? ValueFormatted:MaxLengthLabel;\r\n                    if (i > 0)\r\n                        GridLineHtml += `<div class=\"chart-grid-cell\"></div>`;\r\n                }\r\n            }\r\n        } else {\r\n            let Weight = 0;\r\n            let Ws = 0;\r\n            let Weights = [];\r\n\r\n            let LList = LabelList\r\n                .Where((l, i) => {\r\n                    //if (function || number-to-skip || no-skip)\r\n                    let Cond = (!this.Options.AxisX.Skip.call(this.Chart, l))\r\n                        || (!i % this.Options.AxisX.Skip === 0)\r\n                        || (this.Options.AxisX.Skip === null);\r\n                    if (!Cond) {\r\n                        Weight++;\r\n                    } else {\r\n                        if (Weight > 0) {\r\n                            Weights.push(Weight);\r\n                            Ws += Weight;\r\n                        }\r\n                        Weight = 1;\r\n                    }\r\n                    return Cond;\r\n                });\r\n            let LabelCount = LList.length;\r\n            //TODO CHECK THESE DAMN\r\n            Weights.push(Weight-1);\r\n            //debugger\r\n            //console.info(Weights, Weights.length, LList.length);\r\n\r\n            for (let i = 0; i < LList.length; i++) {\r\n                let ValueFormatted = this.Options.AxisX.Format !== null ? this.Options.AxisX.Format.call(this.Chart, LList[i]) : LList[i];\r\n                let w = Weights[i] * 1 / LabelCount;\r\n                AxisHtml += `<div class=\"axis-x-label no-linear ${ValueFormatted.toString().length > 0 ? '' : 'label-empty'}\" style=\"flex: ${w}\"><span class=\"axis-x-label-text\">${ValueFormatted}</span></div>`;\r\n                GridLineHtml += `<div class=\"chart-grid-cell\" style=\"flex: ${w}\"></div>`;\r\n                //console.log(Weights[i], Len, w);\r\n            }\r\n        }\r\n        //p = window.performance.now() - p;\r\n        //console.log(`[p.MakeAxisX] ${Math.round(p)}ms`, p);\r\n\r\n        //let t = performance.now();\r\n        this.AxisX.style.setProperty('--axis-x-label-rotation', '0deg');\r\n        this.AxisX.style.setProperty('--axis-x-label-translateX', '0px');\r\n        this.AxisX.style.setProperty('--axis-x-label-translateY', '0px');\r\n        this.AxisX.style.setProperty('--axis-x-label-height', 'auto');\r\n\r\n\r\n        let st = window.getComputedStyle(this.AxisX);\r\n        let wt = Lure.GetTextWidth(FullTextLabels, st.fontFamily, st.fontSize)*1.05;\r\n        if (this.Options.AxisX.Visible && this.AxisX.clientWidth < wt){\r\n\r\n            //let MinW = this.AxisX.clientWidth / LabelList.length;\r\n            let d = (wt - this.AxisX.clientWidth)/LabelList.length;\r\n            let MaxLen = Lure.GetTextWidth(MaxLengthLabel, st.fontFamily, st.fontSize);\r\n            //let deg = Math.acos((MaxLen-d)/MaxLen)*360/Math.PI;\r\n            //let deg = 90 + Math.atan( 1 - MaxLen/d )*360/Math.PI;\r\n            let rad = (Math.PI/2 + Math.atan( 1 - MaxLen/d )) * 10/9; // up 80deg to 90\r\n            let deg = rad*180/Math.PI;\r\n\r\n            deg = deg > 90 ? 90: deg;\r\n            rad = rad > Math.PI/2 ? Math.PI/2: rad;\r\n\r\n            let h = parseInt(st.height);\r\n            if (h === 0)\r\n                h = 27;\r\n\r\n            //console.log(`deg -> ${deg}, a-> ${(Math.sin(rad))*(MaxLen)}, b-> ${Math.sin(rad)*h}, MaxLen-> ${MaxLen}`);\r\n\r\n            let Y = (Math.sin(rad))*(MaxLen);\r\n            //let Y = (Math.sin(deg*Math.PI/360))*(MaxLen + h);\r\n            let X = d/2; //Math.sin(rad)*(MaxLen + h) / 2 ;\r\n            let wh = Y ;\r\n            //console.log(`wt:${wt}/${this.AxisX.clientWidth}, MaxLen: ${MaxLen}, d:${d}, h: ${h}, deg: ${deg}, wh: ${wh}, Y:${Y}, X:${X}`);\r\n            //debugger\r\n            this.AxisX.style.setProperty('--axis-x-label-rotation', `-${deg}deg`);\r\n            this.AxisX.style.setProperty('--axis-x-label-translateY', `${Y}px`);\r\n            this.AxisX.style.setProperty('--axis-x-label-translateX', `${X}px`);\r\n            this.AxisX.style.setProperty('--axis-x-label-height', `${wh}px`);\r\n        }\r\n        //console.info(performance.now() - t);\r\n\r\n        this.Options.AxisX.Html    = AxisHtml;\r\n        this.Options.Grid.HtmlLine = GridLineHtml;\r\n    }\r\n    MakeAxisY(){\r\n        let i = 0;\r\n        if (!this.Options.AxisY.Visible)\r\n        {\r\n            this.Options.AxisY.Html = '';\r\n            i = 1;\r\n            if (this.Options.Graph.Where(x=>x.AxisY).length < 1)\r\n                return;\r\n        }\r\n        let Scales = this.GetScaleY(this.HookChart.clientHeight);\r\n        //console.log('Scales', Scales);\r\n        let AxisYLeft = '';\r\n        let AxisYRight = '';\r\n        this.Options.AxisY.HtmlLeft = '';\r\n        this.Options.AxisY.HtmlRight = '';\r\n        for (i ; i < Scales.length; i++){\r\n            let Scale = Scales[i];\r\n\r\n            let caption = `<div class=\"y axis-y-caption\">\r\n    <div class=\"axis-y-caption-value\">${i > 0 ? this.Options.Graph[Scale.SIndex].Title : this.Options.Title}</div>\r\n</div>`;\r\n            let a = '';\r\n            for (let j = 0; j < Scale.Values.length; j++){\r\n                a += `<div class=\"axis-y-label\"><span class=\"axis-y-label-text\">${Scale.Values[j]}</span></div>`;\r\n            }\r\n            let Axis = `<div class=\"axis-y\" ${(i>0)? ('style=\"color: '+this.Options.Graph[Scale.SIndex].Color+'; font-weight: bold;\"'):''} data-line=\"${i}\">\r\n    ${caption}\r\n    <div class=\"axis-y-labels\">${a}</div>\r\n</div>`;\r\n            if (Scale.SIndex < 0 && this.Options.AxisY.Position === 'left')\r\n                AxisYLeft += Axis;\r\n            else if (Scale.SIndex < 0 && this.Options.AxisY.Position === 'right')\r\n                AxisYRight += Axis;\r\n            else if (Scale.SIndex > -1 && this.Options.Graph[Scale.SIndex].AxisY.Position !== 'right')\r\n                AxisYLeft += Axis;\r\n            else if (Scale.SIndex > -1 && this.Options.Graph[Scale.SIndex].AxisY.Position === 'right')\r\n                AxisYRight += Axis;\r\n        }\r\n        this.Options.AxisY.HtmlLeft  = AxisYLeft;\r\n        this.Options.AxisY.HtmlRight = AxisYRight;\r\n    }\r\n\r\n    GetScaleY(Height){\r\n        //console.log('GetScaleY.Height', Height);\r\n        let Series = this.Options.Graph;\r\n        let DefaultScale = {\r\n            Min:  this.Options.AxisY.Min  !== 'auto' ? this.Options.AxisY.Min  : Number.MAX_VALUE, //Series[0].Data[0],\r\n            Max:  this.Options.AxisY.Max  !== 'auto' ? this.Options.AxisY.Max  : -Number.MAX_VALUE,  //Series[0].Data[0],\r\n            Step: this.Options.AxisY.Step !== 'auto' ? this.Options.AxisY.Step : 'auto',\r\n\r\n            _Min:  this.Options.AxisY.Min,\r\n            _Max:  this.Options.AxisY.Max,\r\n            _Step: this.Options.AxisY.Step,\r\n            SIndex: -1,\r\n            //Position: this.Options.AxisY.Position,\r\n\r\n            // Title: this.Options.Title,\r\n            // Name: this.Options.Name,\r\n        };\r\n\r\n        let Scales = [DefaultScale];\r\n        //get min and max values\r\n        for (let i = 0; i < Series.length; i++){\r\n\r\n            let S = Series[i];\r\n            if (!S.Visible)\r\n                continue;\r\n            let SData = Series[i].Data;\r\n            let Scale = {\r\n                Min: SData[0],\r\n                Max: SData[0],\r\n                Step: 'auto',\r\n                SIndex: -1,\r\n            };\r\n            if (S.AxisY.Visible){\r\n                Scale.SIndex = i;\r\n                Scale.Min  = S.AxisY.Min  !== 'auto' ? S.AxisY.Min  : Scale.Min;\r\n                Scale.Max  = S.AxisY.Max  !== 'auto' ? S.AxisY.Max  : Scale.Max;\r\n                Scale.Step = S.AxisY.Step !== 'auto' ? S.AxisY.Step : Scale.Step;\r\n                Scale._Min  = S.AxisY.Min;\r\n                Scale._Max  = S.AxisY.Max;\r\n                Scale._Step = S.AxisY.Step;\r\n\r\n                Scales.push(Scale);\r\n            }\r\n\r\n            for (let j = 0; j < SData.length; j++){\r\n                let SValue = SData[j];\r\n                //DefaultScale\r\n                if (DefaultScale._Min === 'auto' && SValue < DefaultScale.Min )\r\n                    DefaultScale.Min = SValue;\r\n                if (DefaultScale._Max === 'auto' && SValue > DefaultScale.Max )\r\n                    DefaultScale.Max = SValue;\r\n\r\n                //Series scale\r\n                if (S.AxisY && S.AxisY.Min === 'auto' && SValue < Scale.Min)\r\n                    Scale.Min = SValue;\r\n                if (S.AxisY && S.AxisY.Max === 'auto' && SValue > Scale.Max)\r\n                    Scale.Max = SValue;\r\n            }\r\n        }\r\n\r\n\r\n        //calc scales\r\n        const MagicConst = 20;   //TODO line-height or not to do\r\n        for (let i = 0; i < Scales.length; i++){\r\n            let Scale = Scales[i];\r\n            let Step = Scale.Step;\r\n\r\n            let OrderMax = Lure.GetNumberOrder(Scale.Max);\r\n            if (Step === 'auto'){\r\n                let dy = Scale.Max - Scale.Min;\r\n                let Rounder = 5 * Math.pow(10, OrderMax-2);\r\n                Step = Lure.RoundBy( dy * MagicConst/Height, Rounder);\r\n            }\r\n            if (Scale._Min === 'auto' && OrderMax > -1 && Scale.Min % 5 > 0){\r\n                let OrderMin = Lure.GetNumberOrder(Scale.Max);\r\n                let ToFixed = OrderMin < 0 ? -OrderMin : 0;\r\n                Scale.Min = Lure.RoundBy(Scale.Min, Step) - Step;\r\n                Scale.Min = parseFloat(Scale.Min.toFixed(2+ToFixed).replace('.00'+'0'.repeat(ToFixed), '')); //fucking js floats\r\n            }\r\n            let ToFixed = OrderMax < 0 ? -OrderMax : 0;\r\n            let ScaleValues = [];\r\n            let StageValue = Scale.Min;\r\n            let lim = 0;\r\n            //if (strict max || auto max)\r\n            if (Scale.Min === Scale.Max){\r\n                Step = 1;\r\n            }\r\n            while (Step !== 0 && ((StageValue <= Scale.Max && Scale._Max === 'auto') || StageValue < Scale.Max && Scale._Max !== 'auto') && lim < 10000){\r\n                lim++;\r\n                ScaleValues.push(StageValue);\r\n                StageValue += Step;\r\n                StageValue = parseFloat(StageValue.toFixed(2+ToFixed).replace('.00'+'0'.repeat(ToFixed), '')); //fucking js floats\r\n            }\r\n            if (lim >= 1000)\r\n                console.warn('Chart.GetScaleYError', this);\r\n\r\n            ScaleValues.push(StageValue);\r\n            Scale.Values = ScaleValues;\r\n        }\r\n        this.Options.Scales = Scales;\r\n        return Scales;\r\n    }\r\n\r\n    MakeGrid(){\r\n        this.Options.Grid.Html = '';\r\n        if (!this.Options.Grid.Visible)\r\n            return;\r\n\r\n        if (this.Options._Series.Padding > 0){\r\n            this.Options.Grid.HtmlLine = `<div class=\"chart-grid-cell\" style=\"min-width: ${this.Options._Series.Padding}px; flex: 0;\"></div>` + this.Options.Grid.HtmlLine;\r\n            this.Options.Grid.HtmlLine += `<div class=\"chart-grid-cell\" style=\"min-width: ${this.Options._Series.Padding}px; flex: 0;\"></div>`;\r\n        }\r\n        let SizeY = this.Options.Scales[0].Values.length-1;\r\n        let Grid = '';\r\n        for (let i = 0; i < SizeY; i++){\r\n            Grid += `<div class=\"chart-grid-line\" >${this.Options.Grid.HtmlLine}</div>`;\r\n        }\r\n        this.Options.Grid.Html = Grid;\r\n        this.ChartGrid.innerHTML = this.Options.Grid.Html;\r\n    }\r\n    MakeSvg(Options){\r\n        this.Options.Svg.Html = '';\r\n        this.Options.Svg.Width = this.HookChart.clientWidth;\r\n        this.Options._Series.Line.CountPrepared = 0;\r\n        this.Options._Series.Bar.CountPrepared = 0;\r\n        this.Options._Series.Pie.CountPrepared = 0;\r\n        for (let i = 0; i < this.Options.Graph.length; i++){\r\n            let Episode = this.Options.Graph[i];\r\n            if (!Episode.Visible)\r\n                continue;\r\n            Episode.Prepared = {};\r\n            let Scale = this.Options.Scales.Where(x=>x.SIndex === i).FirstOrDefault();\r\n            let Ys = this.GetValuesY(Episode, Scale, this.Options.Scales[0], this.Options.Svg.Height);\r\n            let Xs = this.GetValuesX(Episode, this.Options.Svg.Width);\r\n            Episode.Points = this.GetPoints(Xs, Ys);\r\n            //console.log(`PrepareSeries`,Ys, Xs);\r\n            this.Options.Svg.Html += this.GetPath(Episode.Type)(Episode.Points, Episode, i, Options);\r\n        }\r\n        this.ChartSvg.innerHTML = this.Options.Svg.Html;\r\n    }\r\n\r\n    GetTip(ValueX){\r\n        let Episode = this.Options.Tooltip.Episode;\r\n        let Points = Episode.Points;\r\n        let Index = Math.round(ValueX/Points.Last()[0] * (Points.length-1));\r\n        if (Index > Points.length-1)\r\n            Index = Points.length-1;\r\n        if (Index < 1)\r\n            Index = 0;\r\n\r\n        let TipPrev = this.Options.Tooltip.TipPrev;\r\n        let Tip =  {\r\n            Name: Episode.Name,\r\n            Color: Episode.Color,\r\n            ValueX: Episode.AxisX.Data[Index],\r\n            ValueY: Episode.Data[Index],\r\n            Value: Episode.Data[Index],\r\n            Episode: Episode,\r\n            x: Points[Index][0],\r\n            y: Points[Index][1],\r\n            SvgWidth: this.HookChart.clientWidth,\r\n            SvgHeight: this.HookChart.clientHeight,\r\n        };\r\n        if (TipPrev && TipPrev.x === Tip.x && TipPrev.y === Tip.y)\r\n            return TipPrev;\r\n        return Tip;\r\n    }\r\n    FillLegend(){\r\n        if (this.Options.Legend.Visible)\r\n            this.ChartLegend.innerHTML = this.Options.Legend.Html;\r\n    }\r\n    FillAxisX(){\r\n        if (this.Options.AxisX.Visible)\r\n            this.AxisX.innerHTML = this.Options.AxisX.Html;\r\n    }\r\n    FillAxisY(){\r\n        if (this.Options.AxisY.Visible){\r\n            this.AxisYLeft.innerHTML      = this.Options.AxisY.HtmlLeft;\r\n            this.AxisYRight.innerHTML     = this.Options.AxisY.HtmlRight;\r\n        }\r\n    }\r\n    Fill(){\r\n        this.ChartName.innerHTML      = this.Options.Name;\r\n        this.FillLegend();\r\n        this.FillAxisX();\r\n        this.FillAxisY();\r\n    }\r\n\r\n    Refresh(Options){\r\n        this.MakeAxisX();\r\n        this.MakeAxisY();\r\n        this.MakeGrid();\r\n        this.AxisYLeft.innerHTML = this.Options.AxisY.HtmlLeft;\r\n        this.AxisYRight.innerHTML = this.Options.AxisY.HtmlRight;\r\n        this.MakeSvg(Options);\r\n    }\r\n    Redraw(Options){\r\n        this.GetSeries();    //get graph series\r\n        this.MakeLegend();\r\n\r\n        this.MakeAxisX();\r\n        this.MakeAxisY();\r\n\r\n        //fix crawl width\r\n        if (this.Options.Legend.Position === 'right' || this.Options.Legend.Position === 'left')\r\n            this.FillLegend();\r\n        this.FillAxisY();\r\n        this.MakeAxisX();\r\n        //---\r\n\r\n        this.Fill();         //this.Proto.Refresh();\r\n        this.ChartSvgInit();\r\n\r\n        this.MakeSvg(Options);\r\n        this.MakeGrid();\r\n    }\r\n\r\n    OnLegendChange(e){\r\n        let i = e.currentTarget.dataset['line'];\r\n        let Episode = this.Options.Graph[i];\r\n        Episode.Visible = e.currentTarget.checked;\r\n        //console.log('changed', e.currentTarget, Episode);\r\n        if (this.Options.Graph.Where(g=>g.Visible).length < 1){\r\n            Episode.Visible = true;\r\n            e.currentTarget.checked = true;\r\n            return;\r\n        }\r\n        this.Refresh({Animation: false});\r\n    }\r\n    OnChartMouseMove(e){\r\n        //console.log(`e.target.tagName ${e.target.tagName}`);\r\n        if (e.target.tagName === 'rect' || e.target.tagName === 'path' || e.target.tagName === 'circle'){\r\n            let i = e.target.dataset[\"line\"];\r\n            this.Options.Tooltip.Episode = this.Options.Graph[i];\r\n        }\r\n        if (!this.Options.Tooltip.Episode)\r\n            return;\r\n        this.Options.Svg.Rect = this.HookChart.getBoundingClientRect();\r\n        let x = e.clientX - this.Options.Svg.Rect.left;\r\n        let Tip = this.GetTip(x);\r\n        this.Tooltip.Tip = Tip;\r\n\r\n        //console.log(`e.pageX:${e.pageX}, e.clientX: ${e.clientX}`, e);\r\n        this.StickV.style.left = Tip.x + 'px';\r\n        this.Tooltip.Refresh();\r\n    }\r\n\r\n    constructor(Chart){\r\n        super(Chart);\r\n        this._FirstRedraw = true;\r\n        this.Tooltip.Format = this.Tooltip.Format  ? this.Tooltip.Format : Lure._Core.Chart.Intitializer.Default.R.Tooltip.FormatGraph;\r\n    }\r\n};","Lure._Core.Chart.ChartContentDraw = class extends Lure._Core.Chart.BChartContent{\r\n    PolarToCartesius(centerX, centerY, radius, angleInDegrees) {\r\n        let angleInRadians = (angleInDegrees-0) * Math.PI / 180;\r\n\r\n        return {\r\n            x: centerX + (radius * Math.cos(angleInRadians)),\r\n            y: centerY + (radius * Math.sin(angleInRadians))\r\n        };\r\n    }\r\n    GetPathPie(Options={}){\r\n        //let Options = this.Options;\r\n        //debugger\r\n        let sectors = '';\r\n        let Width = this.HookChart.clientWidth;\r\n        let Height = this.HookChart.clientHeight;\r\n        if (this.Options.Legend.Position === 'right' || this.Options.Legend.Position === 'left'){\r\n            // Width = Width - this.Block.Legend.clientWidth;\r\n        }\r\n        //let d = Height < Width? Height*0.9:Width*0.9;\r\n        let d = Height < Width? Height :Width ;\r\n        d = d - 2; //chrome cuts svg by ~1px\r\n        let PrevRadius = -1;\r\n        let PrevWidth = -1;\r\n\r\n\r\n        let CSSAnimationPie = this.Options.Animation.Pie;\r\n        CSSAnimationPie = Options.Animation === false ? '' :CSSAnimationPie;\r\n        let AnimationDuration = Lure.GetDurationAnimation(CSSAnimationPie);\r\n        for (let i = 0; i < this.Options.Draws.length; i++){\r\n            if (!this.Options.Draws[i].Visible)\r\n                continue;\r\n            let Episode = this.Options.Draws[i];\r\n            let sum = 0;\r\n            let AngleStart = Episode.AngleStart; //-45;\r\n            let r = d/2 * (this.Options.Draws.length-i)/this.Options.Draws.length;\r\n            let wd = 2*r;\r\n            if (Episode.Type === 'pie' && i > 0){\r\n                r = PrevRadius - PrevWidth - Episode.Margin/2 - 0.2;\r\n                if (r < 0){\r\n                    r = PrevRadius - i/this.Options.Draws.length*PrevRadius;\r\n                }\r\n            }\r\n            if (Episode.Type === 'ring'){\r\n                wd = Episode.Width;\r\n                //r = r*2;// - wd/2;\r\n                if (i > 0){\r\n                    r = PrevRadius - (PrevWidth- 0.2) - Episode.Margin; //-0.2 for remove gap between rings\r\n                }\r\n            }\r\n            PrevRadius = r;\r\n            PrevWidth = Episode.Type === \"pie\" ? Episode.Width : wd;\r\n\r\n\r\n            let Sectors = [];\r\n            let SectorsCount = 0;\r\n            Episode.Sum = 0;\r\n            for (let j = 0; j < Episode.Data.length; j++){\r\n                Episode.Sum += Episode.Data[j];\r\n                if (!Episode.Visibles[j])\r\n                {\r\n                    Sectors.push(null);\r\n                    continue;\r\n                }\r\n                SectorsCount++;\r\n                Sectors.push(Episode.Data[j]);\r\n                sum += Episode.Data[j];\r\n            }\r\n            //draw something if data empty\r\n            if (SectorsCount < 1)\r\n                Sectors = Episode.Data.Select(()=>1);\r\n            SectorsCount = Sectors.length;\r\n            let SectorVisibleCount = Episode.Visibles.Where(x=>x).length;\r\n            for (let j = 0; j < Sectors.length; j++){\r\n                if(Sectors[j] === null)\r\n                    continue;\r\n                let angle = Sectors[j]/sum * 360;\r\n                if (sum === 0){\r\n                    angle = 360/ SectorVisibleCount;\r\n                }\r\n                if (angle === 360)\r\n                {\r\n                    angle = 359.99; //collapsing 360deg = 0deg\r\n                    AngleStart = 0;\r\n                }\r\n                let style= '';\r\n                if (CSSAnimationPie){\r\n                    style = `opacity: 0;transform: scale(0.01,0.01) ;  animation-delay: ${j*AnimationDuration/SectorsCount/2}ms`;\r\n                }\r\n                sectors += `<g>`;\r\n                if (Episode.Type !== 'pie')\r\n                {\r\n                    //sectors += `<path class=\"${CSSAnimationPie}\" style=\"${style}\" d=\"${this.GetArc(Width/2, Height/2, r, AngleStart, AngleStart + angle)}\" fill=\"none\" stroke=\"${Episode.Colors[j]}\" stroke-width=\"${wd}\" stroke-opacity=\"1\" data-type=\"${Episode.Type}\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                    //  if (this.Options.Tooltip.Visible)\r\n                    //      sectors += `<path class=\"chart-hover ${CSSAnimationPie}\" style=\"${style}\" data-type=\"pie\" data-line=\"${i}\" data-item=\"${j}\" d=\"${this.GetArc(Width/2, Height/2, r, AngleStart, AngleStart+angle)}\" fill=\"none\" stroke=\"#fff\" stroke-width=\"${wd}\" stroke-opacity=\"0\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                    sectors += `<path class=\"${CSSAnimationPie}\" style=\"${style}\" d=\"${this.GetRing(Width/2, Height/2, r, AngleStart, AngleStart + angle, wd)}\" fill=\"${Episode.Colors[j]}\" stroke=\"noe\" stroke-width=\"0\" fill-opacity=\"1\" data-type=\"${Episode.Type}\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                    if (this.Options.Tooltip.Visible)\r\n                        sectors += `<path class=\"chart-hover ${CSSAnimationPie}\" style=\"${style}\" data-type=\"pie\" data-line=\"${i}\" data-item=\"${j}\" d=\"${this.GetRing(Width/2, Height/2, r, AngleStart, AngleStart+angle, wd)}\" fill=\"#fff\" stroke=\"none\" stroke-width=\"0\" fill-opacity=\"0\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                }\r\n                if (Episode.Type === 'pie')\r\n                {\r\n                    sectors += `<path class=\"${CSSAnimationPie}\" style=\"${style}\" d=\"${this.GetSector(Width/2, Height/2, r, AngleStart, AngleStart + angle)}\" fill=\"${Episode.Colors[j]}\" stroke=\"none\" data-type=\"${Episode.Type}\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                    if (this.Options.Tooltip.Visible)\r\n                        sectors += `<path class=\"chart-hover ${CSSAnimationPie}\" style=\"${style}\" data-type=\"pie\" data-line=\"${i}\" data-item=\"${j}\" d=\"${this.GetSector(Width/2, Height/2, r, AngleStart, AngleStart+angle)}\" fill=\"#fff\" stroke=\"none\"  stroke-width=\"0\" fill-opacity=\"0\" data-line=\"${i}\" data-sector=\"${j}\"></path>`;\r\n                }\r\n\r\n                sectors += `</g>`;\r\n                AngleStart += angle;\r\n            }\r\n        }\r\n        //debugger;\r\n        return sectors;\r\n    }\r\n    GetArc(x, y, radius, startAngle, endAngle){\r\n        //debugger;\r\n        let start = this.PolarToCartesius(x, y, radius, endAngle);\r\n        let end = this.PolarToCartesius(x, y, radius, startAngle);\r\n\r\n        let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n        return `M ${start.x} ${start.y} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`;\r\n\r\n        return [\r\n            \"M\", start.x, start.y,\r\n            \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\r\n        ].join(\" \");\r\n    }\r\n    GetSector(x, y, radius, startAngle, endAngle){\r\n        //debugger;\r\n        let start = this.PolarToCartesius(x, y, radius, endAngle);\r\n        let end = this.PolarToCartesius(x, y, radius, startAngle);\r\n\r\n        let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n        //return `M ${start.x} ${start.y} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`;\r\n\r\n        return [\r\n            \"M\", start.x, start.y,\r\n            \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y,\r\n            \"L\", x, y,\r\n            \"Z\"\r\n        ].join(\" \");\r\n    };\r\n    GetRing(x, y, radius, startAngle, endAngle, width){\r\n        //debugger;\r\n        let start = this.PolarToCartesius(x, y, radius, endAngle);\r\n        let end = this.PolarToCartesius(x, y, radius, startAngle);\r\n\r\n        let start1 = this.PolarToCartesius(x, y, radius-width, endAngle);\r\n        let end1 = this.PolarToCartesius(x, y, radius-width, startAngle);\r\n\r\n        let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n        //return `M ${start.x} ${start.y} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`;\r\n\r\n        return [\r\n            \"M\", start.x, start.y,\r\n            \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y,\r\n            \"L\", end1.x, end1.y,\r\n            \"M\", end1.x, end1.y,\r\n            \"A\", radius-width, radius-width, 0, largeArcFlag, 1, start1.x, start1.y,\r\n            \"L\", start.x, start.y\r\n        ].join(\" \");\r\n    }\r\n\r\n    GetContent(){\r\n        let HTMLLegend = `<div class=\"legend\"></div>`;\r\n        return Lure.CreateElementFromString(`<div class=\"l-chart l-col\">\r\n                        <table class=\"l-chart-t\">\r\n                            <tr class=\"tr-hook-top\">\r\n                                <td colspan=\"5\" class=\"hook-top\">\r\n                                    <div class=\"chart-name\"></div>\r\n                                    ${this.Options.Legend.Visible && this.Options.Legend.Position==='top'? HTMLLegend:''}\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <tr class=\"tr-hook-mid\">\r\n                                <td>${this.Options.Legend.Visible && this.Options.Legend.Position==='left'? HTMLLegend:''}</td> \r\n                                <td rowspan=\"1\">\r\n                                    <div class=\"hook-axis-y hook left\"></div>\r\n                                </td>\r\n                                <td rowspan=\"1\" class=\"hook-chart\">\r\n                                    <div class=\"chart-svg-wrapper\"><svg class=\"chart-svg\"></svg></div>\r\n                                    <div class=\"chart-tooltip\"></div>\r\n                                </td> \r\n                                <td rowspan=\"1\">\r\n                                    <div class=\"hook-axis-y hook right\"></div>\r\n                                </td> \r\n                                <td>${this.Options.Legend.Visible && this.Options.Legend.Position ==='right'? HTMLLegend:''}</td>\r\n                            </tr>\r\n                            \r\n                            <tr class=\"tr-hook-bottom\">\r\n                                ${this.Options.Legend.Visible && this.Options.Legend.Position==='bottom'? HTMLLegend:''}\r\n                            </tr>\r\n                        </table>\r\n                      </div>`);\r\n    }\r\n    GenContentProps(){}\r\n\r\n\r\n    /*content's*/\r\n    GetSeries(){\r\n        this.Options.Draws = this.Options.Series.Where(s=>Lure._Core.Chart.Intitializer.isDraw(s.Type));\r\n    }\r\n    ChartSvgInit() {\r\n        this.Options.Svg.Rect = this.HookChart.getBoundingClientRect();\r\n        if (this.Options.Name === ''){\r\n            this.ChartName.style.display = 'none';\r\n        }\r\n        else {\r\n            this.ChartName.style.display = '';\r\n        }\r\n        //this.ChartSvg.style.height = this.HookChart.clientHeight+'px';\r\n    };\r\n    MakeLegend() {\r\n        if (!this.Options.Legend.Visible)\r\n            return;\r\n        this.Options.Legend.Html = '';\r\n\r\n        for (let i = 0; i < this.Options.Draws.length; i++){\r\n            let Episode = this.Options.Draws[i];\r\n\r\n            let l = '';\r\n            for (let j = 0; j < Episode.Labels.Data.length; j++){\r\n                let Name = Episode.Labels.Data[j];\r\n                let Value = Episode.Data[j];\r\n                let ValueFormatted = Name;\r\n                if (Episode.Labels.Format !== null)\r\n                    ValueFormatted = Episode.Labels.Format.call(Chart, Name, Value, Episode, j);\r\n                let Color = Episode.Colors[j] ? Episode.Colors[j] : `#${Lure.GetRandom(100000, 999999)}`;\r\n\r\n                let checked = this.Options.Series[i].Visibles[j] ? `checked=\"checked\"` : '';\r\n                l += `<div class=\"legend-item\">\r\n                                  <input class=\"legend-checkbox\" type=\"checkbox\" ${checked} id=\"legend-ch-${this.ID}-${i}-${j}\" data-line=\"${i}\" data-sector=\"${j}\">\r\n                                  <label class=\"legend-label\" for=\"legend-ch-${this.ID}-${i}-${j}\">\r\n                                     <div class=\"legend-icon\" style=\"background-color: ${Color}\"></div>\r\n                                     <div>${ValueFormatted}</div>\r\n                                  </label>\r\n                                </div>`\r\n            }\r\n            this.Options.Legend.Html += `<div class=\"legend-box\">${l}</div>`;\r\n        }\r\n    }\r\n    MakeSvg(Options) {\r\n        this.Options._Series.Pie.CountPrepared = 0;\r\n        this.Options.Svg.Html = this.GetPathPie(Options);\r\n        this.ChartSvg.innerHTML = this.Options.Svg.Html;\r\n    };\r\n\r\n    Fill(){\r\n        this.ChartName.innerHTML   = this.Options.Name;\r\n        if (this.Options.Legend.Visible)\r\n            this.ChartLegend.innerHTML = this.Options.Legend.Html;\r\n    }\r\n    Refresh(Options){\r\n        this.MakeSvg(Options);\r\n    }\r\n    Redraw(Options){\r\n        this.GetSeries();\r\n        this.MakeLegend();\r\n        this.Fill();         //this.Proto.Refresh();\r\n        this.ChartSvgInit();\r\n        this.MakeSvg(Options);\r\n    }\r\n\r\n\r\n    OnLegendChange(e){\r\n        let i = e.currentTarget.dataset['line'];\r\n        let j = e.currentTarget.dataset['sector'];\r\n        let Episode = this.Options.Draws[i];\r\n        Episode.Visibles[j] = e.currentTarget.checked;\r\n        if (Episode.Visibles.Where(x=>x).length < 1){\r\n            Episode.Visibles[j] = true;\r\n            e.currentTarget.checked = true;\r\n            return;\r\n        }\r\n        this.Refresh({Animation: false});\r\n    }\r\n    OnChartMouseMove(e){\r\n        //console.log(`e.target.tagName ${e.target.tagName}`);\r\n        if (e.target.tagName.toLowerCase() !== 'path')\r\n            return false;\r\n        let i = e.target.dataset[\"line\"];\r\n        let j = e.target.dataset[\"sector\"];\r\n        this.Options.Tooltip.Episode = this.Options.Draws[i];\r\n        this.Options.Svg.Rect = this.HookChart.getBoundingClientRect();\r\n        if (!this.Options.Tooltip.Episode)\r\n            return;\r\n        let x = e.clientX - this.Options.Svg.Rect.left;\r\n        let y = e.clientY - this.Options.Svg.Rect.top;\r\n        this.Tooltip.Tip =  {\r\n            Name:  this.Options.Tooltip.Episode.Labels.Data[j],\r\n            Label: this.Options.Tooltip.Episode.Labels.Data[j],\r\n            Color: this.Options.Tooltip.Episode.Colors[j],\r\n            ValueX: this.Options.Tooltip.Episode.Labels.Data[j],\r\n            ValueY: this.Options.Tooltip.Episode.Data[j],\r\n            Value:  this.Options.Tooltip.Episode.Data[j],\r\n            Episode: this.Options.Tooltip.Episode,\r\n            x: x,\r\n            y: y,\r\n            SvgWidth: this.HookChart.clientWidth,\r\n            SvgHeight: this.HookChart.clientHeight,\r\n        };\r\n        //console.log(`e.pageX:${e.pageX}, e.clientX: ${e.clientX}`, e);\r\n        this.Tooltip.Refresh();\r\n    }\r\n\r\n\r\n\r\n    constructor(Chart){\r\n        super(Chart);\r\n        this.Tooltip.Format = this.Tooltip.Format  ? this.Tooltip.Format : Lure._Core.Chart.Intitializer.Default.R.Tooltip.FormatDraws;\r\n    }\r\n};","Lure.Chart = class {\r\n    Redraw(Options){\r\n        //let r = window.performance.now();\r\n        if (this._ContentManager.Content.clientHeight){\r\n            this._locked = true;\r\n            this._ContentManager.Redraw(Options);\r\n            setTimeout(()=>{\r\n                this._locked = false;\r\n                //this._t = window.performance.now() - this._t;\r\n                //r = window.performance.now() - r;\r\n                //console.log(`[Chart.Performance] ${Math.round(r)}ms (init:${Math.round(this._t)}ms)`)\r\n            })\r\n        }\r\n    }\r\n    Refresh(Options){\r\n        if (!this._ContentManager.Options.Graph && !this._ContentManager.Options.Draws)\r\n            return this._ContentManager.Redraw(Options);\r\n        this._locked = true;\r\n        this._ContentManager.Refresh(Options);\r\n        setTimeout(()=>{\r\n            this._locked = false;\r\n        })\r\n        //\r\n        // this._ContentManager.Refresh();\r\n        //\r\n        // setTimeout(()=>{\r\n        //     this._t = window.performance.now() - this._t;\r\n        //     r = window.performance.now() - r;\r\n        //     console.log(`[Chart.Performance] ${Math.round(r)}ms (init:${Math.round(this._t)}ms)`)\r\n        // }, 0)\r\n    }\r\n    // get isGraph(){\r\n    //     return Lure._Core.Chart.Intitializer.Type.Graph.indexOf(this.Options.Type) > -1\r\n    // }\r\n    SerieSwitch(SeriesNumber, SectorNumber){\r\n        this.Options.Series[SeriesNumber].Visibles[SectorNumber] = !this.Options.Series[SeriesNumber].Visibles[SectorNumber];\r\n        let Checkbox = document.getElementById(`legend-ch-${this._ContentManager.ID}-${SectorNumber}`);\r\n        if (Checkbox !== null)\r\n            Checkbox.checked = this.Options.Series[SeriesNumber].Visibles[SectorNumber];\r\n        this.Refresh({Animation:false});\r\n    }\r\n    get Series(){\r\n        return this.Options.Series;\r\n    }\r\n    set Series(se){\r\n        this.Options.Series = se;\r\n        Lure._Core.Chart.Intitializer.GetSeries(this.Options);\r\n    }\r\n\r\n    constructor(R){\r\n        this._t = window.performance.now();\r\n        if (R.Disabled)\r\n            return;\r\n\r\n        this._locked = false;\r\n        this.Target = Lure.Select(R.Target);\r\n        Lure._Core.Chart.Intitializer.InitR.call(this, R);\r\n\r\n        // if (this.Options.Height === 'auto' && this.Target.clientHeight === 0)\r\n        //     this.Target.style.height = Lure._Core.Chart.Intitializer.Default.R.Height + 'px';\r\n\r\n        if (this.isGraph)\r\n            this._ContentManager = new Lure._Core.Chart.ChartContentGraph(this);\r\n        else\r\n            this._ContentManager = new Lure._Core.Chart.ChartContentDraw(this);\r\n\r\n\r\n        if (R.Responsible){\r\n            //wait 4 render\r\n            setTimeout(()=>{\r\n                this.Listener = new Lure.Listener({\r\n                    Target: this._ContentManager.Content,\r\n                    Freq: 20,\r\n                    Delay: 20,\r\n                    OnEvent: ()=>{\r\n                        if (this.Listener.Height > 0 && !this._locked)\r\n                            this.Redraw({Animation: false});\r\n                    }\r\n                });\r\n                this.Listener.Run();\r\n            })\r\n        }\r\n        if (R.DrawAfterInit)\r\n            this.Redraw();\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}